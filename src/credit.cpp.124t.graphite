
;; Function std::stack<Credit*>::~stack() (_ZNSt5stackIP6CreditSt5dequeIS1_SaIS1_EEED2Ev, funcdef_no=1317, decl_uid=21560, cgraph_uid=445, symbol_order=447)


Pass statistics:
----------------

std::stack<Credit*>::~stack() (struct stackD.19256 * const thisD.21561)
{
  struct CreditD.18194 * * * __nstartD.23728;
  struct CreditD.18194 * * * _7;
  struct CreditD.18194 * * * _8;
  struct CreditD.18194 * * * _9;
  struct CreditD.18194 * * _12;
  struct CreditD.18194 * * * pretmp_18;
  struct CreditD.18194 * * * prephitmp_19;

;;   basic block 2, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#87ptD.0 => &this_1(D)->cD.20262
  # DEBUG thisD.22840 => D#87ptD.0
  # DEBUG D#78ptD.0 => &D#87ptD.0->D.20219
  # DEBUG thisD.22829 => D#78ptD.0
  # DEBUG thisD.22826 => D#87ptD.0
  # DEBUG D#3ptD.0 => &D#87ptD.0->D.20219._M_implD.19670._M_finishD.19675
  # DEBUG thisD.22828 => NULL
  # DEBUG __xD.22827 => D#3ptD.0
  # DEBUG D#86ptD.0 => MEM[(const struct iteratorD.19557 &)D#87ptD.0 + 48]._M_curD.19569
  # DEBUG D.22835 => D#86ptD.0
  # DEBUG D#85ptD.0 => MEM[(const struct iteratorD.19557 &)D#87ptD.0 + 48]._M_firstD.19570
  # DEBUG D.22836 => D#85ptD.0
  # DEBUG D#84ptD.0 => MEM[(const struct iteratorD.19557 &)D#87ptD.0 + 48]._M_lastD.19571
  # DEBUG D.22837 => D#84ptD.0
  # DEBUG D#83ptD.0 => MEM[(const struct iteratorD.19557 &)D#87ptD.0 + 48]._M_nodeD.19572
  # DEBUG D.22838 => D#83ptD.0
  # DEBUG thisD.22823 => D#87ptD.0
  # DEBUG D#4ptD.0 => &D#87ptD.0->D.20219._M_implD.19670._M_startD.19674
  # DEBUG thisD.22825 => NULL
  # DEBUG __xD.22824 => D#4ptD.0
  # DEBUG D#82ptD.0 => MEM[(const struct iteratorD.19557 &)D#87ptD.0 + 16]._M_curD.19569
  # DEBUG D.22831 => D#82ptD.0
  # DEBUG D#81ptD.0 => MEM[(const struct iteratorD.19557 &)D#87ptD.0 + 16]._M_firstD.19570
  # DEBUG D.22832 => D#81ptD.0
  # DEBUG D#80ptD.0 => MEM[(const struct iteratorD.19557 &)D#87ptD.0 + 16]._M_lastD.19571
  # DEBUG D.22833 => D#80ptD.0
  # DEBUG D#79ptD.0 => MEM[(const struct iteratorD.19557 &)D#87ptD.0 + 16]._M_nodeD.19572
  # DEBUG D.22834 => D#79ptD.0
  # DEBUG D#5ptD.0 => D#87ptD.0
  # DEBUG thisD.22822 => D#5ptD.0
  # DEBUG __firstD.22821 => D#6ptD.0
  # DEBUG __lastD.22820 => D#7ptD.0
  # DEBUG D.22819 => D#8ptD.0
  # DEBUG D#147ptD.0 => &MEM[(struct dequeD.19255 *)this_1(D)].D.20219
  # DEBUG thisD.23722 => D#147ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _7 = MEM[(struct _Deque_baseD.19304 *)this_1(D)]._M_implD.19670._M_mapD.19672;
  if (_7 != 0B)
    goto <bb 3>;
  else
    goto <bb 9>;
;;    succ:       3 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _8 = MEM[(struct _Deque_baseD.19304 *)this_1(D)]._M_implD.19670._M_finishD.19675._M_nodeD.19572;
  # PT = nonlocal escaped 
  _9 = _8 + 8;
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __nstart_10 = MEM[(struct _Deque_baseD.19304 *)this_1(D)]._M_implD.19670._M_startD.19674._M_nodeD.19572;
  # DEBUG D#69ptD.0 => D#147ptD.0
  # DEBUG __nstartD.23728 => __nstart_10
  # DEBUG __nfinishD.23727 => _9
  # DEBUG thisD.23726 => D#69ptD.0
  # DEBUG __nD.23729 => __nstart_10
  if (_9 <= __nstart_10)
    goto <bb 8>;
  else
    goto <bb 4>;
;;    succ:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_25 = PHI <.MEM_2(D)(4), .MEM_16(6)>
  # PT = nonlocal escaped 
  # __nstart_22 = PHI <__nstart_10(4), __nstart_13(6)>
  # DEBUG __nD.23729 => __nstart_22
  # VUSE <.MEM_25>
  # PT = nonlocal escaped 
  _12 = *__nstart_22;
  # DEBUG thisD.23731 => D#67ptD.0
  # DEBUG __pD.23730 => _12
  # DEBUG __sizeD.22687 => 8
  # DEBUG D#60ptD.0 => &D#68ptD.0->_M_implD.19670
  # DEBUG D#58ptD.0 => D#60ptD.0
  # DEBUG __pD.23735 => _12
  # DEBUG __aD.23733 => D#58ptD.0
  # DEBUG __nD.23734 => D#59ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#54ptD.0 => D#56ptD.0
  # DEBUG D#55ptD.0 => D#57ptD.0
  # DEBUG __pD.23738 => _12
  # DEBUG thisD.23736 => D#54ptD.0
  # DEBUG D.23737 => D#55ptD.0
  # .MEM_16 = VDEF <.MEM_25>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_12);
  # PT = nonlocal escaped 
  __nstart_13 = __nstart_22 + 8;
  # DEBUG __nD.23729 => __nstart_13
  # DEBUG __nD.23729 => __nstart_13
  if (_9 <= __nstart_13)
    goto <bb 7>;
  else
    goto <bb 6>;
;;    succ:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_16>
  pretmp_18 = MEM[(struct _Deque_baseD.19304 *)this_1(D)]._M_implD.19670._M_mapD.19672;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_23 = PHI <.MEM_16(7), .MEM_2(D)(3)>
  # PT = nonlocal escaped 
  # prephitmp_19 = PHI <pretmp_18(7), _7(3)>
  # DEBUG D#76ptD.0 => D#147ptD.0->_M_implD.19670._M_map_sizeD.19673
  # DEBUG D#148ptD.0 => MEM[(struct _Deque_baseD.19304 *)this_1(D)]._M_implD.19670._M_mapD.19672
  # DEBUG D#74ptD.0 => D#147ptD.0
  # DEBUG D#75ptD.0 => D#76ptD.0
  # DEBUG __pD.23741 => D#148ptD.0
  # DEBUG thisD.23739 => D#74ptD.0
  # DEBUG __nD.23740 => D#75ptD.0
  # DEBUG D#73ptD.0 => D#75ptD.0
  # DEBUG D#72ptD.0 => D#74ptD.0
  # DEBUG D#71ptD.0 => D#72ptD.0
  # DEBUG thisD.22772 => D#71ptD.0
  # DEBUG D#70ptD.0 => D#71ptD.0
  # DEBUG thisD.22760 => D#70ptD.0
  # DEBUG thisD.22752 => NULL
  # DEBUG D.22753 => NULL
  # DEBUG thisD.22750 => NULL
  # DEBUG D#42ptD.0 => &__map_allocD.23742
  # DEBUG D#43ptD.0 => D#73ptD.0
  # DEBUG __pD.23745 => D#148ptD.0
  # DEBUG __aD.23743 => D#42ptD.0
  # DEBUG __nD.23744 => D#43ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG __pD.23748 => D#148ptD.0
  # DEBUG thisD.23746 => D#38ptD.0
  # DEBUG D.23747 => D#39ptD.0
  # .MEM_17 = VDEF <.MEM_23>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (prephitmp_19);
  # DEBUG thisD.22786 => &__map_allocD.23742
  # DEBUG thisD.22765 => &__map_allocD.23742
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 8, next block 1, flags: (NEW, REACHABLE)
;;    pred:       2 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_15 = PHI <.MEM_2(D)(2), .MEM_17(8)>
  # DEBUG D#77ptD.0 => &D#147ptD.0->_M_implD.19670
  # DEBUG thisD.23723 => D#77ptD.0
  # DEBUG thisD.23724 => D#77ptD.0
  # DEBUG thisD.23725 => D#77ptD.0
  # .MEM_4 = VDEF <.MEM_15>
  MEM[(struct  &)this_1(D)] ={v} {CLOBBER};
  # VUSE <.MEM_4>
  return;
;;    succ:       EXIT [100.0%] 

}


Creating dr for MEM[(struct _Deque_base *)this_1(D)]._M_impl._M_map
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_1(D)]
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(struct _Deque_base *)this_1(D)]._M_impl._M_finish._M_node
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_1(D)]
	Access function 0: 192
	Access function 1: 384
	Access function 2: 0
Creating dr for MEM[(struct _Deque_base *)this_1(D)]._M_impl._M_start._M_node
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_1(D)]
	Access function 0: 192
	Access function 1: 128
	Access function 2: 0
Creating dr for *__nstart_22
analyze_innermost: success.
	base_address: __nstart_10
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_10
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_22
analyze_innermost: success.
	base_address: __nstart_10
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_10
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_22
analyze_innermost: success.
	base_address: __nstart_10
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_10
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_22
analyze_innermost: success.
	base_address: __nstart_10
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_10
	Access function 0: {0B, +, 8}_1
Analyzing # of iterations of loop 1
  exit condition [__nstart_10 + 8, + , 8](no_overflow) < _8 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _8 - (unsigned long) __nstart_10) + 7) / 8, bounded by 2305843009213693951
Analyzing # of iterations of loop 1
  exit condition [__nstart_10 + 8, + , 8](no_overflow) < _8 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _8 - (unsigned long) __nstart_10) + 7) / 8, bounded by 2305843009213693951
Creating dr for *__nstart_22
analyze_innermost: success.
	base_address: __nstart_10
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_10
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_22
analyze_innermost: success.
	base_address: __nstart_10
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_10
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_22
analyze_innermost: success.
	base_address: __nstart_10
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_10
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_22
analyze_innermost: success.
	base_address: __nstart_10
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_10
	Access function 0: {0B, +, 8}_1
Analyzing # of iterations of loop 1
  exit condition [__nstart_10 + 8, + , 8](no_overflow) < _8 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _8 - (unsigned long) __nstart_10) + 7) / 8, bounded by 2305843009213693951
Creating dr for MEM[(struct _Deque_base *)this_1(D)]._M_impl._M_map
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_1(D)]
	Access function 0: 0
	Access function 1: 0

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:11, LOOPS:1, CONDITIONS:3, STMTS:106)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_9 })
  {
    <bb 2>:
    # DEBUG D#87 => &this_1(D)->c
    # DEBUG this => D#87
    # DEBUG D#78 => &D#87->D.20219
    # DEBUG this => D#78
    # DEBUG this => D#87
    # DEBUG D#3 => &D#87->D.20219._M_impl._M_finish
    # DEBUG this => NULL
    # DEBUG __x => D#3
    # DEBUG D#86 => MEM[(const struct iterator &)D#87 + 48]._M_cur
    # DEBUG D.22835 => D#86
    # DEBUG D#85 => MEM[(const struct iterator &)D#87 + 48]._M_first
    # DEBUG D.22836 => D#85
    # DEBUG D#84 => MEM[(const struct iterator &)D#87 + 48]._M_last
    # DEBUG D.22837 => D#84
    # DEBUG D#83 => MEM[(const struct iterator &)D#87 + 48]._M_node
    # DEBUG D.22838 => D#83
    # DEBUG this => D#87
    # DEBUG D#4 => &D#87->D.20219._M_impl._M_start
    # DEBUG this => NULL
    # DEBUG __x => D#4
    # DEBUG D#82 => MEM[(const struct iterator &)D#87 + 16]._M_cur
    # DEBUG D.22831 => D#82
    # DEBUG D#81 => MEM[(const struct iterator &)D#87 + 16]._M_first
    # DEBUG D.22832 => D#81
    # DEBUG D#80 => MEM[(const struct iterator &)D#87 + 16]._M_last
    # DEBUG D.22833 => D#80
    # DEBUG D#79 => MEM[(const struct iterator &)D#87 + 16]._M_node
    # DEBUG D.22834 => D#79
    # DEBUG D#5 => D#87
    # DEBUG this => D#5
    # DEBUG __first => D#6
    # DEBUG __last => D#7
    # DEBUG D.22819 => D#8
    # DEBUG D#147 => &MEM[(struct deque *)this_1(D)].D.20219
    # DEBUG this => D#147
    # VUSE <.MEM_2(D)>
    _7 = MEM[(struct _Deque_base *)this_1(D)]._M_impl._M_map;
    if (_7 != 0B)
      goto <bb 3>;
    else
      goto <bb 9>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_8 bb_4 })
  {
    <bb 3>:
    # VUSE <.MEM_2(D)>
    _8 = MEM[(struct _Deque_base *)this_1(D)]._M_impl._M_finish._M_node;
    _9 = _8 + 8;
    # VUSE <.MEM_2(D)>
    __nstart_10 = MEM[(struct _Deque_base *)this_1(D)]._M_impl._M_start._M_node;
    # DEBUG D#69 => D#147
    # DEBUG __nstart => __nstart_10
    # DEBUG __nfinish => _9
    # DEBUG this => D#69
    # DEBUG __n => __nstart_10
    if (_9 <= __nstart_10)
      goto <bb 8>;
    else
      goto <bb 4>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_5 })
  {
    <bb 4>:

  }
  bb_7 (preds = {bb_5 }, succs = {bb_10 })
  {
    <bb 7>:

  }
  bb_10 (preds = {bb_7 }, succs = {bb_8 })
  {
    <bb 10>:
    # VUSE <.MEM_16>
    pretmp_18 = MEM[(struct _Deque_base *)this_1(D)]._M_impl._M_map;

  }
  bb_8 (preds = {bb_10 bb_3 }, succs = {bb_9 })
  {
    <bb 8>:
    # .MEM_23 = PHI <.MEM_16(10), .MEM_2(D)(3)>
    # prephitmp_19 = PHI <pretmp_18(10), _7(3)>
    # DEBUG D#76 => D#147->_M_impl._M_map_size
    # DEBUG D#148 => MEM[(struct _Deque_base *)this_1(D)]._M_impl._M_map
    # DEBUG D#74 => D#147
    # DEBUG D#75 => D#76
    # DEBUG __p => D#148
    # DEBUG this => D#74
    # DEBUG __n => D#75
    # DEBUG D#73 => D#75
    # DEBUG D#72 => D#74
    # DEBUG D#71 => D#72
    # DEBUG this => D#71
    # DEBUG D#70 => D#71
    # DEBUG this => D#70
    # DEBUG this => NULL
    # DEBUG D.22753 => NULL
    # DEBUG this => NULL
    # DEBUG D#42 => &__map_alloc
    # DEBUG D#43 => D#73
    # DEBUG __p => D#148
    # DEBUG __a => D#42
    # DEBUG __n => D#43
    # DEBUG D#41 => D#43
    # DEBUG D#40 => D#42
    # DEBUG D#38 => D#40
    # DEBUG D#39 => D#41
    # DEBUG __p => D#148
    # DEBUG this => D#38
    # DEBUG D.23747 => D#39
    # .MEM_17 = VDEF <.MEM_23>
    operator delete (prephitmp_19);
    # DEBUG this => &__map_alloc
    # DEBUG this => &__map_alloc

  }
  bb_9 (preds = {bb_2 bb_8 }, succs = {bb_1 })
  {
    <bb 9>:
    # .MEM_15 = PHI <.MEM_2(D)(2), .MEM_17(8)>
    # DEBUG D#77 => &D#147->_M_impl
    # DEBUG this => D#77
    # DEBUG this => D#77
    # DEBUG this => D#77
    # .MEM_4 = VDEF <.MEM_15>
    MEM[(struct  &)this_1(D)] ={v} {CLOBBER};
    # VUSE <.MEM_4>
    return;

  }
  loop_1 (header = 5, latch = 6, niter = (((unsigned long) _8 - (unsigned long) __nstart_10) + 7) / 8, upper_bound = 2305843009213693951)
  {
    bb_5 (preds = {bb_4 bb_6 }, succs = {bb_7 bb_6 })
    {
      <bb 5>:
      # .MEM_25 = PHI <.MEM_2(D)(4), .MEM_16(6)>
      # __nstart_22 = PHI <__nstart_10(4), __nstart_13(6)>
      # DEBUG __n => __nstart_22
      # VUSE <.MEM_25>
      _12 = *__nstart_22;
      # DEBUG this => D#67
      # DEBUG __p => _12
      # DEBUG __size => 8
      # DEBUG D#60 => &D#68->_M_impl
      # DEBUG D#58 => D#60
      # DEBUG __p => _12
      # DEBUG __a => D#58
      # DEBUG __n => D#59
      # DEBUG D#57 => D#59
      # DEBUG D#56 => D#58
      # DEBUG D#54 => D#56
      # DEBUG D#55 => D#57
      # DEBUG __p => _12
      # DEBUG this => D#54
      # DEBUG D.23737 => D#55
      # .MEM_16 = VDEF <.MEM_25>
      operator delete (_12);
      __nstart_13 = __nstart_22 + 8;
      # DEBUG __n => __nstart_13
      # DEBUG __n => __nstart_13
      if (_9 <= __nstart_13)
        goto <bb 7>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_5 })
    {
      <bb 6>:
      goto <bb 5>;

    }
  }
}

Pass statistics:
----------------

std::stack<Credit*>::~stack() (struct stackD.19256 * const thisD.21561)
{
  struct CreditD.18194 * * * __nstartD.23728;
  struct CreditD.18194 * * * _7;
  struct CreditD.18194 * * * _8;
  struct CreditD.18194 * * * _9;
  struct CreditD.18194 * * _12;
  struct CreditD.18194 * * * pretmp_18;
  struct CreditD.18194 * * * prephitmp_19;

;;   basic block 2, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#87ptD.0 => &this_1(D)->cD.20262
  # DEBUG thisD.22840 => D#87ptD.0
  # DEBUG D#78ptD.0 => &D#87ptD.0->D.20219
  # DEBUG thisD.22829 => D#78ptD.0
  # DEBUG thisD.22826 => D#87ptD.0
  # DEBUG D#3ptD.0 => &D#87ptD.0->D.20219._M_implD.19670._M_finishD.19675
  # DEBUG thisD.22828 => NULL
  # DEBUG __xD.22827 => D#3ptD.0
  # DEBUG D#86ptD.0 => MEM[(const struct iteratorD.19557 &)D#87ptD.0 + 48]._M_curD.19569
  # DEBUG D.22835 => D#86ptD.0
  # DEBUG D#85ptD.0 => MEM[(const struct iteratorD.19557 &)D#87ptD.0 + 48]._M_firstD.19570
  # DEBUG D.22836 => D#85ptD.0
  # DEBUG D#84ptD.0 => MEM[(const struct iteratorD.19557 &)D#87ptD.0 + 48]._M_lastD.19571
  # DEBUG D.22837 => D#84ptD.0
  # DEBUG D#83ptD.0 => MEM[(const struct iteratorD.19557 &)D#87ptD.0 + 48]._M_nodeD.19572
  # DEBUG D.22838 => D#83ptD.0
  # DEBUG thisD.22823 => D#87ptD.0
  # DEBUG D#4ptD.0 => &D#87ptD.0->D.20219._M_implD.19670._M_startD.19674
  # DEBUG thisD.22825 => NULL
  # DEBUG __xD.22824 => D#4ptD.0
  # DEBUG D#82ptD.0 => MEM[(const struct iteratorD.19557 &)D#87ptD.0 + 16]._M_curD.19569
  # DEBUG D.22831 => D#82ptD.0
  # DEBUG D#81ptD.0 => MEM[(const struct iteratorD.19557 &)D#87ptD.0 + 16]._M_firstD.19570
  # DEBUG D.22832 => D#81ptD.0
  # DEBUG D#80ptD.0 => MEM[(const struct iteratorD.19557 &)D#87ptD.0 + 16]._M_lastD.19571
  # DEBUG D.22833 => D#80ptD.0
  # DEBUG D#79ptD.0 => MEM[(const struct iteratorD.19557 &)D#87ptD.0 + 16]._M_nodeD.19572
  # DEBUG D.22834 => D#79ptD.0
  # DEBUG D#5ptD.0 => D#87ptD.0
  # DEBUG thisD.22822 => D#5ptD.0
  # DEBUG __firstD.22821 => D#6ptD.0
  # DEBUG __lastD.22820 => D#7ptD.0
  # DEBUG D.22819 => D#8ptD.0
  # DEBUG D#147ptD.0 => &MEM[(struct dequeD.19255 *)this_1(D)].D.20219
  # DEBUG thisD.23722 => D#147ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _7 = MEM[(struct _Deque_baseD.19304 *)this_1(D)]._M_implD.19670._M_mapD.19672;
  if (_7 != 0B)
    goto <bb 3>;
  else
    goto <bb 9>;
;;    succ:       3 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _8 = MEM[(struct _Deque_baseD.19304 *)this_1(D)]._M_implD.19670._M_finishD.19675._M_nodeD.19572;
  # PT = nonlocal escaped 
  _9 = _8 + 8;
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __nstart_10 = MEM[(struct _Deque_baseD.19304 *)this_1(D)]._M_implD.19670._M_startD.19674._M_nodeD.19572;
  # DEBUG D#69ptD.0 => D#147ptD.0
  # DEBUG __nstartD.23728 => __nstart_10
  # DEBUG __nfinishD.23727 => _9
  # DEBUG thisD.23726 => D#69ptD.0
  # DEBUG __nD.23729 => __nstart_10
  if (_9 <= __nstart_10)
    goto <bb 8>;
  else
    goto <bb 4>;
;;    succ:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_25 = PHI <.MEM_2(D)(4), .MEM_16(6)>
  # PT = nonlocal escaped 
  # __nstart_22 = PHI <__nstart_10(4), __nstart_13(6)>
  # DEBUG __nD.23729 => __nstart_22
  # VUSE <.MEM_25>
  # PT = nonlocal escaped 
  _12 = *__nstart_22;
  # DEBUG thisD.23731 => D#67ptD.0
  # DEBUG __pD.23730 => _12
  # DEBUG __sizeD.22687 => 8
  # DEBUG D#60ptD.0 => &D#68ptD.0->_M_implD.19670
  # DEBUG D#58ptD.0 => D#60ptD.0
  # DEBUG __pD.23735 => _12
  # DEBUG __aD.23733 => D#58ptD.0
  # DEBUG __nD.23734 => D#59ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#54ptD.0 => D#56ptD.0
  # DEBUG D#55ptD.0 => D#57ptD.0
  # DEBUG __pD.23738 => _12
  # DEBUG thisD.23736 => D#54ptD.0
  # DEBUG D.23737 => D#55ptD.0
  # .MEM_16 = VDEF <.MEM_25>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_12);
  # PT = nonlocal escaped 
  __nstart_13 = __nstart_22 + 8;
  # DEBUG __nD.23729 => __nstart_13
  # DEBUG __nD.23729 => __nstart_13
  if (_9 <= __nstart_13)
    goto <bb 7>;
  else
    goto <bb 6>;
;;    succ:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 6, next block 10, flags: (NEW)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       10 [100.0%]  (FALLTHRU)

;;   basic block 10, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 7, next block 8, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_16>
  pretmp_18 = MEM[(struct _Deque_baseD.19304 *)this_1(D)]._M_implD.19670._M_mapD.19672;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 9, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_23 = PHI <.MEM_16(10), .MEM_2(D)(3)>
  # PT = nonlocal escaped 
  # prephitmp_19 = PHI <pretmp_18(10), _7(3)>
  # DEBUG D#76ptD.0 => D#147ptD.0->_M_implD.19670._M_map_sizeD.19673
  # DEBUG D#148ptD.0 => MEM[(struct _Deque_baseD.19304 *)this_1(D)]._M_implD.19670._M_mapD.19672
  # DEBUG D#74ptD.0 => D#147ptD.0
  # DEBUG D#75ptD.0 => D#76ptD.0
  # DEBUG __pD.23741 => D#148ptD.0
  # DEBUG thisD.23739 => D#74ptD.0
  # DEBUG __nD.23740 => D#75ptD.0
  # DEBUG D#73ptD.0 => D#75ptD.0
  # DEBUG D#72ptD.0 => D#74ptD.0
  # DEBUG D#71ptD.0 => D#72ptD.0
  # DEBUG thisD.22772 => D#71ptD.0
  # DEBUG D#70ptD.0 => D#71ptD.0
  # DEBUG thisD.22760 => D#70ptD.0
  # DEBUG thisD.22752 => NULL
  # DEBUG D.22753 => NULL
  # DEBUG thisD.22750 => NULL
  # DEBUG D#42ptD.0 => &__map_allocD.23742
  # DEBUG D#43ptD.0 => D#73ptD.0
  # DEBUG __pD.23745 => D#148ptD.0
  # DEBUG __aD.23743 => D#42ptD.0
  # DEBUG __nD.23744 => D#43ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG __pD.23748 => D#148ptD.0
  # DEBUG thisD.23746 => D#38ptD.0
  # DEBUG D.23747 => D#39ptD.0
  # .MEM_17 = VDEF <.MEM_23>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (prephitmp_19);
  # DEBUG thisD.22786 => &__map_allocD.23742
  # DEBUG thisD.22765 => &__map_allocD.23742
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 8, next block 1, flags: (NEW, REACHABLE)
;;    pred:       2 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_15 = PHI <.MEM_2(D)(2), .MEM_17(8)>
  # DEBUG D#77ptD.0 => &D#147ptD.0->_M_implD.19670
  # DEBUG thisD.23723 => D#77ptD.0
  # DEBUG thisD.23724 => D#77ptD.0
  # DEBUG thisD.23725 => D#77ptD.0
  # .MEM_4 = VDEF <.MEM_15>
  MEM[(struct  &)this_1(D)] ={v} {CLOBBER};
  # VUSE <.MEM_4>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = int; _KeyOfValue = std::_Identity<int>; _Compare = std::less<int>; _Alloc = std::allocator<int>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<int>*] (_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE, funcdef_no=1118, decl_uid=18787, cgraph_uid=247, symbol_order=249)


Pass statistics:
----------------

void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = int; _KeyOfValue = std::_Identity<int>; _Compare = std::less<int>; _Alloc = std::allocator<int>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<int>*] (struct _Rb_treeD.18415 * const thisD.18788, struct _Rb_tree_nodeD.18419 * __xD.18789)
{
  struct _Rb_tree_nodeD.18419 * __xD.23998;
  struct _Rb_tree_nodeD.18419 * __xD.23985;
  struct _Rb_tree_nodeD.18419 * __xD.23972;
  struct _Rb_tree_nodeD.18419 * __xD.23959;
  struct _Rb_tree_nodeD.18419 * __xD.23946;
  struct _Rb_tree_nodeD.18419 * __xD.23933;
  struct _Rb_tree_nodeD.18419 * __xD.23920;
  struct _Rb_tree_nodeD.18419 * __xD.23907;
  struct _Rb_tree_node_baseD.14415 * _39;

;;   basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __xD.18789 => __x_3(D)
  if (__x_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_38 = PHI <.MEM_4(D)(2), .MEM_10(6)>
  # VUSE <.MEM_38>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_68 = PHI <__x_3(D)(4), __x_9(38)>
  # .MEM_69 = PHI <.MEM_4(D)(4), .MEM_10(38)>
  # DEBUG __xD.18789 => __x_68
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  __x_8 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_68 + 24B];
  # DEBUG D#9ptD.0 => __x_68
  # DEBUG __xD.22923 => D#9ptD.0
  # DEBUG thisD.23906 => this_6(D)
  # DEBUG __xD.23907 => __x_8
  # DEBUG __xD.23907 => __x_8
  if (__x_8 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_34 = PHI <.MEM_69(5), .MEM_50(9)>
  # VUSE <.MEM_34>
  # PT = nonlocal escaped 
  __x_9 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_68 + 16B];
  # DEBUG D#10ptD.0 => __x_68
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.20473 => NULL
  # DEBUG D#100ptD.0 => this_6(D)
  # DEBUG __pD.22909 => __x_68
  # DEBUG thisD.22910 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_68
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.22912 => __x_68
  # DEBUG thisD.22911 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.22915 => __x_68
  # DEBUG __aD.22913 => D#50ptD.0
  # DEBUG __nD.22914 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.22918 => __x_68
  # DEBUG thisD.22916 => D#46ptD.0
  # DEBUG D.22917 => D#47ptD.0
  # .MEM_10 = VDEF <.MEM_34>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_68);
  # DEBUG __xD.18789 => __x_9
  # DEBUG __xD.18789 => __x_9
  if (__x_9 == 0B)
    goto <bb 3>;
  else
    goto <bb 38>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_72 = PHI <__x_8(7), __x_13(37)>
  # .MEM_93 = PHI <.MEM_69(7), .MEM_50(37)>
  # DEBUG __xD.23907 => __x_72
  # VUSE <.MEM_93>
  # PT = nonlocal escaped 
  __x_12 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_72 + 24B];
  # DEBUG D#9ptD.0 => __x_72
  # DEBUG __xD.22923 => D#9ptD.0
  # DEBUG thisD.23919 => this_6(D)
  # DEBUG __xD.23920 => __x_12
  # DEBUG __xD.23920 => __x_12
  if (__x_12 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_30 = PHI <.MEM_93(8), .MEM_49(12)>
  # VUSE <.MEM_30>
  # PT = nonlocal escaped 
  __x_13 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_72 + 16B];
  # DEBUG D#10ptD.0 => __x_72
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.23908 => NULL
  # DEBUG D#100ptD.0 => this_6(D)
  # DEBUG __pD.23910 => __x_72
  # DEBUG thisD.23909 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_72
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.23912 => __x_72
  # DEBUG thisD.23911 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.23915 => __x_72
  # DEBUG __aD.23913 => D#50ptD.0
  # DEBUG __nD.23914 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.23918 => __x_72
  # DEBUG thisD.23916 => D#46ptD.0
  # DEBUG D.23917 => D#47ptD.0
  # .MEM_50 = VDEF <.MEM_30>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_72);
  # DEBUG __xD.23907 => __x_13
  # DEBUG __xD.23907 => __x_13
  if (__x_13 == 0B)
    goto <bb 6>;
  else
    goto <bb 37>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_71 = PHI <__x_12(10), __x_16(36)>
  # .MEM_90 = PHI <.MEM_93(10), .MEM_49(36)>
  # DEBUG __xD.23920 => __x_71
  # VUSE <.MEM_90>
  # PT = nonlocal escaped 
  __x_15 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_71 + 24B];
  # DEBUG D#9ptD.0 => __x_71
  # DEBUG __xD.22923 => D#9ptD.0
  # DEBUG thisD.23932 => this_6(D)
  # DEBUG __xD.23933 => __x_15
  # DEBUG __xD.23933 => __x_15
  if (__x_15 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_26 = PHI <.MEM_90(11), .MEM_48(15)>
  # VUSE <.MEM_26>
  # PT = nonlocal escaped 
  __x_16 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_71 + 16B];
  # DEBUG D#10ptD.0 => __x_71
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.23921 => NULL
  # DEBUG D#100ptD.0 => this_6(D)
  # DEBUG __pD.23923 => __x_71
  # DEBUG thisD.23922 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_71
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.23925 => __x_71
  # DEBUG thisD.23924 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.23928 => __x_71
  # DEBUG __aD.23926 => D#50ptD.0
  # DEBUG __nD.23927 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.23931 => __x_71
  # DEBUG thisD.23929 => D#46ptD.0
  # DEBUG D.23930 => D#47ptD.0
  # .MEM_49 = VDEF <.MEM_26>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_71);
  # DEBUG __xD.23920 => __x_16
  # DEBUG __xD.23920 => __x_16
  if (__x_16 == 0B)
    goto <bb 9>;
  else
    goto <bb 36>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_77 = PHI <__x_15(13), __x_20(35)>
  # .MEM_87 = PHI <.MEM_90(13), .MEM_48(35)>
  # DEBUG __xD.23933 => __x_77
  # VUSE <.MEM_87>
  # PT = nonlocal escaped 
  __x_19 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_77 + 24B];
  # DEBUG D#9ptD.0 => __x_77
  # DEBUG __xD.22923 => D#9ptD.0
  # DEBUG thisD.23945 => this_6(D)
  # DEBUG __xD.23946 => __x_19
  # DEBUG __xD.23946 => __x_19
  if (__x_19 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_25 = PHI <.MEM_87(14), .MEM_47(18)>
  # VUSE <.MEM_25>
  # PT = nonlocal escaped 
  __x_20 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_77 + 16B];
  # DEBUG D#10ptD.0 => __x_77
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.23934 => NULL
  # DEBUG D#100ptD.0 => this_6(D)
  # DEBUG __pD.23936 => __x_77
  # DEBUG thisD.23935 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_77
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.23938 => __x_77
  # DEBUG thisD.23937 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.23941 => __x_77
  # DEBUG __aD.23939 => D#50ptD.0
  # DEBUG __nD.23940 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.23944 => __x_77
  # DEBUG thisD.23942 => D#46ptD.0
  # DEBUG D.23943 => D#47ptD.0
  # .MEM_48 = VDEF <.MEM_25>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_77);
  # DEBUG __xD.23933 => __x_20
  # DEBUG __xD.23933 => __x_20
  if (__x_20 == 0B)
    goto <bb 12>;
  else
    goto <bb 35>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       14 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_80 = PHI <__x_19(16), __x_24(34)>
  # .MEM_84 = PHI <.MEM_87(16), .MEM_47(34)>
  # DEBUG __xD.23946 => __x_80
  # VUSE <.MEM_84>
  # PT = nonlocal escaped 
  __x_23 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_80 + 24B];
  # DEBUG D#9ptD.0 => __x_80
  # DEBUG __xD.22923 => D#9ptD.0
  # DEBUG thisD.23958 => this_6(D)
  # DEBUG __xD.23959 => __x_23
  # DEBUG __xD.23959 => __x_23
  if (__x_23 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_21 = PHI <.MEM_84(17), .MEM_46(21)>
  # VUSE <.MEM_21>
  # PT = nonlocal escaped 
  __x_24 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_80 + 16B];
  # DEBUG D#10ptD.0 => __x_80
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.23947 => NULL
  # DEBUG D#100ptD.0 => this_6(D)
  # DEBUG __pD.23949 => __x_80
  # DEBUG thisD.23948 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_80
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.23951 => __x_80
  # DEBUG thisD.23950 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.23954 => __x_80
  # DEBUG __aD.23952 => D#50ptD.0
  # DEBUG __nD.23953 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.23957 => __x_80
  # DEBUG thisD.23955 => D#46ptD.0
  # DEBUG D.23956 => D#47ptD.0
  # .MEM_47 = VDEF <.MEM_21>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_80);
  # DEBUG __xD.23946 => __x_24
  # DEBUG __xD.23946 => __x_24
  if (__x_24 == 0B)
    goto <bb 15>;
  else
    goto <bb 34>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_81 = PHI <.MEM_84(19), .MEM_46(33)>
  # PT = nonlocal escaped 
  # __x_83 = PHI <__x_23(19), __x_28(33)>
  # DEBUG __xD.23959 => __x_83
  # VUSE <.MEM_81>
  # PT = nonlocal escaped 
  __x_27 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_83 + 24B];
  # DEBUG D#9ptD.0 => __x_83
  # DEBUG __xD.22923 => D#9ptD.0
  # DEBUG thisD.23971 => this_6(D)
  # DEBUG __xD.23972 => __x_27
  # DEBUG __xD.23972 => __x_27
  if (__x_27 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_17 = PHI <.MEM_81(20), .MEM_45(24)>
  # VUSE <.MEM_17>
  # PT = nonlocal escaped 
  __x_28 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_83 + 16B];
  # DEBUG D#10ptD.0 => __x_83
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.23960 => NULL
  # DEBUG D#100ptD.0 => this_6(D)
  # DEBUG __pD.23962 => __x_83
  # DEBUG thisD.23961 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_83
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.23964 => __x_83
  # DEBUG thisD.23963 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.23967 => __x_83
  # DEBUG __aD.23965 => D#50ptD.0
  # DEBUG __nD.23966 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.23970 => __x_83
  # DEBUG thisD.23968 => D#46ptD.0
  # DEBUG D.23969 => D#47ptD.0
  # .MEM_46 = VDEF <.MEM_17>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_83);
  # DEBUG __xD.23959 => __x_28
  # DEBUG __xD.23959 => __x_28
  if (__x_28 == 0B)
    goto <bb 18>;
  else
    goto <bb 33>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       20 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_78 = PHI <.MEM_81(22), .MEM_45(32)>
  # PT = nonlocal escaped 
  # __x_86 = PHI <__x_27(22), __x_32(32)>
  # DEBUG __xD.23972 => __x_86
  # VUSE <.MEM_78>
  # PT = nonlocal escaped 
  __x_31 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_86 + 24B];
  # DEBUG D#9ptD.0 => __x_86
  # DEBUG __xD.22923 => D#9ptD.0
  # DEBUG thisD.23984 => this_6(D)
  # DEBUG __xD.23985 => __x_31
  # DEBUG __xD.23985 => __x_31
  if (__x_31 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_14 = PHI <.MEM_78(23), .MEM_44(27)>
  # VUSE <.MEM_14>
  # PT = nonlocal escaped 
  __x_32 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_86 + 16B];
  # DEBUG D#10ptD.0 => __x_86
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.23973 => NULL
  # DEBUG D#100ptD.0 => this_6(D)
  # DEBUG __pD.23975 => __x_86
  # DEBUG thisD.23974 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_86
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.23977 => __x_86
  # DEBUG thisD.23976 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.23980 => __x_86
  # DEBUG __aD.23978 => D#50ptD.0
  # DEBUG __nD.23979 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.23983 => __x_86
  # DEBUG thisD.23981 => D#46ptD.0
  # DEBUG D.23982 => D#47ptD.0
  # .MEM_45 = VDEF <.MEM_14>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_86);
  # DEBUG __xD.23972 => __x_32
  # DEBUG __xD.23972 => __x_32
  if (__x_32 == 0B)
    goto <bb 21>;
  else
    goto <bb 32>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_75 = PHI <.MEM_78(25), .MEM_44(31)>
  # PT = nonlocal escaped 
  # __x_89 = PHI <__x_31(25), __x_36(31)>
  # DEBUG __xD.23985 => __x_89
  # VUSE <.MEM_75>
  # PT = nonlocal escaped 
  __x_35 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_89 + 24B];
  # DEBUG D#9ptD.0 => __x_89
  # DEBUG __xD.22923 => D#9ptD.0
  # DEBUG thisD.23997 => this_6(D)
  # DEBUG __xD.23998 => __x_35
  # DEBUG __xD.23998 => __x_35
  if (__x_35 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_22 = PHI <.MEM_75(26), .MEM_43(29)>
  # VUSE <.MEM_22>
  # PT = nonlocal escaped 
  __x_36 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_89 + 16B];
  # DEBUG D#10ptD.0 => __x_89
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.23986 => NULL
  # DEBUG D#100ptD.0 => this_6(D)
  # DEBUG __pD.23988 => __x_89
  # DEBUG thisD.23987 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_89
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.23990 => __x_89
  # DEBUG thisD.23989 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.23993 => __x_89
  # DEBUG __aD.23991 => D#50ptD.0
  # DEBUG __nD.23992 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.23996 => __x_89
  # DEBUG thisD.23994 => D#46ptD.0
  # DEBUG D.23995 => D#47ptD.0
  # .MEM_44 = VDEF <.MEM_22>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_89);
  # DEBUG __xD.23985 => __x_36
  # DEBUG __xD.23985 => __x_36
  if (__x_36 == 0B)
    goto <bb 24>;
  else
    goto <bb 31>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 27, next block 29, flags: (NEW)
;;    pred:       26 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 9, count 0, freq 9100, maybe hot
;;    prev block 28, next block 30, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_73 = PHI <.MEM_75(28), .MEM_43(30)>
  # PT = nonlocal escaped 
  # __x_92 = PHI <__x_35(28), __x_40(30)>
  # DEBUG __xD.23998 => __x_92
  # VUSE <.MEM_73>
  # PT = nonlocal escaped 
  _39 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_92 + 24B];
  # DEBUG D#9ptD.0 => __x_92
  # DEBUG __xD.22923 => D#9ptD.0
  # .MEM_42 = VDEF <.MEM_73>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.18787 (this_6(D), _39);
  # VUSE <.MEM_42>
  # PT = nonlocal escaped 
  __x_40 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_92 + 16B];
  # DEBUG D#10ptD.0 => __x_92
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.23999 => NULL
  # DEBUG D#100ptD.0 => this_6(D)
  # DEBUG __pD.24001 => __x_92
  # DEBUG thisD.24000 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_92
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.24003 => __x_92
  # DEBUG thisD.24002 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.24006 => __x_92
  # DEBUG __aD.24004 => D#50ptD.0
  # DEBUG __nD.24005 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.24009 => __x_92
  # DEBUG thisD.24007 => D#46ptD.0
  # DEBUG D.24008 => D#47ptD.0
  # .MEM_43 = VDEF <.MEM_42>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_92);
  # DEBUG __xD.23998 => __x_40
  # DEBUG __xD.23998 => __x_40
  if (__x_40 == 0B)
    goto <bb 27>;
  else
    goto <bb 30>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 9, count 0, freq 8281, maybe hot
;;    prev block 29, next block 31, flags: (NEW)
;;    pred:       29 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 31, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       27 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 32, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       24 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 33, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 32, next block 34, flags: (NEW)
;;    pred:       21 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 34, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 33, next block 35, flags: (NEW)
;;    pred:       18 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 35, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 36, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 35, next block 37, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 37, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 36, next block 38, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 38, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 37, next block 1, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}



Updating SSA:
Registering new PHI nodes in block #5
Registering new PHI nodes in block #7
Registering new PHI nodes in block #8
Registering new PHI nodes in block #10
Registering new PHI nodes in block #11
Registering new PHI nodes in block #13
Registering new PHI nodes in block #14
Registering new PHI nodes in block #16
Registering new PHI nodes in block #17
Registering new PHI nodes in block #19
Registering new PHI nodes in block #20
Registering new PHI nodes in block #22
Registering new PHI nodes in block #23
Registering new PHI nodes in block #25
Registering new PHI nodes in block #26
Registering new PHI nodes in block #28
Registering new PHI nodes in block #29
Updating SSA information for statement operator delete (__x_92);
Registering new PHI nodes in block #30
Registering new PHI nodes in block #47
Registering new PHI nodes in block #27
Updating SSA information for statement operator delete (__x_89);
Registering new PHI nodes in block #31
Registering new PHI nodes in block #46
Registering new PHI nodes in block #24
Updating SSA information for statement operator delete (__x_86);
Registering new PHI nodes in block #32
Registering new PHI nodes in block #45
Registering new PHI nodes in block #21
Updating SSA information for statement operator delete (__x_83);
Registering new PHI nodes in block #33
Registering new PHI nodes in block #44
Registering new PHI nodes in block #18
Updating SSA information for statement operator delete (__x_80);
Registering new PHI nodes in block #34
Registering new PHI nodes in block #43
Registering new PHI nodes in block #15
Updating SSA information for statement operator delete (__x_77);
Registering new PHI nodes in block #35
Registering new PHI nodes in block #42
Registering new PHI nodes in block #12
Updating SSA information for statement operator delete (__x_71);
Registering new PHI nodes in block #36
Registering new PHI nodes in block #41
Registering new PHI nodes in block #9
Updating SSA information for statement operator delete (__x_72);
Registering new PHI nodes in block #37
Registering new PHI nodes in block #40
Registering new PHI nodes in block #6
Updating SSA information for statement operator delete (__x_68);
Registering new PHI nodes in block #38
Registering new PHI nodes in block #39

DFA Statistics for void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = int; _KeyOfValue = std::_Identity<int>; _Compare = std::less<int>; _Alloc = std::allocator<int>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<int>*]

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                            171       1368b
DEF operands                             18        144b
VUSE operands                            29        232b
VDEF operands                            10         80b
PHI nodes                                36       3744b
PHI arguments                            63       3024b
---------------------------------------------------------
Total memory used by DFA/SSA data                 8592b
---------------------------------------------------------

Average number of arguments per PHI node: 1.8 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_70 -> { .MEM_10 }
.MEM_74 -> { .MEM_43 }
.MEM_76 -> { .MEM_44 }
.MEM_79 -> { .MEM_45 }
.MEM_82 -> { .MEM_46 }
.MEM_85 -> { .MEM_47 }
.MEM_88 -> { .MEM_48 }
.MEM_91 -> { .MEM_49 }
.MEM_94 -> { .MEM_50 }
Incremental SSA update started at block: 5
Number of blocks in CFG: 48
Number of blocks to update: 35 ( 73%)
Affected blocks: 5 6 8 9 11 12 14 15 17 18 20 21 23 24 26 27 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47


Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:49, LOOPS:9, CONDITIONS:18, STMTS:531)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG __x => __x_3(D)
    if (__x_3(D) == 0B)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 bb_39 }, succs = {bb_48 })
  {
    <bb 3>:
    # .MEM_38 = PHI <.MEM_4(D)(2), .MEM_70(39)>

  }
  bb_48 (preds = {bb_3 }, succs = {bb_1 })
  {
    <bb 48>:
    # VUSE <.MEM_38>
    return;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 })
  {
    <bb 4>:

  }
  bb_39 (preds = {bb_6 }, succs = {bb_3 })
  {
    <bb 39>:
    # .MEM_70 = PHI <.MEM_10(6)>
    goto <bb 3>;

  }
  loop_1 (header = 5, latch = 38, niter = )
  {
    bb_5 (preds = {bb_4 bb_38 }, succs = {bb_6 bb_7 })
    {
      <bb 5>:
      # __x_68 = PHI <__x_3(D)(4), __x_9(38)>
      # .MEM_69 = PHI <.MEM_4(D)(4), .MEM_10(38)>
      # DEBUG __x => __x_68
      # VUSE <.MEM_69>
      __x_8 = MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B];
      # DEBUG D#9 => __x_68
      # DEBUG __x => D#9
      # DEBUG this => this_6(D)
      # DEBUG __x => __x_8
      # DEBUG __x => __x_8
      if (__x_8 == 0B)
        goto <bb 6>;
      else
        goto <bb 7>;

    }
    bb_6 (preds = {bb_5 bb_40 }, succs = {bb_39 bb_38 })
    {
      <bb 6>:
      # .MEM_34 = PHI <.MEM_69(5), .MEM_94(40)>
      # VUSE <.MEM_34>
      __x_9 = MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B];
      # DEBUG D#10 => __x_68
      # DEBUG __x => D#10
      # DEBUG __y => NULL
      # DEBUG D#100 => this_6(D)
      # DEBUG __p => __x_68
      # DEBUG this => D#100
      # DEBUG D#99 => D#100
      # DEBUG D#98 => D#100
      # DEBUG D#96 => D#98
      # DEBUG D#97 => __x_68
      # DEBUG this => D#96
      # DEBUG __p => D#97
      # DEBUG D#95 => D#96
      # DEBUG D#94 => D#97
      # DEBUG D#93 => D#97
      # DEBUG this => D#93
      # DEBUG D#92 => &D#94->_M_value_field
      # DEBUG __r => D#92
      # DEBUG D#91 => D#95
      # DEBUG this => D#91
      # DEBUG D#90 => D#91
      # DEBUG this => D#90
      # DEBUG this => NULL
      # DEBUG D.22855 => NULL
      # DEBUG this => NULL
      # DEBUG D#35 => D#92
      # DEBUG this => D#34
      # DEBUG __p => D#35
      # DEBUG this => NULL
      # DEBUG this => NULL
      # DEBUG D#53 => D#99
      # DEBUG __p => __x_68
      # DEBUG this => D#53
      # DEBUG D#52 => D#53
      # DEBUG this => D#52
      # DEBUG D#51 => 1
      # DEBUG __p => __x_68
      # DEBUG __a => D#50
      # DEBUG __n => D#51
      # DEBUG D#49 => D#51
      # DEBUG D#48 => D#50
      # DEBUG D#46 => D#48
      # DEBUG D#47 => D#49
      # DEBUG __p => __x_68
      # DEBUG this => D#46
      # DEBUG D.22917 => D#47
      # .MEM_10 = VDEF <.MEM_34>
      operator delete (__x_68);
      # DEBUG __x => __x_9
      # DEBUG __x => __x_9
      if (__x_9 == 0B)
        goto <bb 39>;
      else
        goto <bb 38>;

    }
    bb_7 (preds = {bb_5 }, succs = {bb_8 })
    {
      <bb 7>:

    }
    bb_40 (preds = {bb_9 }, succs = {bb_6 })
    {
      <bb 40>:
      # .MEM_94 = PHI <.MEM_50(9)>
      goto <bb 6>;

    }
    bb_38 (preds = {bb_6 }, succs = {bb_5 })
    {
      <bb 38>:
      goto <bb 5>;

    }
    loop_2 (header = 8, latch = 37, niter = )
    {
      bb_8 (preds = {bb_7 bb_37 }, succs = {bb_9 bb_10 })
      {
        <bb 8>:
        # __x_72 = PHI <__x_8(7), __x_13(37)>
        # .MEM_93 = PHI <.MEM_69(7), .MEM_50(37)>
        # DEBUG __x => __x_72
        # VUSE <.MEM_93>
        __x_12 = MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B];
        # DEBUG D#9 => __x_72
        # DEBUG __x => D#9
        # DEBUG this => this_6(D)
        # DEBUG __x => __x_12
        # DEBUG __x => __x_12
        if (__x_12 == 0B)
          goto <bb 9>;
        else
          goto <bb 10>;

      }
      bb_9 (preds = {bb_8 bb_41 }, succs = {bb_40 bb_37 })
      {
        <bb 9>:
        # .MEM_30 = PHI <.MEM_93(8), .MEM_91(41)>
        # VUSE <.MEM_30>
        __x_13 = MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B];
        # DEBUG D#10 => __x_72
        # DEBUG __x => D#10
        # DEBUG __y => NULL
        # DEBUG D#100 => this_6(D)
        # DEBUG __p => __x_72
        # DEBUG this => D#100
        # DEBUG D#99 => D#100
        # DEBUG D#98 => D#100
        # DEBUG D#96 => D#98
        # DEBUG D#97 => __x_72
        # DEBUG this => D#96
        # DEBUG __p => D#97
        # DEBUG D#95 => D#96
        # DEBUG D#94 => D#97
        # DEBUG D#93 => D#97
        # DEBUG this => D#93
        # DEBUG D#92 => &D#94->_M_value_field
        # DEBUG __r => D#92
        # DEBUG D#91 => D#95
        # DEBUG this => D#91
        # DEBUG D#90 => D#91
        # DEBUG this => D#90
        # DEBUG this => NULL
        # DEBUG D.22855 => NULL
        # DEBUG this => NULL
        # DEBUG D#35 => D#92
        # DEBUG this => D#34
        # DEBUG __p => D#35
        # DEBUG this => NULL
        # DEBUG this => NULL
        # DEBUG D#53 => D#99
        # DEBUG __p => __x_72
        # DEBUG this => D#53
        # DEBUG D#52 => D#53
        # DEBUG this => D#52
        # DEBUG D#51 => 1
        # DEBUG __p => __x_72
        # DEBUG __a => D#50
        # DEBUG __n => D#51
        # DEBUG D#49 => D#51
        # DEBUG D#48 => D#50
        # DEBUG D#46 => D#48
        # DEBUG D#47 => D#49
        # DEBUG __p => __x_72
        # DEBUG this => D#46
        # DEBUG D.23917 => D#47
        # .MEM_50 = VDEF <.MEM_30>
        operator delete (__x_72);
        # DEBUG __x => __x_13
        # DEBUG __x => __x_13
        if (__x_13 == 0B)
          goto <bb 40>;
        else
          goto <bb 37>;

      }
      bb_10 (preds = {bb_8 }, succs = {bb_11 })
      {
        <bb 10>:

      }
      bb_41 (preds = {bb_12 }, succs = {bb_9 })
      {
        <bb 41>:
        # .MEM_91 = PHI <.MEM_49(12)>
        goto <bb 9>;

      }
      bb_37 (preds = {bb_9 }, succs = {bb_8 })
      {
        <bb 37>:
        goto <bb 8>;

      }
      loop_3 (header = 11, latch = 36, niter = )
      {
        bb_11 (preds = {bb_10 bb_36 }, succs = {bb_12 bb_13 })
        {
          <bb 11>:
          # __x_71 = PHI <__x_12(10), __x_16(36)>
          # .MEM_90 = PHI <.MEM_93(10), .MEM_49(36)>
          # DEBUG __x => __x_71
          # VUSE <.MEM_90>
          __x_15 = MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B];
          # DEBUG D#9 => __x_71
          # DEBUG __x => D#9
          # DEBUG this => this_6(D)
          # DEBUG __x => __x_15
          # DEBUG __x => __x_15
          if (__x_15 == 0B)
            goto <bb 12>;
          else
            goto <bb 13>;

        }
        bb_12 (preds = {bb_11 bb_42 }, succs = {bb_41 bb_36 })
        {
          <bb 12>:
          # .MEM_26 = PHI <.MEM_90(11), .MEM_88(42)>
          # VUSE <.MEM_26>
          __x_16 = MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B];
          # DEBUG D#10 => __x_71
          # DEBUG __x => D#10
          # DEBUG __y => NULL
          # DEBUG D#100 => this_6(D)
          # DEBUG __p => __x_71
          # DEBUG this => D#100
          # DEBUG D#99 => D#100
          # DEBUG D#98 => D#100
          # DEBUG D#96 => D#98
          # DEBUG D#97 => __x_71
          # DEBUG this => D#96
          # DEBUG __p => D#97
          # DEBUG D#95 => D#96
          # DEBUG D#94 => D#97
          # DEBUG D#93 => D#97
          # DEBUG this => D#93
          # DEBUG D#92 => &D#94->_M_value_field
          # DEBUG __r => D#92
          # DEBUG D#91 => D#95
          # DEBUG this => D#91
          # DEBUG D#90 => D#91
          # DEBUG this => D#90
          # DEBUG this => NULL
          # DEBUG D.22855 => NULL
          # DEBUG this => NULL
          # DEBUG D#35 => D#92
          # DEBUG this => D#34
          # DEBUG __p => D#35
          # DEBUG this => NULL
          # DEBUG this => NULL
          # DEBUG D#53 => D#99
          # DEBUG __p => __x_71
          # DEBUG this => D#53
          # DEBUG D#52 => D#53
          # DEBUG this => D#52
          # DEBUG D#51 => 1
          # DEBUG __p => __x_71
          # DEBUG __a => D#50
          # DEBUG __n => D#51
          # DEBUG D#49 => D#51
          # DEBUG D#48 => D#50
          # DEBUG D#46 => D#48
          # DEBUG D#47 => D#49
          # DEBUG __p => __x_71
          # DEBUG this => D#46
          # DEBUG D.23930 => D#47
          # .MEM_49 = VDEF <.MEM_26>
          operator delete (__x_71);
          # DEBUG __x => __x_16
          # DEBUG __x => __x_16
          if (__x_16 == 0B)
            goto <bb 41>;
          else
            goto <bb 36>;

        }
        bb_13 (preds = {bb_11 }, succs = {bb_14 })
        {
          <bb 13>:

        }
        bb_42 (preds = {bb_15 }, succs = {bb_12 })
        {
          <bb 42>:
          # .MEM_88 = PHI <.MEM_48(15)>
          goto <bb 12>;

        }
        bb_36 (preds = {bb_12 }, succs = {bb_11 })
        {
          <bb 36>:
          goto <bb 11>;

        }
        loop_4 (header = 14, latch = 35, niter = )
        {
          bb_14 (preds = {bb_13 bb_35 }, succs = {bb_15 bb_16 })
          {
            <bb 14>:
            # __x_77 = PHI <__x_15(13), __x_20(35)>
            # .MEM_87 = PHI <.MEM_90(13), .MEM_48(35)>
            # DEBUG __x => __x_77
            # VUSE <.MEM_87>
            __x_19 = MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B];
            # DEBUG D#9 => __x_77
            # DEBUG __x => D#9
            # DEBUG this => this_6(D)
            # DEBUG __x => __x_19
            # DEBUG __x => __x_19
            if (__x_19 == 0B)
              goto <bb 15>;
            else
              goto <bb 16>;

          }
          bb_15 (preds = {bb_14 bb_43 }, succs = {bb_42 bb_35 })
          {
            <bb 15>:
            # .MEM_25 = PHI <.MEM_87(14), .MEM_85(43)>
            # VUSE <.MEM_25>
            __x_20 = MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B];
            # DEBUG D#10 => __x_77
            # DEBUG __x => D#10
            # DEBUG __y => NULL
            # DEBUG D#100 => this_6(D)
            # DEBUG __p => __x_77
            # DEBUG this => D#100
            # DEBUG D#99 => D#100
            # DEBUG D#98 => D#100
            # DEBUG D#96 => D#98
            # DEBUG D#97 => __x_77
            # DEBUG this => D#96
            # DEBUG __p => D#97
            # DEBUG D#95 => D#96
            # DEBUG D#94 => D#97
            # DEBUG D#93 => D#97
            # DEBUG this => D#93
            # DEBUG D#92 => &D#94->_M_value_field
            # DEBUG __r => D#92
            # DEBUG D#91 => D#95
            # DEBUG this => D#91
            # DEBUG D#90 => D#91
            # DEBUG this => D#90
            # DEBUG this => NULL
            # DEBUG D.22855 => NULL
            # DEBUG this => NULL
            # DEBUG D#35 => D#92
            # DEBUG this => D#34
            # DEBUG __p => D#35
            # DEBUG this => NULL
            # DEBUG this => NULL
            # DEBUG D#53 => D#99
            # DEBUG __p => __x_77
            # DEBUG this => D#53
            # DEBUG D#52 => D#53
            # DEBUG this => D#52
            # DEBUG D#51 => 1
            # DEBUG __p => __x_77
            # DEBUG __a => D#50
            # DEBUG __n => D#51
            # DEBUG D#49 => D#51
            # DEBUG D#48 => D#50
            # DEBUG D#46 => D#48
            # DEBUG D#47 => D#49
            # DEBUG __p => __x_77
            # DEBUG this => D#46
            # DEBUG D.23943 => D#47
            # .MEM_48 = VDEF <.MEM_25>
            operator delete (__x_77);
            # DEBUG __x => __x_20
            # DEBUG __x => __x_20
            if (__x_20 == 0B)
              goto <bb 42>;
            else
              goto <bb 35>;

          }
          bb_16 (preds = {bb_14 }, succs = {bb_17 })
          {
            <bb 16>:

          }
          bb_43 (preds = {bb_18 }, succs = {bb_15 })
          {
            <bb 43>:
            # .MEM_85 = PHI <.MEM_47(18)>
            goto <bb 15>;

          }
          bb_35 (preds = {bb_15 }, succs = {bb_14 })
          {
            <bb 35>:
            goto <bb 14>;

          }
          loop_5 (header = 17, latch = 34, niter = )
          {
            bb_17 (preds = {bb_16 bb_34 }, succs = {bb_18 bb_19 })
            {
              <bb 17>:
              # __x_80 = PHI <__x_19(16), __x_24(34)>
              # .MEM_84 = PHI <.MEM_87(16), .MEM_47(34)>
              # DEBUG __x => __x_80
              # VUSE <.MEM_84>
              __x_23 = MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B];
              # DEBUG D#9 => __x_80
              # DEBUG __x => D#9
              # DEBUG this => this_6(D)
              # DEBUG __x => __x_23
              # DEBUG __x => __x_23
              if (__x_23 == 0B)
                goto <bb 18>;
              else
                goto <bb 19>;

            }
            bb_18 (preds = {bb_17 bb_44 }, succs = {bb_43 bb_34 })
            {
              <bb 18>:
              # .MEM_21 = PHI <.MEM_84(17), .MEM_82(44)>
              # VUSE <.MEM_21>
              __x_24 = MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B];
              # DEBUG D#10 => __x_80
              # DEBUG __x => D#10
              # DEBUG __y => NULL
              # DEBUG D#100 => this_6(D)
              # DEBUG __p => __x_80
              # DEBUG this => D#100
              # DEBUG D#99 => D#100
              # DEBUG D#98 => D#100
              # DEBUG D#96 => D#98
              # DEBUG D#97 => __x_80
              # DEBUG this => D#96
              # DEBUG __p => D#97
              # DEBUG D#95 => D#96
              # DEBUG D#94 => D#97
              # DEBUG D#93 => D#97
              # DEBUG this => D#93
              # DEBUG D#92 => &D#94->_M_value_field
              # DEBUG __r => D#92
              # DEBUG D#91 => D#95
              # DEBUG this => D#91
              # DEBUG D#90 => D#91
              # DEBUG this => D#90
              # DEBUG this => NULL
              # DEBUG D.22855 => NULL
              # DEBUG this => NULL
              # DEBUG D#35 => D#92
              # DEBUG this => D#34
              # DEBUG __p => D#35
              # DEBUG this => NULL
              # DEBUG this => NULL
              # DEBUG D#53 => D#99
              # DEBUG __p => __x_80
              # DEBUG this => D#53
              # DEBUG D#52 => D#53
              # DEBUG this => D#52
              # DEBUG D#51 => 1
              # DEBUG __p => __x_80
              # DEBUG __a => D#50
              # DEBUG __n => D#51
              # DEBUG D#49 => D#51
              # DEBUG D#48 => D#50
              # DEBUG D#46 => D#48
              # DEBUG D#47 => D#49
              # DEBUG __p => __x_80
              # DEBUG this => D#46
              # DEBUG D.23956 => D#47
              # .MEM_47 = VDEF <.MEM_21>
              operator delete (__x_80);
              # DEBUG __x => __x_24
              # DEBUG __x => __x_24
              if (__x_24 == 0B)
                goto <bb 43>;
              else
                goto <bb 34>;

            }
            bb_19 (preds = {bb_17 }, succs = {bb_20 })
            {
              <bb 19>:

            }
            bb_44 (preds = {bb_21 }, succs = {bb_18 })
            {
              <bb 44>:
              # .MEM_82 = PHI <.MEM_46(21)>
              goto <bb 18>;

            }
            bb_34 (preds = {bb_18 }, succs = {bb_17 })
            {
              <bb 34>:
              goto <bb 17>;

            }
            loop_6 (header = 20, latch = 33, niter = )
            {
              bb_20 (preds = {bb_19 bb_33 }, succs = {bb_21 bb_22 })
              {
                <bb 20>:
                # .MEM_81 = PHI <.MEM_84(19), .MEM_46(33)>
                # __x_83 = PHI <__x_23(19), __x_28(33)>
                # DEBUG __x => __x_83
                # VUSE <.MEM_81>
                __x_27 = MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B];
                # DEBUG D#9 => __x_83
                # DEBUG __x => D#9
                # DEBUG this => this_6(D)
                # DEBUG __x => __x_27
                # DEBUG __x => __x_27
                if (__x_27 == 0B)
                  goto <bb 21>;
                else
                  goto <bb 22>;

              }
              bb_21 (preds = {bb_20 bb_45 }, succs = {bb_44 bb_33 })
              {
                <bb 21>:
                # .MEM_17 = PHI <.MEM_81(20), .MEM_79(45)>
                # VUSE <.MEM_17>
                __x_28 = MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B];
                # DEBUG D#10 => __x_83
                # DEBUG __x => D#10
                # DEBUG __y => NULL
                # DEBUG D#100 => this_6(D)
                # DEBUG __p => __x_83
                # DEBUG this => D#100
                # DEBUG D#99 => D#100
                # DEBUG D#98 => D#100
                # DEBUG D#96 => D#98
                # DEBUG D#97 => __x_83
                # DEBUG this => D#96
                # DEBUG __p => D#97
                # DEBUG D#95 => D#96
                # DEBUG D#94 => D#97
                # DEBUG D#93 => D#97
                # DEBUG this => D#93
                # DEBUG D#92 => &D#94->_M_value_field
                # DEBUG __r => D#92
                # DEBUG D#91 => D#95
                # DEBUG this => D#91
                # DEBUG D#90 => D#91
                # DEBUG this => D#90
                # DEBUG this => NULL
                # DEBUG D.22855 => NULL
                # DEBUG this => NULL
                # DEBUG D#35 => D#92
                # DEBUG this => D#34
                # DEBUG __p => D#35
                # DEBUG this => NULL
                # DEBUG this => NULL
                # DEBUG D#53 => D#99
                # DEBUG __p => __x_83
                # DEBUG this => D#53
                # DEBUG D#52 => D#53
                # DEBUG this => D#52
                # DEBUG D#51 => 1
                # DEBUG __p => __x_83
                # DEBUG __a => D#50
                # DEBUG __n => D#51
                # DEBUG D#49 => D#51
                # DEBUG D#48 => D#50
                # DEBUG D#46 => D#48
                # DEBUG D#47 => D#49
                # DEBUG __p => __x_83
                # DEBUG this => D#46
                # DEBUG D.23969 => D#47
                # .MEM_46 = VDEF <.MEM_17>
                operator delete (__x_83);
                # DEBUG __x => __x_28
                # DEBUG __x => __x_28
                if (__x_28 == 0B)
                  goto <bb 44>;
                else
                  goto <bb 33>;

              }
              bb_22 (preds = {bb_20 }, succs = {bb_23 })
              {
                <bb 22>:

              }
              bb_45 (preds = {bb_24 }, succs = {bb_21 })
              {
                <bb 45>:
                # .MEM_79 = PHI <.MEM_45(24)>
                goto <bb 21>;

              }
              bb_33 (preds = {bb_21 }, succs = {bb_20 })
              {
                <bb 33>:
                goto <bb 20>;

              }
              loop_7 (header = 23, latch = 32, niter = )
              {
                bb_23 (preds = {bb_22 bb_32 }, succs = {bb_24 bb_25 })
                {
                  <bb 23>:
                  # .MEM_78 = PHI <.MEM_81(22), .MEM_45(32)>
                  # __x_86 = PHI <__x_27(22), __x_32(32)>
                  # DEBUG __x => __x_86
                  # VUSE <.MEM_78>
                  __x_31 = MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B];
                  # DEBUG D#9 => __x_86
                  # DEBUG __x => D#9
                  # DEBUG this => this_6(D)
                  # DEBUG __x => __x_31
                  # DEBUG __x => __x_31
                  if (__x_31 == 0B)
                    goto <bb 24>;
                  else
                    goto <bb 25>;

                }
                bb_24 (preds = {bb_23 bb_46 }, succs = {bb_45 bb_32 })
                {
                  <bb 24>:
                  # .MEM_14 = PHI <.MEM_78(23), .MEM_76(46)>
                  # VUSE <.MEM_14>
                  __x_32 = MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B];
                  # DEBUG D#10 => __x_86
                  # DEBUG __x => D#10
                  # DEBUG __y => NULL
                  # DEBUG D#100 => this_6(D)
                  # DEBUG __p => __x_86
                  # DEBUG this => D#100
                  # DEBUG D#99 => D#100
                  # DEBUG D#98 => D#100
                  # DEBUG D#96 => D#98
                  # DEBUG D#97 => __x_86
                  # DEBUG this => D#96
                  # DEBUG __p => D#97
                  # DEBUG D#95 => D#96
                  # DEBUG D#94 => D#97
                  # DEBUG D#93 => D#97
                  # DEBUG this => D#93
                  # DEBUG D#92 => &D#94->_M_value_field
                  # DEBUG __r => D#92
                  # DEBUG D#91 => D#95
                  # DEBUG this => D#91
                  # DEBUG D#90 => D#91
                  # DEBUG this => D#90
                  # DEBUG this => NULL
                  # DEBUG D.22855 => NULL
                  # DEBUG this => NULL
                  # DEBUG D#35 => D#92
                  # DEBUG this => D#34
                  # DEBUG __p => D#35
                  # DEBUG this => NULL
                  # DEBUG this => NULL
                  # DEBUG D#53 => D#99
                  # DEBUG __p => __x_86
                  # DEBUG this => D#53
                  # DEBUG D#52 => D#53
                  # DEBUG this => D#52
                  # DEBUG D#51 => 1
                  # DEBUG __p => __x_86
                  # DEBUG __a => D#50
                  # DEBUG __n => D#51
                  # DEBUG D#49 => D#51
                  # DEBUG D#48 => D#50
                  # DEBUG D#46 => D#48
                  # DEBUG D#47 => D#49
                  # DEBUG __p => __x_86
                  # DEBUG this => D#46
                  # DEBUG D.23982 => D#47
                  # .MEM_45 = VDEF <.MEM_14>
                  operator delete (__x_86);
                  # DEBUG __x => __x_32
                  # DEBUG __x => __x_32
                  if (__x_32 == 0B)
                    goto <bb 45>;
                  else
                    goto <bb 32>;

                }
                bb_25 (preds = {bb_23 }, succs = {bb_26 })
                {
                  <bb 25>:

                }
                bb_46 (preds = {bb_27 }, succs = {bb_24 })
                {
                  <bb 46>:
                  # .MEM_76 = PHI <.MEM_44(27)>
                  goto <bb 24>;

                }
                bb_32 (preds = {bb_24 }, succs = {bb_23 })
                {
                  <bb 32>:
                  goto <bb 23>;

                }
                loop_8 (header = 26, latch = 31, niter = )
                {
                  bb_26 (preds = {bb_25 bb_31 }, succs = {bb_27 bb_28 })
                  {
                    <bb 26>:
                    # .MEM_75 = PHI <.MEM_78(25), .MEM_44(31)>
                    # __x_89 = PHI <__x_31(25), __x_36(31)>
                    # DEBUG __x => __x_89
                    # VUSE <.MEM_75>
                    __x_35 = MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B];
                    # DEBUG D#9 => __x_89
                    # DEBUG __x => D#9
                    # DEBUG this => this_6(D)
                    # DEBUG __x => __x_35
                    # DEBUG __x => __x_35
                    if (__x_35 == 0B)
                      goto <bb 27>;
                    else
                      goto <bb 28>;

                  }
                  bb_27 (preds = {bb_26 bb_47 }, succs = {bb_46 bb_31 })
                  {
                    <bb 27>:
                    # .MEM_22 = PHI <.MEM_75(26), .MEM_74(47)>
                    # VUSE <.MEM_22>
                    __x_36 = MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B];
                    # DEBUG D#10 => __x_89
                    # DEBUG __x => D#10
                    # DEBUG __y => NULL
                    # DEBUG D#100 => this_6(D)
                    # DEBUG __p => __x_89
                    # DEBUG this => D#100
                    # DEBUG D#99 => D#100
                    # DEBUG D#98 => D#100
                    # DEBUG D#96 => D#98
                    # DEBUG D#97 => __x_89
                    # DEBUG this => D#96
                    # DEBUG __p => D#97
                    # DEBUG D#95 => D#96
                    # DEBUG D#94 => D#97
                    # DEBUG D#93 => D#97
                    # DEBUG this => D#93
                    # DEBUG D#92 => &D#94->_M_value_field
                    # DEBUG __r => D#92
                    # DEBUG D#91 => D#95
                    # DEBUG this => D#91
                    # DEBUG D#90 => D#91
                    # DEBUG this => D#90
                    # DEBUG this => NULL
                    # DEBUG D.22855 => NULL
                    # DEBUG this => NULL
                    # DEBUG D#35 => D#92
                    # DEBUG this => D#34
                    # DEBUG __p => D#35
                    # DEBUG this => NULL
                    # DEBUG this => NULL
                    # DEBUG D#53 => D#99
                    # DEBUG __p => __x_89
                    # DEBUG this => D#53
                    # DEBUG D#52 => D#53
                    # DEBUG this => D#52
                    # DEBUG D#51 => 1
                    # DEBUG __p => __x_89
                    # DEBUG __a => D#50
                    # DEBUG __n => D#51
                    # DEBUG D#49 => D#51
                    # DEBUG D#48 => D#50
                    # DEBUG D#46 => D#48
                    # DEBUG D#47 => D#49
                    # DEBUG __p => __x_89
                    # DEBUG this => D#46
                    # DEBUG D.23995 => D#47
                    # .MEM_44 = VDEF <.MEM_22>
                    operator delete (__x_89);
                    # DEBUG __x => __x_36
                    # DEBUG __x => __x_36
                    if (__x_36 == 0B)
                      goto <bb 46>;
                    else
                      goto <bb 31>;

                  }
                  bb_28 (preds = {bb_26 }, succs = {bb_29 })
                  {
                    <bb 28>:

                  }
                  bb_47 (preds = {bb_29 }, succs = {bb_27 })
                  {
                    <bb 47>:
                    # .MEM_74 = PHI <.MEM_43(29)>
                    goto <bb 27>;

                  }
                  bb_31 (preds = {bb_27 }, succs = {bb_26 })
                  {
                    <bb 31>:
                    goto <bb 26>;

                  }
                  loop_9 (header = 29, latch = 30, niter = )
                  {
                    bb_29 (preds = {bb_28 bb_30 }, succs = {bb_47 bb_30 })
                    {
                      <bb 29>:
                      # .MEM_73 = PHI <.MEM_75(28), .MEM_43(30)>
                      # __x_92 = PHI <__x_35(28), __x_40(30)>
                      # DEBUG __x => __x_92
                      # VUSE <.MEM_73>
                      _39 = MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B];
                      # DEBUG D#9 => __x_92
                      # DEBUG __x => D#9
                      # .MEM_42 = VDEF <.MEM_73>
                      std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase (this_6(D), _39);
                      # VUSE <.MEM_42>
                      __x_40 = MEM[(struct _Rb_tree_node_base * *)__x_92 + 16B];
                      # DEBUG D#10 => __x_92
                      # DEBUG __x => D#10
                      # DEBUG __y => NULL
                      # DEBUG D#100 => this_6(D)
                      # DEBUG __p => __x_92
                      # DEBUG this => D#100
                      # DEBUG D#99 => D#100
                      # DEBUG D#98 => D#100
                      # DEBUG D#96 => D#98
                      # DEBUG D#97 => __x_92
                      # DEBUG this => D#96
                      # DEBUG __p => D#97
                      # DEBUG D#95 => D#96
                      # DEBUG D#94 => D#97
                      # DEBUG D#93 => D#97
                      # DEBUG this => D#93
                      # DEBUG D#92 => &D#94->_M_value_field
                      # DEBUG __r => D#92
                      # DEBUG D#91 => D#95
                      # DEBUG this => D#91
                      # DEBUG D#90 => D#91
                      # DEBUG this => D#90
                      # DEBUG this => NULL
                      # DEBUG D.22855 => NULL
                      # DEBUG this => NULL
                      # DEBUG D#35 => D#92
                      # DEBUG this => D#34
                      # DEBUG __p => D#35
                      # DEBUG this => NULL
                      # DEBUG this => NULL
                      # DEBUG D#53 => D#99
                      # DEBUG __p => __x_92
                      # DEBUG this => D#53
                      # DEBUG D#52 => D#53
                      # DEBUG this => D#52
                      # DEBUG D#51 => 1
                      # DEBUG __p => __x_92
                      # DEBUG __a => D#50
                      # DEBUG __n => D#51
                      # DEBUG D#49 => D#51
                      # DEBUG D#48 => D#50
                      # DEBUG D#46 => D#48
                      # DEBUG D#47 => D#49
                      # DEBUG __p => __x_92
                      # DEBUG this => D#46
                      # DEBUG D.24008 => D#47
                      # .MEM_43 = VDEF <.MEM_42>
                      operator delete (__x_92);
                      # DEBUG __x => __x_40
                      # DEBUG __x => __x_40
                      if (__x_40 == 0B)
                        goto <bb 47>;
                      else
                        goto <bb 30>;

                    }
                    bb_30 (preds = {bb_29 }, succs = {bb_29 })
                    {
                      <bb 30>:
                      goto <bb 29>;

                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

Pass statistics:
----------------

void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = int; _KeyOfValue = std::_Identity<int>; _Compare = std::less<int>; _Alloc = std::allocator<int>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<int>*] (struct _Rb_treeD.18415 * const thisD.18788, struct _Rb_tree_nodeD.18419 * __xD.18789)
{
  struct _Rb_tree_nodeD.18419 * __xD.23998;
  struct _Rb_tree_nodeD.18419 * __xD.23985;
  struct _Rb_tree_nodeD.18419 * __xD.23972;
  struct _Rb_tree_nodeD.18419 * __xD.23959;
  struct _Rb_tree_nodeD.18419 * __xD.23946;
  struct _Rb_tree_nodeD.18419 * __xD.23933;
  struct _Rb_tree_nodeD.18419 * __xD.23920;
  struct _Rb_tree_nodeD.18419 * __xD.23907;
  struct _Rb_tree_node_baseD.14415 * _39;

;;   basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __xD.18789 => __x_3(D)
  if (__x_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 2, next block 48, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [100.0%]  (FALLTHRU)
  # .MEM_38 = PHI <.MEM_4(D)(2), .MEM_70(39)>
;;    succ:       48 [100.0%]  (FALLTHRU)

;;   basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 3, next block 4, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_38>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 48, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_68 = PHI <__x_3(D)(4), __x_9(38)>
  # .MEM_69 = PHI <.MEM_4(D)(4), .MEM_10(38)>
  # DEBUG __xD.18789 => __x_68
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  __x_8 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_68 + 24B];
  # DEBUG D#9ptD.0 => __x_68
  # DEBUG __xD.22923 => D#9ptD.0
  # DEBUG thisD.23906 => this_6(D)
  # DEBUG __xD.23907 => __x_8
  # DEBUG __xD.23907 => __x_8
  if (__x_8 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 5, next block 39, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [100.0%]  (FALLTHRU)
  # .MEM_34 = PHI <.MEM_69(5), .MEM_94(40)>
  # VUSE <.MEM_34>
  # PT = nonlocal escaped 
  __x_9 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_68 + 16B];
  # DEBUG D#10ptD.0 => __x_68
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.20473 => NULL
  # DEBUG D#100ptD.0 => this_6(D)
  # DEBUG __pD.22909 => __x_68
  # DEBUG thisD.22910 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_68
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.22912 => __x_68
  # DEBUG thisD.22911 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.22915 => __x_68
  # DEBUG __aD.22913 => D#50ptD.0
  # DEBUG __nD.22914 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.22918 => __x_68
  # DEBUG thisD.22916 => D#46ptD.0
  # DEBUG D.22917 => D#47ptD.0
  # .MEM_10 = VDEF <.MEM_34>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_68);
  # DEBUG __xD.18789 => __x_9
  # DEBUG __xD.18789 => __x_9
  if (__x_9 == 0B)
    goto <bb 39>;
  else
    goto <bb 38>;
;;    succ:       39 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 6, next block 7, flags: (NEW)
;;    pred:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_70 = PHI <.MEM_10(6)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU)

;;   basic block 7, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 39, next block 8, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_72 = PHI <__x_8(7), __x_13(37)>
  # .MEM_93 = PHI <.MEM_69(7), .MEM_50(37)>
  # DEBUG __xD.23907 => __x_72
  # VUSE <.MEM_93>
  # PT = nonlocal escaped 
  __x_12 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_72 + 24B];
  # DEBUG D#9ptD.0 => __x_72
  # DEBUG __xD.22923 => D#9ptD.0
  # DEBUG thisD.23919 => this_6(D)
  # DEBUG __xD.23920 => __x_12
  # DEBUG __xD.23920 => __x_12
  if (__x_12 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 8, next block 40, flags: (NEW, REACHABLE)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU)
  # .MEM_30 = PHI <.MEM_93(8), .MEM_91(41)>
  # VUSE <.MEM_30>
  # PT = nonlocal escaped 
  __x_13 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_72 + 16B];
  # DEBUG D#10ptD.0 => __x_72
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.23908 => NULL
  # DEBUG D#100ptD.0 => this_6(D)
  # DEBUG __pD.23910 => __x_72
  # DEBUG thisD.23909 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_72
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.23912 => __x_72
  # DEBUG thisD.23911 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.23915 => __x_72
  # DEBUG __aD.23913 => D#50ptD.0
  # DEBUG __nD.23914 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.23918 => __x_72
  # DEBUG thisD.23916 => D#46ptD.0
  # DEBUG D.23917 => D#47ptD.0
  # .MEM_50 = VDEF <.MEM_30>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_72);
  # DEBUG __xD.23907 => __x_13
  # DEBUG __xD.23907 => __x_13
  if (__x_13 == 0B)
    goto <bb 40>;
  else
    goto <bb 37>;
;;    succ:       40 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 9, next block 10, flags: (NEW)
;;    pred:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_94 = PHI <.MEM_50(9)>
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU)

;;   basic block 10, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 40, next block 11, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_71 = PHI <__x_12(10), __x_16(36)>
  # .MEM_90 = PHI <.MEM_93(10), .MEM_49(36)>
  # DEBUG __xD.23920 => __x_71
  # VUSE <.MEM_90>
  # PT = nonlocal escaped 
  __x_15 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_71 + 24B];
  # DEBUG D#9ptD.0 => __x_71
  # DEBUG __xD.22923 => D#9ptD.0
  # DEBUG thisD.23932 => this_6(D)
  # DEBUG __xD.23933 => __x_15
  # DEBUG __xD.23933 => __x_15
  if (__x_15 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 11, next block 41, flags: (NEW, REACHABLE)
;;    pred:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                42 [100.0%]  (FALLTHRU)
  # .MEM_26 = PHI <.MEM_90(11), .MEM_88(42)>
  # VUSE <.MEM_26>
  # PT = nonlocal escaped 
  __x_16 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_71 + 16B];
  # DEBUG D#10ptD.0 => __x_71
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.23921 => NULL
  # DEBUG D#100ptD.0 => this_6(D)
  # DEBUG __pD.23923 => __x_71
  # DEBUG thisD.23922 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_71
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.23925 => __x_71
  # DEBUG thisD.23924 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.23928 => __x_71
  # DEBUG __aD.23926 => D#50ptD.0
  # DEBUG __nD.23927 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.23931 => __x_71
  # DEBUG thisD.23929 => D#46ptD.0
  # DEBUG D.23930 => D#47ptD.0
  # .MEM_49 = VDEF <.MEM_26>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_71);
  # DEBUG __xD.23920 => __x_16
  # DEBUG __xD.23920 => __x_16
  if (__x_16 == 0B)
    goto <bb 41>;
  else
    goto <bb 36>;
;;    succ:       41 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 41, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 12, next block 13, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_91 = PHI <.MEM_49(12)>
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU)

;;   basic block 13, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 41, next block 14, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_77 = PHI <__x_15(13), __x_20(35)>
  # .MEM_87 = PHI <.MEM_90(13), .MEM_48(35)>
  # DEBUG __xD.23933 => __x_77
  # VUSE <.MEM_87>
  # PT = nonlocal escaped 
  __x_19 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_77 + 24B];
  # DEBUG D#9ptD.0 => __x_77
  # DEBUG __xD.22923 => D#9ptD.0
  # DEBUG thisD.23945 => this_6(D)
  # DEBUG __xD.23946 => __x_19
  # DEBUG __xD.23946 => __x_19
  if (__x_19 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 14, next block 42, flags: (NEW, REACHABLE)
;;    pred:       14 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [100.0%]  (FALLTHRU)
  # .MEM_25 = PHI <.MEM_87(14), .MEM_85(43)>
  # VUSE <.MEM_25>
  # PT = nonlocal escaped 
  __x_20 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_77 + 16B];
  # DEBUG D#10ptD.0 => __x_77
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.23934 => NULL
  # DEBUG D#100ptD.0 => this_6(D)
  # DEBUG __pD.23936 => __x_77
  # DEBUG thisD.23935 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_77
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.23938 => __x_77
  # DEBUG thisD.23937 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.23941 => __x_77
  # DEBUG __aD.23939 => D#50ptD.0
  # DEBUG __nD.23940 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.23944 => __x_77
  # DEBUG thisD.23942 => D#46ptD.0
  # DEBUG D.23943 => D#47ptD.0
  # .MEM_48 = VDEF <.MEM_25>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_77);
  # DEBUG __xD.23933 => __x_20
  # DEBUG __xD.23933 => __x_20
  if (__x_20 == 0B)
    goto <bb 42>;
  else
    goto <bb 35>;
;;    succ:       42 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 42, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 15, next block 16, flags: (NEW)
;;    pred:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_88 = PHI <.MEM_48(15)>
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU)

;;   basic block 16, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 42, next block 17, flags: (NEW)
;;    pred:       14 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_80 = PHI <__x_19(16), __x_24(34)>
  # .MEM_84 = PHI <.MEM_87(16), .MEM_47(34)>
  # DEBUG __xD.23946 => __x_80
  # VUSE <.MEM_84>
  # PT = nonlocal escaped 
  __x_23 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_80 + 24B];
  # DEBUG D#9ptD.0 => __x_80
  # DEBUG __xD.22923 => D#9ptD.0
  # DEBUG thisD.23958 => this_6(D)
  # DEBUG __xD.23959 => __x_23
  # DEBUG __xD.23959 => __x_23
  if (__x_23 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 17, next block 43, flags: (NEW, REACHABLE)
;;    pred:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [100.0%]  (FALLTHRU)
  # .MEM_21 = PHI <.MEM_84(17), .MEM_82(44)>
  # VUSE <.MEM_21>
  # PT = nonlocal escaped 
  __x_24 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_80 + 16B];
  # DEBUG D#10ptD.0 => __x_80
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.23947 => NULL
  # DEBUG D#100ptD.0 => this_6(D)
  # DEBUG __pD.23949 => __x_80
  # DEBUG thisD.23948 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_80
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.23951 => __x_80
  # DEBUG thisD.23950 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.23954 => __x_80
  # DEBUG __aD.23952 => D#50ptD.0
  # DEBUG __nD.23953 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.23957 => __x_80
  # DEBUG thisD.23955 => D#46ptD.0
  # DEBUG D.23956 => D#47ptD.0
  # .MEM_47 = VDEF <.MEM_21>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_80);
  # DEBUG __xD.23946 => __x_24
  # DEBUG __xD.23946 => __x_24
  if (__x_24 == 0B)
    goto <bb 43>;
  else
    goto <bb 34>;
;;    succ:       43 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 43, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 18, next block 19, flags: (NEW)
;;    pred:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_85 = PHI <.MEM_47(18)>
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU)

;;   basic block 19, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 43, next block 20, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_81 = PHI <.MEM_84(19), .MEM_46(33)>
  # PT = nonlocal escaped 
  # __x_83 = PHI <__x_23(19), __x_28(33)>
  # DEBUG __xD.23959 => __x_83
  # VUSE <.MEM_81>
  # PT = nonlocal escaped 
  __x_27 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_83 + 24B];
  # DEBUG D#9ptD.0 => __x_83
  # DEBUG __xD.22923 => D#9ptD.0
  # DEBUG thisD.23971 => this_6(D)
  # DEBUG __xD.23972 => __x_27
  # DEBUG __xD.23972 => __x_27
  if (__x_27 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 20, next block 44, flags: (NEW, REACHABLE)
;;    pred:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                45 [100.0%]  (FALLTHRU)
  # .MEM_17 = PHI <.MEM_81(20), .MEM_79(45)>
  # VUSE <.MEM_17>
  # PT = nonlocal escaped 
  __x_28 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_83 + 16B];
  # DEBUG D#10ptD.0 => __x_83
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.23960 => NULL
  # DEBUG D#100ptD.0 => this_6(D)
  # DEBUG __pD.23962 => __x_83
  # DEBUG thisD.23961 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_83
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.23964 => __x_83
  # DEBUG thisD.23963 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.23967 => __x_83
  # DEBUG __aD.23965 => D#50ptD.0
  # DEBUG __nD.23966 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.23970 => __x_83
  # DEBUG thisD.23968 => D#46ptD.0
  # DEBUG D.23969 => D#47ptD.0
  # .MEM_46 = VDEF <.MEM_17>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_83);
  # DEBUG __xD.23959 => __x_28
  # DEBUG __xD.23959 => __x_28
  if (__x_28 == 0B)
    goto <bb 44>;
  else
    goto <bb 33>;
;;    succ:       44 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 44, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 21, next block 22, flags: (NEW)
;;    pred:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_82 = PHI <.MEM_46(21)>
  goto <bb 18>;
;;    succ:       18 [100.0%]  (FALLTHRU)

;;   basic block 22, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 44, next block 23, flags: (NEW)
;;    pred:       20 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_78 = PHI <.MEM_81(22), .MEM_45(32)>
  # PT = nonlocal escaped 
  # __x_86 = PHI <__x_27(22), __x_32(32)>
  # DEBUG __xD.23972 => __x_86
  # VUSE <.MEM_78>
  # PT = nonlocal escaped 
  __x_31 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_86 + 24B];
  # DEBUG D#9ptD.0 => __x_86
  # DEBUG __xD.22923 => D#9ptD.0
  # DEBUG thisD.23984 => this_6(D)
  # DEBUG __xD.23985 => __x_31
  # DEBUG __xD.23985 => __x_31
  if (__x_31 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 23, next block 45, flags: (NEW, REACHABLE)
;;    pred:       23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                46 [100.0%]  (FALLTHRU)
  # .MEM_14 = PHI <.MEM_78(23), .MEM_76(46)>
  # VUSE <.MEM_14>
  # PT = nonlocal escaped 
  __x_32 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_86 + 16B];
  # DEBUG D#10ptD.0 => __x_86
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.23973 => NULL
  # DEBUG D#100ptD.0 => this_6(D)
  # DEBUG __pD.23975 => __x_86
  # DEBUG thisD.23974 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_86
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.23977 => __x_86
  # DEBUG thisD.23976 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.23980 => __x_86
  # DEBUG __aD.23978 => D#50ptD.0
  # DEBUG __nD.23979 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.23983 => __x_86
  # DEBUG thisD.23981 => D#46ptD.0
  # DEBUG D.23982 => D#47ptD.0
  # .MEM_45 = VDEF <.MEM_14>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_86);
  # DEBUG __xD.23972 => __x_32
  # DEBUG __xD.23972 => __x_32
  if (__x_32 == 0B)
    goto <bb 45>;
  else
    goto <bb 32>;
;;    succ:       45 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 45, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 24, next block 25, flags: (NEW)
;;    pred:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_79 = PHI <.MEM_45(24)>
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU)

;;   basic block 25, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 45, next block 26, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_75 = PHI <.MEM_78(25), .MEM_44(31)>
  # PT = nonlocal escaped 
  # __x_89 = PHI <__x_31(25), __x_36(31)>
  # DEBUG __xD.23985 => __x_89
  # VUSE <.MEM_75>
  # PT = nonlocal escaped 
  __x_35 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_89 + 24B];
  # DEBUG D#9ptD.0 => __x_89
  # DEBUG __xD.22923 => D#9ptD.0
  # DEBUG thisD.23997 => this_6(D)
  # DEBUG __xD.23998 => __x_35
  # DEBUG __xD.23998 => __x_35
  if (__x_35 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 26, next block 46, flags: (NEW, REACHABLE)
;;    pred:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [100.0%]  (FALLTHRU)
  # .MEM_22 = PHI <.MEM_75(26), .MEM_74(47)>
  # VUSE <.MEM_22>
  # PT = nonlocal escaped 
  __x_36 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_89 + 16B];
  # DEBUG D#10ptD.0 => __x_89
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.23986 => NULL
  # DEBUG D#100ptD.0 => this_6(D)
  # DEBUG __pD.23988 => __x_89
  # DEBUG thisD.23987 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_89
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.23990 => __x_89
  # DEBUG thisD.23989 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.23993 => __x_89
  # DEBUG __aD.23991 => D#50ptD.0
  # DEBUG __nD.23992 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.23996 => __x_89
  # DEBUG thisD.23994 => D#46ptD.0
  # DEBUG D.23995 => D#47ptD.0
  # .MEM_44 = VDEF <.MEM_22>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_89);
  # DEBUG __xD.23985 => __x_36
  # DEBUG __xD.23985 => __x_36
  if (__x_36 == 0B)
    goto <bb 46>;
  else
    goto <bb 31>;
;;    succ:       46 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 46, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 27, next block 28, flags: (NEW)
;;    pred:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_76 = PHI <.MEM_44(27)>
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU)

;;   basic block 28, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 46, next block 29, flags: (NEW)
;;    pred:       26 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 9, count 0, freq 9100, maybe hot
;;    prev block 28, next block 47, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_73 = PHI <.MEM_75(28), .MEM_43(30)>
  # PT = nonlocal escaped 
  # __x_92 = PHI <__x_35(28), __x_40(30)>
  # DEBUG __xD.23998 => __x_92
  # VUSE <.MEM_73>
  # PT = nonlocal escaped 
  _39 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_92 + 24B];
  # DEBUG D#9ptD.0 => __x_92
  # DEBUG __xD.22923 => D#9ptD.0
  # .MEM_42 = VDEF <.MEM_73>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.18787 (this_6(D), _39);
  # VUSE <.MEM_42>
  # PT = nonlocal escaped 
  __x_40 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_92 + 16B];
  # DEBUG D#10ptD.0 => __x_92
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.23999 => NULL
  # DEBUG D#100ptD.0 => this_6(D)
  # DEBUG __pD.24001 => __x_92
  # DEBUG thisD.24000 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_92
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.24003 => __x_92
  # DEBUG thisD.24002 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.24006 => __x_92
  # DEBUG __aD.24004 => D#50ptD.0
  # DEBUG __nD.24005 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.24009 => __x_92
  # DEBUG thisD.24007 => D#46ptD.0
  # DEBUG D.24008 => D#47ptD.0
  # .MEM_43 = VDEF <.MEM_42>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_92);
  # DEBUG __xD.23998 => __x_40
  # DEBUG __xD.23998 => __x_40
  if (__x_40 == 0B)
    goto <bb 47>;
  else
    goto <bb 30>;
;;    succ:       47 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 47, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 29, next block 30, flags: (NEW)
;;    pred:       29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_74 = PHI <.MEM_43(29)>
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU)

;;   basic block 30, loop depth 9, count 0, freq 8281, maybe hot
;;    prev block 47, next block 31, flags: (NEW)
;;    pred:       29 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 31, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       27 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 32, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       24 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 33, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 32, next block 34, flags: (NEW)
;;    pred:       21 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 34, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 33, next block 35, flags: (NEW)
;;    pred:       18 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 35, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 36, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 35, next block 37, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 37, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 36, next block 38, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 38, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 37, next block 1, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}



;; Function static void Credit::FreeAll() (_ZN6Credit7FreeAllEv, funcdef_no=1089, decl_uid=19252, cgraph_uid=218, symbol_order=220)


Pass statistics:
----------------

static void Credit::FreeAll() ()
{
  struct _Rb_tree_nodeD.18419 * __xD.24015;
  struct CreditD.18194 * * __tmp$_M_curD.22959;
  struct CreditD.18194 * * const _4;
  struct CreditD.18194 * _6;
  struct CreditD.18194 * * _8;
  struct CreditD.18194 * * * _9;
  struct CreditD.18194 * * _10;
  struct _Rep_typeD.18413 * _13;
  struct _Rb_tree_node_baseD.14415 * _24;
  struct CreditD.18194 * * _28;
  struct CreditD.18194 * * * _29;
  struct CreditD.18194 * * * _30;
  struct CreditD.18194 * * _31;
  struct CreditD.18194 * * _32;
  struct CreditD.18194 * * _33;
  struct CreditD.18194 * * pretmp_43;
  struct CreditD.18194 * * prephitmp_44;
  struct CreditD.18194 * * pretmp_46;
  struct CreditD.18194 * * prephitmp_48;
  struct CreditD.18194 * * const prephitmp_49;
  struct CreditD.18194 * * const pretmp_50;
  struct CreditD.18194 * * const prephitmp_51;

;;   basic block 2, loop depth 0, count 0, freq 127, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  pretmp_50 = MEM[(struct CreditD.18194 * * *)&_ZN6Credit4_allED.19257 + 48B];
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 3, loop depth 1, count 0, freq 1289, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_41 = PHI <.MEM_39(15), .MEM_40(14)>
  # prephitmp_49 = PHI <_33(15), _28(14)>
;;    succ:       4 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 1416, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
;;                2 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_41(3), .MEM_3(D)(2)>
  # PT = nonlocal escaped 
  # prephitmp_51 = PHI <prephitmp_49(3), pretmp_50(2)>
  # DEBUG thisD.22944 => &_ZN6Credit4_allED.19257
  # DEBUG D#15ptD.0 => &_ZN6Credit4_allED.19257.cD.20262
  # DEBUG thisD.22945 => D#15ptD.0
  # DEBUG D#13ptD.0 => &D#15ptD.0->D.20219._M_implD.19670._M_startD.19674
  # DEBUG D#14ptD.0 => &D#15ptD.0->D.20219._M_implD.19670._M_finishD.19675
  # DEBUG D#152ptD.0 => MEM[(struct CreditD.18194 * * *)&_ZN6Credit4_allED.19257 + 48B]
  # DEBUG D#11ptD.0 => D#14ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _4 = MEM[(struct CreditD.18194 * * *)&_ZN6Credit4_allED.19257 + 16B];
  # DEBUG D#12ptD.0 => D#13ptD.0
  # DEBUG __xD.22946 => D#11ptD.0
  # DEBUG __yD.22947 => D#12ptD.0
  if (_4 != prephitmp_51)
    goto <bb 5>;
  else
    goto <bb 16>;
;;    succ:       5 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 1289, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.22949 => &_ZN6Credit4_allED.19257
  # DEBUG D#30ptD.0 => &_ZN6Credit4_allED.19257.cD.20262
  # DEBUG thisD.22950 => D#30ptD.0
  # DEBUG thisD.22952 => D#30ptD.0
  # DEBUG D#3ptD.0 => &D#30ptD.0->D.20219._M_implD.19670._M_finishD.19675
  # DEBUG thisD.22954 => &__tmpD.22951
  # DEBUG __xD.22953 => D#3ptD.0
  # DEBUG __tmp$_M_curD.22959 => D#152ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _8 = MEM[(const struct iteratorD.19557 &)&_ZN6Credit4_allED.19257 + 48]._M_firstD.19570;
  # DEBUG __tmp$_M_firstD.22509 => _8
  # DEBUG D#29ptD.0 => MEM[(const struct iteratorD.19557 &)D#30ptD.0 + 48]._M_lastD.19571
  # DEBUG __tmp$_M_lastD.22510 => D#29ptD.0
  # DEBUG D#153ptD.0 => MEM[(const struct iteratorD.19557 &)&_ZN6Credit4_allED.19257 + 48]._M_nodeD.19572
  # DEBUG __tmp$_M_nodeD.22511 => D#153ptD.0
  # DEBUG thisD.22955 => &__tmpD.22951
  if (_8 == prephitmp_51)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 193, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _9 = MEM[(const struct iteratorD.19557 &)&_ZN6Credit4_allED.19257 + 48]._M_nodeD.19572;
  # DEBUG D#28ptD.0 => D#153ptD.0 + 18446744073709551608
  # DEBUG thisD.22957 => &__tmpD.22951
  # DEBUG __new_nodeD.22956 => D#28ptD.0
  # DEBUG __tmp$_M_nodeD.22511 => D#28ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _10 = MEM[(struct CreditD.18194 * * *)_9 + -8B];
  # DEBUG __tmp$_M_firstD.22509 => _10
  # DEBUG __sizeD.22490 => 8
  # PT = nonlocal escaped 
  __tmp$_M_cur_11 = _10 + 512;
  # DEBUG __tmp$_M_lastD.22510 => __tmp$_M_cur_11
  # DEBUG __tmp$_M_curD.22959 => __tmp$_M_cur_11
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 1289, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       5 [85.0%]  (FALSE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __tmp$_M_cur_12 = PHI <prephitmp_51(5), __tmp$_M_cur_11(6)>
  # DEBUG __tmp$_M_curD.22959 => __tmp$_M_cur_12
  # DEBUG __tmp$_M_curD.22959 => __tmp$_M_cur_12 + 18446744073709551608
  # DEBUG D#16ptD.0 => &__tmpD.22951
  # DEBUG thisD.22499 => D#16ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _6 = MEM[(struct CreditD.18194 * &)__tmp$_M_cur_12 + 18446744073709551608];
  if (_6 != 0B)
    goto <bb 8>;
  else
    goto <bb 13>;
;;    succ:       8 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.22960 => _6
  # DEBUG D#102ptD.0 => &_6->vcD.19243
  # DEBUG thisD.22961 => D#102ptD.0
  # PT = nonlocal escaped 
  _13 = &MEM[(struct setD.18198 *)_6]._M_tD.18416;
  # DEBUG thisD.22962 => _13
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  __x_14 = MEM[(struct _Rb_tree_node_baseD.14415 * *)_6 + 16B];
  # DEBUG D#2ptD.0 => _13
  # DEBUG thisD.22930 => D#2ptD.0
  # DEBUG thisD.24014 => _13
  # DEBUG __xD.24015 => __x_14
  # DEBUG __xD.24015 => __x_14
  if (__x_14 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_26 = PHI <.MEM_1(8), .MEM_34(11)>
  # DEBUG D#101ptD.0 => &MEM[(struct _Rb_treeD.18415 *)_13]._M_implD.18494
  # DEBUG thisD.22963 => D#101ptD.0
  # DEBUG thisD.22964 => D#101ptD.0
  # DEBUG thisD.22965 => D#101ptD.0
  # .MEM_21 = VDEF <.MEM_26>
  MEM[(struct  &)_6] ={v} {CLOBBER};
  # .MEM_7 = VDEF <.MEM_21>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_6);
  # VUSE <.MEM_7>
  pretmp_46 = MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569;
  # VUSE <.MEM_7>
  pretmp_43 = MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_firstD.19570;
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_47 = PHI <__x_14(10), __x_25(12)>
  # .MEM_45 = PHI <.MEM_1(10), .MEM_34(12)>
  # DEBUG __xD.24015 => __x_47
  # VUSE <.MEM_45>
  # PT = nonlocal escaped 
  _24 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_47 + 24B];
  # DEBUG D#9ptD.0 => __x_47
  # DEBUG __xD.22923 => D#9ptD.0
  # .MEM_22 = VDEF <.MEM_45>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.18787 (_13, _24);
  # VUSE <.MEM_22>
  # PT = nonlocal escaped 
  __x_25 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_47 + 16B];
  # DEBUG D#10ptD.0 => __x_47
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.24016 => NULL
  # DEBUG D#100ptD.0 => _13
  # DEBUG __pD.24018 => __x_47
  # DEBUG thisD.24017 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_47
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.24020 => __x_47
  # DEBUG thisD.24019 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.24023 => __x_47
  # DEBUG __aD.24021 => D#50ptD.0
  # DEBUG __nD.24022 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.24026 => __x_47
  # DEBUG thisD.24024 => D#46ptD.0
  # DEBUG D.24025 => D#47ptD.0
  # .MEM_34 = VDEF <.MEM_22>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_47);
  # DEBUG __xD.24015 => __x_25
  # DEBUG __xD.24015 => __x_25
  if (__x_25 == 0B)
    goto <bb 9>;
  else
    goto <bb 12>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 1289, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       7 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2 = PHI <.MEM_1(7), .MEM_7(9)>
  # PT = nonlocal escaped 
  # prephitmp_48 = PHI <prephitmp_51(7), pretmp_46(9)>
  # PT = nonlocal escaped 
  # prephitmp_44 = PHI <_8(7), pretmp_43(9)>
  # DEBUG thisD.22966 => &_ZN6Credit4_allED.19257
  # DEBUG thisD.24027 => &_ZN6Credit4_allED.19257.cD.20262
  # DEBUG D#151ptD.0 => MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569
  if (prephitmp_44 != prephitmp_48)
    goto <bb 14>;
  else
    goto <bb 15>;
;;    succ:       14 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 1158, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  _28 = prephitmp_48 + 18446744073709551608;
  # .MEM_40 = VDEF <.MEM_2>
  MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569 = _28;
  # DEBUG D#66ptD.0 => MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569
  # DEBUG D#65ptD.0 => &MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670
  # DEBUG D#26ptD.0 => D#65ptD.0
  # DEBUG D#27ptD.0 => D#66ptD.0
  # DEBUG __aD.22707 => D#26ptD.0
  # DEBUG __pD.22706 => D#27ptD.0
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 131, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       13 [10.1%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.24028 => &_ZN6Credit4_allED.19257.cD.20262
  # DEBUG D#64ptD.0 => &MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219
  # DEBUG thisD.24030 => D#64ptD.0
  # DEBUG __pD.24029 => D#151ptD.0
  # DEBUG __sizeD.22687 => 8
  # DEBUG D#60ptD.0 => &D#64ptD.0->_M_implD.19670
  # DEBUG D#58ptD.0 => D#60ptD.0
  # DEBUG __pD.24034 => D#151ptD.0
  # DEBUG __aD.24032 => D#58ptD.0
  # DEBUG __nD.24033 => D#59ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#54ptD.0 => D#56ptD.0
  # DEBUG D#55ptD.0 => D#57ptD.0
  # DEBUG __pD.24037 => D#151ptD.0
  # DEBUG thisD.24035 => D#54ptD.0
  # DEBUG D.24036 => D#55ptD.0
  # .MEM_35 = VDEF <.MEM_2>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (prephitmp_48);
  # VUSE <.MEM_35>
  # PT = nonlocal escaped 
  _29 = MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_nodeD.19572;
  # PT = nonlocal escaped 
  _30 = _29 + 18446744073709551608;
  # DEBUG D#63ptD.0 => &MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675
  # DEBUG thisD.24039 => D#63ptD.0
  # DEBUG __new_nodeD.24038 => _30
  # .MEM_36 = VDEF <.MEM_35>
  MEM[(struct _Deque_iteratorD.19537 *)&_ZN6Credit4_allED.19257 + 48B]._M_nodeD.19572 = _30;
  # VUSE <.MEM_36>
  # PT = nonlocal escaped 
  _31 = MEM[(struct CreditD.18194 * * *)_29 + -8B];
  # .MEM_37 = VDEF <.MEM_36>
  MEM[(struct _Deque_iteratorD.19537 *)&_ZN6Credit4_allED.19257 + 48B]._M_firstD.19570 = _31;
  # DEBUG __sizeD.22490 => 8
  # PT = nonlocal escaped 
  _32 = _31 + 512;
  # .MEM_38 = VDEF <.MEM_37>
  MEM[(struct _Deque_iteratorD.19537 *)&_ZN6Credit4_allED.19257 + 48B]._M_lastD.19571 = _32;
  # PT = nonlocal escaped 
  _33 = &MEM[(voidD.45 *)_31 + 504B];
  # .MEM_39 = VDEF <.MEM_38>
  MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569 = _33;
  # DEBUG D#62ptD.0 => MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569
  # DEBUG D#61ptD.0 => &MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219
  # DEBUG thisD.22692 => D#61ptD.0
  # DEBUG D#27ptD.0 => D#62ptD.0
  # DEBUG __aD.22691 => D#26ptD.0
  # DEBUG __pD.22690 => D#27ptD.0
  # DEBUG D#25ptD.0 => D#27ptD.0
  # DEBUG D#24ptD.0 => D#26ptD.0
  # DEBUG D#22ptD.0 => D#24ptD.0
  # DEBUG D#23ptD.0 => D#25ptD.0
  # DEBUG thisD.22481 => D#22ptD.0
  # DEBUG __pD.22480 => D#23ptD.0
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 127, maybe hot
;;    prev block 15, next block 1, flags: (NEW, REACHABLE)
;;    pred:       4 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1>
  return;
;;    succ:       EXIT [100.0%] 

}



Updating SSA:
Registering new PHI nodes in block #11
Updating SSA information for statement operator delete (__x_47);
Registering new PHI nodes in block #12
Registering new PHI nodes in block #18

DFA Statistics for static void Credit::FreeAll()

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             58        464b
DEF operands                             19        152b
VUSE operands                            24        192b
VDEF operands                            10         80b
PHI nodes                                12       1248b
PHI arguments                            23       1104b
---------------------------------------------------------
Total memory used by DFA/SSA data                 3240b
---------------------------------------------------------

Average number of arguments per PHI node: 1.9 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_23 -> { .MEM_34 }
Incremental SSA update started at block: 11
Number of blocks in CFG: 19
Number of blocks to update: 3 ( 16%)
Affected blocks: 11 12 18


Creating dr for MEM[(struct Credit * * *)&_all + 48B]
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(struct Credit * * *)&_all + 48B]
Creating dr for MEM[(struct Credit * * *)&_all + 16B]
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct Credit * * *)&_all + 16B]
Creating dr for MEM[(struct Credit * * *)&_all + 16B]
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct Credit * * *)&_all + 16B]
Creating dr for MEM[(struct Credit * * *)&_all + 16B]
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct Credit * * *)&_all + 16B]
Creating dr for MEM[(struct Credit * * *)&_all + 16B]
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct Credit * * *)&_all + 16B]
Creating dr for MEM[(const struct iterator &)&_all + 48]._M_first
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)&_all + 48]
	Access function 0: 64
Creating dr for MEM[(const struct iterator &)&_all + 48]._M_first
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)&_all + 48]
	Access function 0: 64
Creating dr for MEM[(const struct iterator &)&_all + 48]._M_node
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)&_all + 48]
	Access function 0: 192
Creating dr for MEM[(const struct iterator &)&_all + 48]._M_node
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)&_all + 48]
	Access function 0: 192
Creating dr for MEM[(struct Credit * * *)_9 + -8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * * *)_9 + -8B]
Creating dr for MEM[(struct Credit * * *)_9 + -8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * * *)_9 + -8B]
Creating dr for MEM[(struct Credit * &)__tmp$_M_cur_12 + 18446744073709551608]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * &)__tmp$_M_cur_12 + 18446744073709551608]
Creating dr for MEM[(struct Credit * &)__tmp$_M_cur_12 + 18446744073709551608]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * &)__tmp$_M_cur_12 + 18446744073709551608]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_6 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_6 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_6 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_6 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
Creating dr for MEM[(struct deque *)&_all].D.20219._M_impl._M_finish._M_cur
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(struct deque *)&_all]
	Access function 0: 0
	Access function 1: 384
	Access function 2: 0
	Access function 3: 0
Creating dr for MEM[(struct deque *)&_all].D.20219._M_impl._M_finish._M_cur
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(struct deque *)&_all]
	Access function 0: 0
	Access function 1: 384
	Access function 2: 0
	Access function 3: 0
Creating dr for MEM[(struct Credit * * *)&_all + 16B]
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct Credit * * *)&_all + 16B]
Creating dr for MEM[(struct Credit * * *)&_all + 16B]
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct Credit * * *)&_all + 16B]
Creating dr for MEM[(struct Credit * * *)&_all + 16B]
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct Credit * * *)&_all + 16B]
Creating dr for MEM[(struct Credit * * *)&_all + 16B]
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct Credit * * *)&_all + 16B]
Creating dr for MEM[(const struct iterator &)&_all + 48]._M_first
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)&_all + 48]
	Access function 0: 64
Creating dr for MEM[(const struct iterator &)&_all + 48]._M_first
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)&_all + 48]
	Access function 0: 64
Creating dr for MEM[(const struct iterator &)&_all + 48]._M_node
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)&_all + 48]
	Access function 0: 192
Creating dr for MEM[(const struct iterator &)&_all + 48]._M_node
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)&_all + 48]
	Access function 0: 192
Creating dr for MEM[(struct Credit * * *)_9 + -8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * * *)_9 + -8B]
Creating dr for MEM[(struct Credit * * *)_9 + -8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * * *)_9 + -8B]
Creating dr for MEM[(struct Credit * &)__tmp$_M_cur_12 + 18446744073709551608]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * &)__tmp$_M_cur_12 + 18446744073709551608]
Creating dr for MEM[(struct Credit * &)__tmp$_M_cur_12 + 18446744073709551608]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * &)__tmp$_M_cur_12 + 18446744073709551608]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_6 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_6 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_6 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_6 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B]
Creating dr for MEM[(struct deque *)&_all].D.20219._M_impl._M_finish._M_cur
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(struct deque *)&_all]
	Access function 0: 0
	Access function 1: 384
	Access function 2: 0
	Access function 3: 0
Creating dr for MEM[(struct deque *)&_all].D.20219._M_impl._M_finish._M_cur
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(struct deque *)&_all]
	Access function 0: 0
	Access function 1: 384
	Access function 2: 0
	Access function 3: 0

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:11)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:8)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:20, LOOPS:2, CONDITIONS:6, STMTS:178)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_4 })
  {
    <bb 2>:
    # VUSE <.MEM_3(D)>
    pretmp_50 = MEM[(struct Credit * * *)&_all + 48B];
    goto <bb 4>;

  }
  bb_16 (preds = {bb_4 }, succs = {bb_17 })
  {
    <bb 16>:

  }
  bb_17 (preds = {bb_16 }, succs = {bb_1 })
  {
    <bb 17>:
    # VUSE <.MEM_1>
    return;

  }
  loop_1 (header = 4, latch = 19, niter = )
  {
    bb_3 (preds = {bb_15 bb_14 }, succs = {bb_19 })
    {
      <bb 3>:
      # .MEM_41 = PHI <.MEM_39(15), .MEM_40(14)>
      # prephitmp_49 = PHI <_33(15), _28(14)>

    }
    bb_19 (preds = {bb_3 }, succs = {bb_4 })
    {
      <bb 19>:

    }
    bb_4 (preds = {bb_19 bb_2 }, succs = {bb_5 bb_16 })
    {
      <bb 4>:
      # .MEM_1 = PHI <.MEM_41(19), .MEM_3(D)(2)>
      # prephitmp_51 = PHI <prephitmp_49(19), pretmp_50(2)>
      # DEBUG this => &_all
      # DEBUG D#15 => &_all.c
      # DEBUG this => D#15
      # DEBUG D#13 => &D#15->D.20219._M_impl._M_start
      # DEBUG D#14 => &D#15->D.20219._M_impl._M_finish
      # DEBUG D#152 => MEM[(struct Credit * * *)&_all + 48B]
      # DEBUG D#11 => D#14
      # VUSE <.MEM_1>
      _4 = MEM[(struct Credit * * *)&_all + 16B];
      # DEBUG D#12 => D#13
      # DEBUG __x => D#11
      # DEBUG __y => D#12
      if (_4 != prephitmp_51)
        goto <bb 5>;
      else
        goto <bb 16>;

    }
    bb_5 (preds = {bb_4 }, succs = {bb_6 bb_7 })
    {
      <bb 5>:
      # DEBUG this => &_all
      # DEBUG D#30 => &_all.c
      # DEBUG this => D#30
      # DEBUG this => D#30
      # DEBUG D#3 => &D#30->D.20219._M_impl._M_finish
      # DEBUG this => &__tmp
      # DEBUG __x => D#3
      # DEBUG __tmp$_M_cur => D#152
      # VUSE <.MEM_1>
      _8 = MEM[(const struct iterator &)&_all + 48]._M_first;
      # DEBUG __tmp$_M_first => _8
      # DEBUG D#29 => MEM[(const struct iterator &)D#30 + 48]._M_last
      # DEBUG __tmp$_M_last => D#29
      # DEBUG D#153 => MEM[(const struct iterator &)&_all + 48]._M_node
      # DEBUG __tmp$_M_node => D#153
      # DEBUG this => &__tmp
      if (_8 == prephitmp_51)
        goto <bb 6>;
      else
        goto <bb 7>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_7 })
    {
      <bb 6>:
      # VUSE <.MEM_1>
      _9 = MEM[(const struct iterator &)&_all + 48]._M_node;
      # DEBUG D#28 => D#153 + 18446744073709551608
      # DEBUG this => &__tmp
      # DEBUG __new_node => D#28
      # DEBUG __tmp$_M_node => D#28
      # VUSE <.MEM_1>
      _10 = MEM[(struct Credit * * *)_9 + -8B];
      # DEBUG __tmp$_M_first => _10
      # DEBUG __size => 8
      __tmp$_M_cur_11 = _10 + 512;
      # DEBUG __tmp$_M_last => __tmp$_M_cur_11
      # DEBUG __tmp$_M_cur => __tmp$_M_cur_11

    }
    bb_7 (preds = {bb_5 bb_6 }, succs = {bb_8 bb_13 })
    {
      <bb 7>:
      # __tmp$_M_cur_12 = PHI <prephitmp_51(5), __tmp$_M_cur_11(6)>
      # DEBUG __tmp$_M_cur => __tmp$_M_cur_12
      # DEBUG __tmp$_M_cur => __tmp$_M_cur_12 + 18446744073709551608
      # DEBUG D#16 => &__tmp
      # DEBUG this => D#16
      # VUSE <.MEM_1>
      _6 = MEM[(struct Credit * &)__tmp$_M_cur_12 + 18446744073709551608];
      if (_6 != 0B)
        goto <bb 8>;
      else
        goto <bb 13>;

    }
    bb_8 (preds = {bb_7 }, succs = {bb_9 bb_10 })
    {
      <bb 8>:
      # DEBUG this => _6
      # DEBUG D#102 => &_6->vc
      # DEBUG this => D#102
      _13 = &MEM[(struct set *)_6]._M_t;
      # DEBUG this => _13
      # VUSE <.MEM_1>
      __x_14 = MEM[(struct _Rb_tree_node_base * *)_6 + 16B];
      # DEBUG D#2 => _13
      # DEBUG this => D#2
      # DEBUG this => _13
      # DEBUG __x => __x_14
      # DEBUG __x => __x_14
      if (__x_14 == 0B)
        goto <bb 9>;
      else
        goto <bb 10>;

    }
    bb_9 (preds = {bb_8 bb_18 }, succs = {bb_13 })
    {
      <bb 9>:
      # .MEM_26 = PHI <.MEM_1(8), .MEM_23(18)>
      # DEBUG D#101 => &MEM[(struct _Rb_tree *)_13]._M_impl
      # DEBUG this => D#101
      # DEBUG this => D#101
      # DEBUG this => D#101
      # .MEM_21 = VDEF <.MEM_26>
      MEM[(struct  &)_6] ={v} {CLOBBER};
      # .MEM_7 = VDEF <.MEM_21>
      operator delete (_6);
      # VUSE <.MEM_7>
      pretmp_46 = MEM[(struct deque *)&_all].D.20219._M_impl._M_finish._M_cur;
      # VUSE <.MEM_7>
      pretmp_43 = MEM[(struct deque *)&_all].D.20219._M_impl._M_finish._M_first;
      goto <bb 13>;

    }
    bb_10 (preds = {bb_8 }, succs = {bb_11 })
    {
      <bb 10>:

    }
    bb_18 (preds = {bb_11 }, succs = {bb_9 })
    {
      <bb 18>:
      # .MEM_23 = PHI <.MEM_34(11)>
      goto <bb 9>;

    }
    bb_13 (preds = {bb_7 bb_9 }, succs = {bb_14 bb_15 })
    {
      <bb 13>:
      # .MEM_2 = PHI <.MEM_1(7), .MEM_7(9)>
      # prephitmp_48 = PHI <prephitmp_51(7), pretmp_46(9)>
      # prephitmp_44 = PHI <_8(7), pretmp_43(9)>
      # DEBUG this => &_all
      # DEBUG this => &_all.c
      # DEBUG D#151 => MEM[(struct deque *)&_all].D.20219._M_impl._M_finish._M_cur
      if (prephitmp_44 != prephitmp_48)
        goto <bb 14>;
      else
        goto <bb 15>;

    }
    bb_14 (preds = {bb_13 }, succs = {bb_3 })
    {
      <bb 14>:
      _28 = prephitmp_48 + 18446744073709551608;
      # .MEM_40 = VDEF <.MEM_2>
      MEM[(struct deque *)&_all].D.20219._M_impl._M_finish._M_cur = _28;
      # DEBUG D#66 => MEM[(struct deque *)&_all].D.20219._M_impl._M_finish._M_cur
      # DEBUG D#65 => &MEM[(struct deque *)&_all].D.20219._M_impl
      # DEBUG D#26 => D#65
      # DEBUG D#27 => D#66
      # DEBUG __a => D#26
      # DEBUG __p => D#27
      goto <bb 3>;

    }
    bb_15 (preds = {bb_13 }, succs = {bb_3 })
    {
      <bb 15>:
      # DEBUG this => &_all.c
      # DEBUG D#64 => &MEM[(struct deque *)&_all].D.20219
      # DEBUG this => D#64
      # DEBUG __p => D#151
      # DEBUG __size => 8
      # DEBUG D#60 => &D#64->_M_impl
      # DEBUG D#58 => D#60
      # DEBUG __p => D#151
      # DEBUG __a => D#58
      # DEBUG __n => D#59
      # DEBUG D#57 => D#59
      # DEBUG D#56 => D#58
      # DEBUG D#54 => D#56
      # DEBUG D#55 => D#57
      # DEBUG __p => D#151
      # DEBUG this => D#54
      # DEBUG D.24036 => D#55
      # .MEM_35 = VDEF <.MEM_2>
      operator delete (prephitmp_48);
      # VUSE <.MEM_35>
      _29 = MEM[(struct deque *)&_all].D.20219._M_impl._M_finish._M_node;
      _30 = _29 + 18446744073709551608;
      # DEBUG D#63 => &MEM[(struct deque *)&_all].D.20219._M_impl._M_finish
      # DEBUG this => D#63
      # DEBUG __new_node => _30
      # .MEM_36 = VDEF <.MEM_35>
      MEM[(struct _Deque_iterator *)&_all + 48B]._M_node = _30;
      # VUSE <.MEM_36>
      _31 = MEM[(struct Credit * * *)_29 + -8B];
      # .MEM_37 = VDEF <.MEM_36>
      MEM[(struct _Deque_iterator *)&_all + 48B]._M_first = _31;
      # DEBUG __size => 8
      _32 = _31 + 512;
      # .MEM_38 = VDEF <.MEM_37>
      MEM[(struct _Deque_iterator *)&_all + 48B]._M_last = _32;
      _33 = &MEM[(void *)_31 + 504B];
      # .MEM_39 = VDEF <.MEM_38>
      MEM[(struct deque *)&_all].D.20219._M_impl._M_finish._M_cur = _33;
      # DEBUG D#62 => MEM[(struct deque *)&_all].D.20219._M_impl._M_finish._M_cur
      # DEBUG D#61 => &MEM[(struct deque *)&_all].D.20219
      # DEBUG this => D#61
      # DEBUG D#27 => D#62
      # DEBUG __a => D#26
      # DEBUG __p => D#27
      # DEBUG D#25 => D#27
      # DEBUG D#24 => D#26
      # DEBUG D#22 => D#24
      # DEBUG D#23 => D#25
      # DEBUG this => D#22
      # DEBUG __p => D#23
      goto <bb 3>;

    }
    loop_2 (header = 11, latch = 12, niter = )
    {
      bb_11 (preds = {bb_10 bb_12 }, succs = {bb_18 bb_12 })
      {
        <bb 11>:
        # __x_47 = PHI <__x_14(10), __x_25(12)>
        # .MEM_45 = PHI <.MEM_1(10), .MEM_34(12)>
        # DEBUG __x => __x_47
        # VUSE <.MEM_45>
        _24 = MEM[(struct _Rb_tree_node_base * *)__x_47 + 24B];
        # DEBUG D#9 => __x_47
        # DEBUG __x => D#9
        # .MEM_22 = VDEF <.MEM_45>
        std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase (_13, _24);
        # VUSE <.MEM_22>
        __x_25 = MEM[(struct _Rb_tree_node_base * *)__x_47 + 16B];
        # DEBUG D#10 => __x_47
        # DEBUG __x => D#10
        # DEBUG __y => NULL
        # DEBUG D#100 => _13
        # DEBUG __p => __x_47
        # DEBUG this => D#100
        # DEBUG D#99 => D#100
        # DEBUG D#98 => D#100
        # DEBUG D#96 => D#98
        # DEBUG D#97 => __x_47
        # DEBUG this => D#96
        # DEBUG __p => D#97
        # DEBUG D#95 => D#96
        # DEBUG D#94 => D#97
        # DEBUG D#93 => D#97
        # DEBUG this => D#93
        # DEBUG D#92 => &D#94->_M_value_field
        # DEBUG __r => D#92
        # DEBUG D#91 => D#95
        # DEBUG this => D#91
        # DEBUG D#90 => D#91
        # DEBUG this => D#90
        # DEBUG this => NULL
        # DEBUG D.22855 => NULL
        # DEBUG this => NULL
        # DEBUG D#35 => D#92
        # DEBUG this => D#34
        # DEBUG __p => D#35
        # DEBUG this => NULL
        # DEBUG this => NULL
        # DEBUG D#53 => D#99
        # DEBUG __p => __x_47
        # DEBUG this => D#53
        # DEBUG D#52 => D#53
        # DEBUG this => D#52
        # DEBUG D#51 => 1
        # DEBUG __p => __x_47
        # DEBUG __a => D#50
        # DEBUG __n => D#51
        # DEBUG D#49 => D#51
        # DEBUG D#48 => D#50
        # DEBUG D#46 => D#48
        # DEBUG D#47 => D#49
        # DEBUG __p => __x_47
        # DEBUG this => D#46
        # DEBUG D.24025 => D#47
        # .MEM_34 = VDEF <.MEM_22>
        operator delete (__x_47);
        # DEBUG __x => __x_25
        # DEBUG __x => __x_25
        if (__x_25 == 0B)
          goto <bb 18>;
        else
          goto <bb 12>;

      }
      bb_12 (preds = {bb_11 }, succs = {bb_11 })
      {
        <bb 12>:
        goto <bb 11>;

      }
    }
  }
}

Pass statistics:
----------------

static void Credit::FreeAll() ()
{
  struct _Rb_tree_nodeD.18419 * __xD.24015;
  struct CreditD.18194 * * __tmp$_M_curD.22959;
  struct CreditD.18194 * * const _4;
  struct CreditD.18194 * _6;
  struct CreditD.18194 * * _8;
  struct CreditD.18194 * * * _9;
  struct CreditD.18194 * * _10;
  struct _Rep_typeD.18413 * _13;
  struct _Rb_tree_node_baseD.14415 * _24;
  struct CreditD.18194 * * _28;
  struct CreditD.18194 * * * _29;
  struct CreditD.18194 * * * _30;
  struct CreditD.18194 * * _31;
  struct CreditD.18194 * * _32;
  struct CreditD.18194 * * _33;
  struct CreditD.18194 * * pretmp_43;
  struct CreditD.18194 * * prephitmp_44;
  struct CreditD.18194 * * pretmp_46;
  struct CreditD.18194 * * prephitmp_48;
  struct CreditD.18194 * * const prephitmp_49;
  struct CreditD.18194 * * const pretmp_50;
  struct CreditD.18194 * * const prephitmp_51;

;;   basic block 2, loop depth 0, count 0, freq 127, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  pretmp_50 = MEM[(struct CreditD.18194 * * *)&_ZN6Credit4_allED.19257 + 48B];
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 3, loop depth 1, count 0, freq 1289, maybe hot
;;    prev block 2, next block 19, flags: (NEW)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_41 = PHI <.MEM_39(15), .MEM_40(14)>
  # prephitmp_49 = PHI <_33(15), _28(14)>
;;    succ:       19 [100.0%]  (FALLTHRU)

;;   basic block 19, loop depth 1, count 0, freq 1289, maybe hot
;;    prev block 3, next block 4, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU)
;;    succ:       4 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 1416, maybe hot
;;    prev block 19, next block 5, flags: (NEW)
;;    pred:       19 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
;;                2 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_41(19), .MEM_3(D)(2)>
  # PT = nonlocal escaped 
  # prephitmp_51 = PHI <prephitmp_49(19), pretmp_50(2)>
  # DEBUG thisD.22944 => &_ZN6Credit4_allED.19257
  # DEBUG D#15ptD.0 => &_ZN6Credit4_allED.19257.cD.20262
  # DEBUG thisD.22945 => D#15ptD.0
  # DEBUG D#13ptD.0 => &D#15ptD.0->D.20219._M_implD.19670._M_startD.19674
  # DEBUG D#14ptD.0 => &D#15ptD.0->D.20219._M_implD.19670._M_finishD.19675
  # DEBUG D#152ptD.0 => MEM[(struct CreditD.18194 * * *)&_ZN6Credit4_allED.19257 + 48B]
  # DEBUG D#11ptD.0 => D#14ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _4 = MEM[(struct CreditD.18194 * * *)&_ZN6Credit4_allED.19257 + 16B];
  # DEBUG D#12ptD.0 => D#13ptD.0
  # DEBUG __xD.22946 => D#11ptD.0
  # DEBUG __yD.22947 => D#12ptD.0
  if (_4 != prephitmp_51)
    goto <bb 5>;
  else
    goto <bb 16>;
;;    succ:       5 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 1289, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.22949 => &_ZN6Credit4_allED.19257
  # DEBUG D#30ptD.0 => &_ZN6Credit4_allED.19257.cD.20262
  # DEBUG thisD.22950 => D#30ptD.0
  # DEBUG thisD.22952 => D#30ptD.0
  # DEBUG D#3ptD.0 => &D#30ptD.0->D.20219._M_implD.19670._M_finishD.19675
  # DEBUG thisD.22954 => &__tmpD.22951
  # DEBUG __xD.22953 => D#3ptD.0
  # DEBUG __tmp$_M_curD.22959 => D#152ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _8 = MEM[(const struct iteratorD.19557 &)&_ZN6Credit4_allED.19257 + 48]._M_firstD.19570;
  # DEBUG __tmp$_M_firstD.22509 => _8
  # DEBUG D#29ptD.0 => MEM[(const struct iteratorD.19557 &)D#30ptD.0 + 48]._M_lastD.19571
  # DEBUG __tmp$_M_lastD.22510 => D#29ptD.0
  # DEBUG D#153ptD.0 => MEM[(const struct iteratorD.19557 &)&_ZN6Credit4_allED.19257 + 48]._M_nodeD.19572
  # DEBUG __tmp$_M_nodeD.22511 => D#153ptD.0
  # DEBUG thisD.22955 => &__tmpD.22951
  if (_8 == prephitmp_51)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 193, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _9 = MEM[(const struct iteratorD.19557 &)&_ZN6Credit4_allED.19257 + 48]._M_nodeD.19572;
  # DEBUG D#28ptD.0 => D#153ptD.0 + 18446744073709551608
  # DEBUG thisD.22957 => &__tmpD.22951
  # DEBUG __new_nodeD.22956 => D#28ptD.0
  # DEBUG __tmp$_M_nodeD.22511 => D#28ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _10 = MEM[(struct CreditD.18194 * * *)_9 + -8B];
  # DEBUG __tmp$_M_firstD.22509 => _10
  # DEBUG __sizeD.22490 => 8
  # PT = nonlocal escaped 
  __tmp$_M_cur_11 = _10 + 512;
  # DEBUG __tmp$_M_lastD.22510 => __tmp$_M_cur_11
  # DEBUG __tmp$_M_curD.22959 => __tmp$_M_cur_11
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 1289, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       5 [85.0%]  (FALSE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __tmp$_M_cur_12 = PHI <prephitmp_51(5), __tmp$_M_cur_11(6)>
  # DEBUG __tmp$_M_curD.22959 => __tmp$_M_cur_12
  # DEBUG __tmp$_M_curD.22959 => __tmp$_M_cur_12 + 18446744073709551608
  # DEBUG D#16ptD.0 => &__tmpD.22951
  # DEBUG thisD.22499 => D#16ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _6 = MEM[(struct CreditD.18194 * &)__tmp$_M_cur_12 + 18446744073709551608];
  if (_6 != 0B)
    goto <bb 8>;
  else
    goto <bb 13>;
;;    succ:       8 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.22960 => _6
  # DEBUG D#102ptD.0 => &_6->vcD.19243
  # DEBUG thisD.22961 => D#102ptD.0
  # PT = nonlocal escaped 
  _13 = &MEM[(struct setD.18198 *)_6]._M_tD.18416;
  # DEBUG thisD.22962 => _13
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  __x_14 = MEM[(struct _Rb_tree_node_baseD.14415 * *)_6 + 16B];
  # DEBUG D#2ptD.0 => _13
  # DEBUG thisD.22930 => D#2ptD.0
  # DEBUG thisD.24014 => _13
  # DEBUG __xD.24015 => __x_14
  # DEBUG __xD.24015 => __x_14
  if (__x_14 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [100.0%]  (FALLTHRU)
  # .MEM_26 = PHI <.MEM_1(8), .MEM_23(18)>
  # DEBUG D#101ptD.0 => &MEM[(struct _Rb_treeD.18415 *)_13]._M_implD.18494
  # DEBUG thisD.22963 => D#101ptD.0
  # DEBUG thisD.22964 => D#101ptD.0
  # DEBUG thisD.22965 => D#101ptD.0
  # .MEM_21 = VDEF <.MEM_26>
  MEM[(struct  &)_6] ={v} {CLOBBER};
  # .MEM_7 = VDEF <.MEM_21>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_6);
  # VUSE <.MEM_7>
  pretmp_46 = MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569;
  # VUSE <.MEM_7>
  pretmp_43 = MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_firstD.19570;
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 10, next block 18, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_47 = PHI <__x_14(10), __x_25(12)>
  # .MEM_45 = PHI <.MEM_1(10), .MEM_34(12)>
  # DEBUG __xD.24015 => __x_47
  # VUSE <.MEM_45>
  # PT = nonlocal escaped 
  _24 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_47 + 24B];
  # DEBUG D#9ptD.0 => __x_47
  # DEBUG __xD.22923 => D#9ptD.0
  # .MEM_22 = VDEF <.MEM_45>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.18787 (_13, _24);
  # VUSE <.MEM_22>
  # PT = nonlocal escaped 
  __x_25 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_47 + 16B];
  # DEBUG D#10ptD.0 => __x_47
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.24016 => NULL
  # DEBUG D#100ptD.0 => _13
  # DEBUG __pD.24018 => __x_47
  # DEBUG thisD.24017 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_47
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.24020 => __x_47
  # DEBUG thisD.24019 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.24023 => __x_47
  # DEBUG __aD.24021 => D#50ptD.0
  # DEBUG __nD.24022 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.24026 => __x_47
  # DEBUG thisD.24024 => D#46ptD.0
  # DEBUG D.24025 => D#47ptD.0
  # .MEM_34 = VDEF <.MEM_22>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_47);
  # DEBUG __xD.24015 => __x_25
  # DEBUG __xD.24015 => __x_25
  if (__x_25 == 0B)
    goto <bb 18>;
  else
    goto <bb 12>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 11, next block 12, flags: (NEW)
;;    pred:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_23 = PHI <.MEM_34(11)>
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU)

;;   basic block 12, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 18, next block 13, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 1289, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       7 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2 = PHI <.MEM_1(7), .MEM_7(9)>
  # PT = nonlocal escaped 
  # prephitmp_48 = PHI <prephitmp_51(7), pretmp_46(9)>
  # PT = nonlocal escaped 
  # prephitmp_44 = PHI <_8(7), pretmp_43(9)>
  # DEBUG thisD.22966 => &_ZN6Credit4_allED.19257
  # DEBUG thisD.24027 => &_ZN6Credit4_allED.19257.cD.20262
  # DEBUG D#151ptD.0 => MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569
  if (prephitmp_44 != prephitmp_48)
    goto <bb 14>;
  else
    goto <bb 15>;
;;    succ:       14 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 1158, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  _28 = prephitmp_48 + 18446744073709551608;
  # .MEM_40 = VDEF <.MEM_2>
  MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569 = _28;
  # DEBUG D#66ptD.0 => MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569
  # DEBUG D#65ptD.0 => &MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670
  # DEBUG D#26ptD.0 => D#65ptD.0
  # DEBUG D#27ptD.0 => D#66ptD.0
  # DEBUG __aD.22707 => D#26ptD.0
  # DEBUG __pD.22706 => D#27ptD.0
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 131, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       13 [10.1%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.24028 => &_ZN6Credit4_allED.19257.cD.20262
  # DEBUG D#64ptD.0 => &MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219
  # DEBUG thisD.24030 => D#64ptD.0
  # DEBUG __pD.24029 => D#151ptD.0
  # DEBUG __sizeD.22687 => 8
  # DEBUG D#60ptD.0 => &D#64ptD.0->_M_implD.19670
  # DEBUG D#58ptD.0 => D#60ptD.0
  # DEBUG __pD.24034 => D#151ptD.0
  # DEBUG __aD.24032 => D#58ptD.0
  # DEBUG __nD.24033 => D#59ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#54ptD.0 => D#56ptD.0
  # DEBUG D#55ptD.0 => D#57ptD.0
  # DEBUG __pD.24037 => D#151ptD.0
  # DEBUG thisD.24035 => D#54ptD.0
  # DEBUG D.24036 => D#55ptD.0
  # .MEM_35 = VDEF <.MEM_2>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (prephitmp_48);
  # VUSE <.MEM_35>
  # PT = nonlocal escaped 
  _29 = MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_nodeD.19572;
  # PT = nonlocal escaped 
  _30 = _29 + 18446744073709551608;
  # DEBUG D#63ptD.0 => &MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675
  # DEBUG thisD.24039 => D#63ptD.0
  # DEBUG __new_nodeD.24038 => _30
  # .MEM_36 = VDEF <.MEM_35>
  MEM[(struct _Deque_iteratorD.19537 *)&_ZN6Credit4_allED.19257 + 48B]._M_nodeD.19572 = _30;
  # VUSE <.MEM_36>
  # PT = nonlocal escaped 
  _31 = MEM[(struct CreditD.18194 * * *)_29 + -8B];
  # .MEM_37 = VDEF <.MEM_36>
  MEM[(struct _Deque_iteratorD.19537 *)&_ZN6Credit4_allED.19257 + 48B]._M_firstD.19570 = _31;
  # DEBUG __sizeD.22490 => 8
  # PT = nonlocal escaped 
  _32 = _31 + 512;
  # .MEM_38 = VDEF <.MEM_37>
  MEM[(struct _Deque_iteratorD.19537 *)&_ZN6Credit4_allED.19257 + 48B]._M_lastD.19571 = _32;
  # PT = nonlocal escaped 
  _33 = &MEM[(voidD.45 *)_31 + 504B];
  # .MEM_39 = VDEF <.MEM_38>
  MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569 = _33;
  # DEBUG D#62ptD.0 => MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569
  # DEBUG D#61ptD.0 => &MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219
  # DEBUG thisD.22692 => D#61ptD.0
  # DEBUG D#27ptD.0 => D#62ptD.0
  # DEBUG __aD.22691 => D#26ptD.0
  # DEBUG __pD.22690 => D#27ptD.0
  # DEBUG D#25ptD.0 => D#27ptD.0
  # DEBUG D#24ptD.0 => D#26ptD.0
  # DEBUG D#22ptD.0 => D#24ptD.0
  # DEBUG D#23ptD.0 => D#25ptD.0
  # DEBUG thisD.22481 => D#22ptD.0
  # DEBUG __pD.22480 => D#23ptD.0
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 127, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       4 [9.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU)

;;   basic block 17, loop depth 0, count 0, freq 127, maybe hot
;;    prev block 16, next block 1, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_1>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function void Credit::Reset() (_ZN6Credit5ResetEv, funcdef_no=1086, decl_uid=19247, cgraph_uid=215, symbol_order=217)


Pass statistics:
----------------

void Credit::Reset() (struct CreditD.18194 * const thisD.20315)
{
  struct _Rb_tree_nodeD.18419 * __xD.24050;
  struct _Rep_typeD.18413 * _7;
  struct _Rb_tree_node_baseD.14415 * _9;
  struct _Rb_tree_node_baseD.14415 * _15;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#104ptD.0 => &this_1(D)->vcD.19243
  # DEBUG thisD.22976 => D#104ptD.0
  # PT = nonlocal 
  _7 = &MEM[(struct setD.18198 *)this_1(D)]._M_tD.18416;
  # DEBUG thisD.22977 => _7
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __x_8 = MEM[(struct _Rb_tree_node_baseD.14415 * *)this_1(D) + 16B];
  # DEBUG D#2ptD.0 => _7
  # DEBUG thisD.22970 => D#2ptD.0
  # DEBUG thisD.24049 => _7
  # DEBUG __xD.24050 => __x_8
  # DEBUG __xD.24050 => __x_8
  if (__x_8 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_14 = PHI <.MEM_2(D)(2), .MEM_18(5)>
  # DEBUG D#103ptD.0 => &MEM[(struct _Rb_treeD.18415 *)_7]._M_implD.18494
  # DEBUG thisD.22978 => D#103ptD.0
  # .MEM_10 = VDEF <.MEM_14>
  MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_headerD.18660._M_parentD.14420 = 0B;
  # PT = nonlocal 
  _9 = &MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_headerD.18660;
  # .MEM_11 = VDEF <.MEM_10>
  MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_headerD.18660._M_leftD.14421 = _9;
  # .MEM_12 = VDEF <.MEM_11>
  MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_headerD.18660._M_rightD.14422 = _9;
  # .MEM_13 = VDEF <.MEM_12>
  MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_node_countD.18661 = 0;
  # .MEM_4 = VDEF <.MEM_13>
  this_1(D)->headD.19244 = 0;
  # .MEM_5 = VDEF <.MEM_4>
  this_1(D)->tailD.19245 = 0;
  # .MEM_6 = VDEF <.MEM_5>
  this_1(D)->idD.19246 = -1;
  # VUSE <.MEM_6>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_21 = PHI <__x_8(4), __x_16(6)>
  # .MEM_22 = PHI <.MEM_2(D)(4), .MEM_18(6)>
  # DEBUG __xD.24050 => __x_21
  # VUSE <.MEM_22>
  # PT = nonlocal escaped 
  _15 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_21 + 24B];
  # DEBUG D#9ptD.0 => __x_21
  # DEBUG __xD.22923 => D#9ptD.0
  # .MEM_3 = VDEF <.MEM_22>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.18787 (_7, _15);
  # VUSE <.MEM_3>
  # PT = nonlocal escaped 
  __x_16 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_21 + 16B];
  # DEBUG D#10ptD.0 => __x_21
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.24051 => NULL
  # DEBUG D#100ptD.0 => _7
  # DEBUG __pD.24053 => __x_21
  # DEBUG thisD.24052 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_21
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.24055 => __x_21
  # DEBUG thisD.24054 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.24058 => __x_21
  # DEBUG __aD.24056 => D#50ptD.0
  # DEBUG __nD.24057 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.24061 => __x_21
  # DEBUG thisD.24059 => D#46ptD.0
  # DEBUG D.24060 => D#47ptD.0
  # .MEM_18 = VDEF <.MEM_3>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZdlPvD.2766 (__x_21);
  # DEBUG __xD.24050 => __x_16
  # DEBUG __xD.24050 => __x_16
  if (__x_16 == 0B)
    goto <bb 3>;
  else
    goto <bb 6>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 5, next block 1, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}



Updating SSA:
Registering new PHI nodes in block #5
Updating SSA information for statement operator delete (__x_21);
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7

DFA Statistics for void Credit::Reset()

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             37        296b
DEF operands                              5         40b
VUSE operands                            13        104b
VDEF operands                             9         72b
PHI nodes                                 4        416b
PHI arguments                             7        336b
---------------------------------------------------------
Total memory used by DFA/SSA data                 1264b
---------------------------------------------------------

Average number of arguments per PHI node: 1.8 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_23 -> { .MEM_18 }
Incremental SSA update started at block: 5
Number of blocks in CFG: 8
Number of blocks to update: 3 ( 38%)
Affected blocks: 5 6 7


Creating dr for MEM[(struct _Rb_tree_node_base * *)this_1(D) + 16B]
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_1(D) + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_21 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_21 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_21 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_21 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_21 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_21 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_21 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_21 + 24B]
Creating dr for MEM[(struct _Rb_tree_impl *)this_1(D)]._M_header._M_parent
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_impl *)this_1(D)]
	Access function 0: 64
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)this_1(D)]._M_header._M_left
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_impl *)this_1(D)]
	Access function 0: 128
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)this_1(D)]._M_header._M_right
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_impl *)this_1(D)]
	Access function 0: 192
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)this_1(D)]._M_node_count
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_impl *)this_1(D)]
	Access function 0: 320
Creating dr for this_1(D)->head
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: *this_1(D)
	Access function 0: 384
Creating dr for this_1(D)->tail
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 49
	step: 0
	aligned to: 256
	base_object: *this_1(D)
	Access function 0: 392
Creating dr for this_1(D)->id
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 52
	step: 0
	aligned to: 256
	base_object: *this_1(D)
	Access function 0: 416

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:11)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:9, LOOPS:1, CONDITIONS:2, STMTS:78)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG D#104 => &this_1(D)->vc
    # DEBUG this => D#104
    _7 = &MEM[(struct set *)this_1(D)]._M_t;
    # DEBUG this => _7
    # VUSE <.MEM_2(D)>
    __x_8 = MEM[(struct _Rb_tree_node_base * *)this_1(D) + 16B];
    # DEBUG D#2 => _7
    # DEBUG this => D#2
    # DEBUG this => _7
    # DEBUG __x => __x_8
    # DEBUG __x => __x_8
    if (__x_8 == 0B)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 bb_7 }, succs = {bb_8 })
  {
    <bb 3>:
    # .MEM_14 = PHI <.MEM_2(D)(2), .MEM_23(7)>

  }
  bb_8 (preds = {bb_3 }, succs = {bb_1 })
  {
    <bb 8>:
    # DEBUG D#103 => &MEM[(struct _Rb_tree *)_7]._M_impl
    # DEBUG this => D#103
    # .MEM_10 = VDEF <.MEM_14>
    MEM[(struct _Rb_tree_impl *)this_1(D)]._M_header._M_parent = 0B;
    _9 = &MEM[(struct _Rb_tree_impl *)this_1(D)]._M_header;
    # .MEM_11 = VDEF <.MEM_10>
    MEM[(struct _Rb_tree_impl *)this_1(D)]._M_header._M_left = _9;
    # .MEM_12 = VDEF <.MEM_11>
    MEM[(struct _Rb_tree_impl *)this_1(D)]._M_header._M_right = _9;
    # .MEM_13 = VDEF <.MEM_12>
    MEM[(struct _Rb_tree_impl *)this_1(D)]._M_node_count = 0;
    # .MEM_4 = VDEF <.MEM_13>
    this_1(D)->head = 0;
    # .MEM_5 = VDEF <.MEM_4>
    this_1(D)->tail = 0;
    # .MEM_6 = VDEF <.MEM_5>
    this_1(D)->id = -1;
    # VUSE <.MEM_6>
    return;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 })
  {
    <bb 4>:

  }
  bb_7 (preds = {bb_5 }, succs = {bb_3 })
  {
    <bb 7>:
    # .MEM_23 = PHI <.MEM_18(5)>
    goto <bb 3>;

  }
  loop_1 (header = 5, latch = 6, niter = )
  {
    bb_5 (preds = {bb_4 bb_6 }, succs = {bb_7 bb_6 })
    {
      <bb 5>:
      # __x_21 = PHI <__x_8(4), __x_16(6)>
      # .MEM_22 = PHI <.MEM_2(D)(4), .MEM_18(6)>
      # DEBUG __x => __x_21
      # VUSE <.MEM_22>
      _15 = MEM[(struct _Rb_tree_node_base * *)__x_21 + 24B];
      # DEBUG D#9 => __x_21
      # DEBUG __x => D#9
      # .MEM_3 = VDEF <.MEM_22>
      std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase (_7, _15);
      # VUSE <.MEM_3>
      __x_16 = MEM[(struct _Rb_tree_node_base * *)__x_21 + 16B];
      # DEBUG D#10 => __x_21
      # DEBUG __x => D#10
      # DEBUG __y => NULL
      # DEBUG D#100 => _7
      # DEBUG __p => __x_21
      # DEBUG this => D#100
      # DEBUG D#99 => D#100
      # DEBUG D#98 => D#100
      # DEBUG D#96 => D#98
      # DEBUG D#97 => __x_21
      # DEBUG this => D#96
      # DEBUG __p => D#97
      # DEBUG D#95 => D#96
      # DEBUG D#94 => D#97
      # DEBUG D#93 => D#97
      # DEBUG this => D#93
      # DEBUG D#92 => &D#94->_M_value_field
      # DEBUG __r => D#92
      # DEBUG D#91 => D#95
      # DEBUG this => D#91
      # DEBUG D#90 => D#91
      # DEBUG this => D#90
      # DEBUG this => NULL
      # DEBUG D.22855 => NULL
      # DEBUG this => NULL
      # DEBUG D#35 => D#92
      # DEBUG this => D#34
      # DEBUG __p => D#35
      # DEBUG this => NULL
      # DEBUG this => NULL
      # DEBUG D#53 => D#99
      # DEBUG __p => __x_21
      # DEBUG this => D#53
      # DEBUG D#52 => D#53
      # DEBUG this => D#52
      # DEBUG D#51 => 1
      # DEBUG __p => __x_21
      # DEBUG __a => D#50
      # DEBUG __n => D#51
      # DEBUG D#49 => D#51
      # DEBUG D#48 => D#50
      # DEBUG D#46 => D#48
      # DEBUG D#47 => D#49
      # DEBUG __p => __x_21
      # DEBUG this => D#46
      # DEBUG D.24060 => D#47
      # .MEM_18 = VDEF <.MEM_3>
      operator delete (__x_21);
      # DEBUG __x => __x_16
      # DEBUG __x => __x_16
      if (__x_16 == 0B)
        goto <bb 7>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_5 })
    {
      <bb 6>:
      goto <bb 5>;

    }
  }
}

Pass statistics:
----------------

void Credit::Reset() (struct CreditD.18194 * const thisD.20315)
{
  struct _Rb_tree_nodeD.18419 * __xD.24050;
  struct _Rep_typeD.18413 * _7;
  struct _Rb_tree_node_baseD.14415 * _9;
  struct _Rb_tree_node_baseD.14415 * _15;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#104ptD.0 => &this_1(D)->vcD.19243
  # DEBUG thisD.22976 => D#104ptD.0
  # PT = nonlocal 
  _7 = &MEM[(struct setD.18198 *)this_1(D)]._M_tD.18416;
  # DEBUG thisD.22977 => _7
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __x_8 = MEM[(struct _Rb_tree_node_baseD.14415 * *)this_1(D) + 16B];
  # DEBUG D#2ptD.0 => _7
  # DEBUG thisD.22970 => D#2ptD.0
  # DEBUG thisD.24049 => _7
  # DEBUG __xD.24050 => __x_8
  # DEBUG __xD.24050 => __x_8
  if (__x_8 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 8, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU)
  # .MEM_14 = PHI <.MEM_2(D)(2), .MEM_23(7)>
;;    succ:       8 [100.0%]  (FALLTHRU)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 3, next block 4, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU)
  # DEBUG D#103ptD.0 => &MEM[(struct _Rb_treeD.18415 *)_7]._M_implD.18494
  # DEBUG thisD.22978 => D#103ptD.0
  # .MEM_10 = VDEF <.MEM_14>
  MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_headerD.18660._M_parentD.14420 = 0B;
  # PT = nonlocal 
  _9 = &MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_headerD.18660;
  # .MEM_11 = VDEF <.MEM_10>
  MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_headerD.18660._M_leftD.14421 = _9;
  # .MEM_12 = VDEF <.MEM_11>
  MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_headerD.18660._M_rightD.14422 = _9;
  # .MEM_13 = VDEF <.MEM_12>
  MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_node_countD.18661 = 0;
  # .MEM_4 = VDEF <.MEM_13>
  this_1(D)->headD.19244 = 0;
  # .MEM_5 = VDEF <.MEM_4>
  this_1(D)->tailD.19245 = 0;
  # .MEM_6 = VDEF <.MEM_5>
  this_1(D)->idD.19246 = -1;
  # VUSE <.MEM_6>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 8, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 7, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_21 = PHI <__x_8(4), __x_16(6)>
  # .MEM_22 = PHI <.MEM_2(D)(4), .MEM_18(6)>
  # DEBUG __xD.24050 => __x_21
  # VUSE <.MEM_22>
  # PT = nonlocal escaped 
  _15 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_21 + 24B];
  # DEBUG D#9ptD.0 => __x_21
  # DEBUG __xD.22923 => D#9ptD.0
  # .MEM_3 = VDEF <.MEM_22>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.18787 (_7, _15);
  # VUSE <.MEM_3>
  # PT = nonlocal escaped 
  __x_16 = MEM[(struct _Rb_tree_node_baseD.14415 * *)__x_21 + 16B];
  # DEBUG D#10ptD.0 => __x_21
  # DEBUG __xD.22920 => D#10ptD.0
  # DEBUG __yD.24051 => NULL
  # DEBUG D#100ptD.0 => _7
  # DEBUG __pD.24053 => __x_21
  # DEBUG thisD.24052 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#100ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#96ptD.0 => D#98ptD.0
  # DEBUG D#97ptD.0 => __x_21
  # DEBUG thisD.22893 => D#96ptD.0
  # DEBUG __pD.22892 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG D#94ptD.0 => D#97ptD.0
  # DEBUG D#93ptD.0 => D#97ptD.0
  # DEBUG thisD.22878 => D#93ptD.0
  # DEBUG D#92ptD.0 => &D#94ptD.0->_M_value_fieldD.20465
  # DEBUG __rD.22607 => D#92ptD.0
  # DEBUG D#91ptD.0 => D#95ptD.0
  # DEBUG thisD.22870 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.22862 => D#90ptD.0
  # DEBUG thisD.22854 => NULL
  # DEBUG D.22855 => NULL
  # DEBUG thisD.22852 => NULL
  # DEBUG D#35ptD.0 => D#92ptD.0
  # DEBUG thisD.22869 => D#34ptD.0
  # DEBUG __pD.22868 => D#35ptD.0
  # DEBUG thisD.22879 => NULL
  # DEBUG thisD.22867 => NULL
  # DEBUG D#53ptD.0 => D#99ptD.0
  # DEBUG __pD.24055 => __x_21
  # DEBUG thisD.24054 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG thisD.22647 => D#52ptD.0
  # DEBUG D#51ptD.0 => 1
  # DEBUG __pD.24058 => __x_21
  # DEBUG __aD.24056 => D#50ptD.0
  # DEBUG __nD.24057 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG __pD.24061 => __x_21
  # DEBUG thisD.24059 => D#46ptD.0
  # DEBUG D.24060 => D#47ptD.0
  # .MEM_18 = VDEF <.MEM_3>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZdlPvD.2766 (__x_21);
  # DEBUG __xD.24050 => __x_16
  # DEBUG __xD.24050 => __x_16
  if (__x_16 == 0B)
    goto <bb 7>;
  else
    goto <bb 6>;
;;    succ:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 5, next block 6, flags: (NEW)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_23 = PHI <.MEM_18(5)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU)

;;   basic block 6, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 7, next block 1, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}



;; Function Credit::Credit() (_ZN6CreditC2Ev, funcdef_no=1084, decl_uid=19266, cgraph_uid=213, symbol_order=215)


Pass statistics:
----------------

Credit::Credit() (struct CreditD.18194 * const thisD.19267)
{
  struct _Rb_tree_nodeD.18419 * __xD.24080;
  struct _Rb_tree_node_baseD.14415 * _4;

;;   basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;   Invalid sum of incoming frequencies 900, should be 10000
;;    prev block 0, next block 1, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#105ptD.0 => &this_1(D)->vcD.19243
  # DEBUG thisD.22984 => D#105ptD.0
  # DEBUG D#45ptD.0 => &D#105ptD.0->_M_tD.18416
  # DEBUG thisD.22985 => D#45ptD.0
  # DEBUG D#44ptD.0 => &MEM[(struct _Rb_treeD.18415 *)D#45ptD.0]._M_implD.18494
  # DEBUG thisD.22986 => D#44ptD.0
  # DEBUG thisD.22593 => D#44ptD.0
  # DEBUG thisD.22590 => D#44ptD.0
  # .MEM_3 = VDEF <.MEM_2(D)>
  MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_headerD.18660._M_colorD.14419 = 0;
  # .MEM_6 = VDEF <.MEM_3>
  MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_headerD.18660._M_parentD.14420 = 0B;
  # .MEM_9 = VDEF <.MEM_6>
  MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_node_countD.18661 = 0;
  # DEBUG thisD.22987 => D#44ptD.0
  # PT = nonlocal 
  _4 = &MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_headerD.18660;
  # .MEM_10 = VDEF <.MEM_9>
  MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_headerD.18660._M_leftD.14421 = _4;
  # .MEM_11 = VDEF <.MEM_10>
  MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_headerD.18660._M_rightD.14422 = _4;
  # DEBUG thisD.22980 => this_1(D)
  # DEBUG D#104ptD.0 => &this_1(D)->vcD.19243
  # DEBUG thisD.22981 => D#104ptD.0
  # DEBUG D#157ptD.0 => &MEM[(struct setD.18198 *)this_1(D)]._M_tD.18416
  # DEBUG thisD.22982 => D#157ptD.0
  # DEBUG D#2ptD.0 => D#157ptD.0
  # DEBUG thisD.22970 => D#2ptD.0
  # DEBUG thisD.24079 => D#157ptD.0
  # DEBUG __xD.24080 => 0B
  # DEBUG __xD.24080 => 0B
  # DEBUG D#103ptD.0 => &MEM[(struct _Rb_treeD.18415 *)D#157ptD.0]._M_implD.18494
  # DEBUG thisD.22983 => D#103ptD.0
  # .MEM_17 = VDEF <.MEM_11>
  this_1(D)->headD.19244 = 0;
  # .MEM_18 = VDEF <.MEM_17>
  this_1(D)->tailD.19245 = 0;
  # .MEM_19 = VDEF <.MEM_18>
  this_1(D)->idD.19246 = -1;
  # VUSE <.MEM_19>
  return;
;;    succ:       EXIT [100.0%] 

}


Creating dr for MEM[(struct _Rb_tree_impl *)this_1(D)]._M_header._M_color
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_impl *)this_1(D)]
	Access function 0: 0
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)this_1(D)]._M_header._M_parent
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_impl *)this_1(D)]
	Access function 0: 64
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)this_1(D)]._M_node_count
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_impl *)this_1(D)]
	Access function 0: 320
Creating dr for MEM[(struct _Rb_tree_impl *)this_1(D)]._M_header._M_left
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_impl *)this_1(D)]
	Access function 0: 128
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)this_1(D)]._M_header._M_right
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_impl *)this_1(D)]
	Access function 0: 192
	Access function 1: 64
Creating dr for this_1(D)->head
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: *this_1(D)
	Access function 0: 384
Creating dr for this_1(D)->tail
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 49
	step: 0
	aligned to: 256
	base_object: *this_1(D)
	Access function 0: 392
Creating dr for this_1(D)->id
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 52
	step: 0
	aligned to: 256
	base_object: *this_1(D)
	Access function 0: 416

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:31)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:3, LOOPS:0, CONDITIONS:0, STMTS:31)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_1 })
  {
    <bb 2>:
    # DEBUG D#105 => &this_1(D)->vc
    # DEBUG this => D#105
    # DEBUG D#45 => &D#105->_M_t
    # DEBUG this => D#45
    # DEBUG D#44 => &MEM[(struct _Rb_tree *)D#45]._M_impl
    # DEBUG this => D#44
    # DEBUG this => D#44
    # DEBUG this => D#44
    # .MEM_3 = VDEF <.MEM_2(D)>
    MEM[(struct _Rb_tree_impl *)this_1(D)]._M_header._M_color = 0;
    # .MEM_6 = VDEF <.MEM_3>
    MEM[(struct _Rb_tree_impl *)this_1(D)]._M_header._M_parent = 0B;
    # .MEM_9 = VDEF <.MEM_6>
    MEM[(struct _Rb_tree_impl *)this_1(D)]._M_node_count = 0;
    # DEBUG this => D#44
    _4 = &MEM[(struct _Rb_tree_impl *)this_1(D)]._M_header;
    # .MEM_10 = VDEF <.MEM_9>
    MEM[(struct _Rb_tree_impl *)this_1(D)]._M_header._M_left = _4;
    # .MEM_11 = VDEF <.MEM_10>
    MEM[(struct _Rb_tree_impl *)this_1(D)]._M_header._M_right = _4;
    # DEBUG this => this_1(D)
    # DEBUG D#104 => &this_1(D)->vc
    # DEBUG this => D#104
    # DEBUG D#157 => &MEM[(struct set *)this_1(D)]._M_t
    # DEBUG this => D#157
    # DEBUG D#2 => D#157
    # DEBUG this => D#2
    # DEBUG this => D#157
    # DEBUG __x => 0B
    # DEBUG __x => 0B
    # DEBUG D#103 => &MEM[(struct _Rb_tree *)D#157]._M_impl
    # DEBUG this => D#103
    # .MEM_17 = VDEF <.MEM_11>
    this_1(D)->head = 0;
    # .MEM_18 = VDEF <.MEM_17>
    this_1(D)->tail = 0;
    # .MEM_19 = VDEF <.MEM_18>
    this_1(D)->id = -1;
    # VUSE <.MEM_19>
    return;

  }
}

Pass statistics:
----------------

Credit::Credit() (struct CreditD.18194 * const thisD.19267)
{
  struct _Rb_tree_nodeD.18419 * __xD.24080;
  struct _Rb_tree_node_baseD.14415 * _4;

;;   basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;   Invalid sum of incoming frequencies 900, should be 10000
;;    prev block 0, next block 1, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#105ptD.0 => &this_1(D)->vcD.19243
  # DEBUG thisD.22984 => D#105ptD.0
  # DEBUG D#45ptD.0 => &D#105ptD.0->_M_tD.18416
  # DEBUG thisD.22985 => D#45ptD.0
  # DEBUG D#44ptD.0 => &MEM[(struct _Rb_treeD.18415 *)D#45ptD.0]._M_implD.18494
  # DEBUG thisD.22986 => D#44ptD.0
  # DEBUG thisD.22593 => D#44ptD.0
  # DEBUG thisD.22590 => D#44ptD.0
  # .MEM_3 = VDEF <.MEM_2(D)>
  MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_headerD.18660._M_colorD.14419 = 0;
  # .MEM_6 = VDEF <.MEM_3>
  MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_headerD.18660._M_parentD.14420 = 0B;
  # .MEM_9 = VDEF <.MEM_6>
  MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_node_countD.18661 = 0;
  # DEBUG thisD.22987 => D#44ptD.0
  # PT = nonlocal 
  _4 = &MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_headerD.18660;
  # .MEM_10 = VDEF <.MEM_9>
  MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_headerD.18660._M_leftD.14421 = _4;
  # .MEM_11 = VDEF <.MEM_10>
  MEM[(struct _Rb_tree_implD.18506 *)this_1(D)]._M_headerD.18660._M_rightD.14422 = _4;
  # DEBUG thisD.22980 => this_1(D)
  # DEBUG D#104ptD.0 => &this_1(D)->vcD.19243
  # DEBUG thisD.22981 => D#104ptD.0
  # DEBUG D#157ptD.0 => &MEM[(struct setD.18198 *)this_1(D)]._M_tD.18416
  # DEBUG thisD.22982 => D#157ptD.0
  # DEBUG D#2ptD.0 => D#157ptD.0
  # DEBUG thisD.22970 => D#2ptD.0
  # DEBUG thisD.24079 => D#157ptD.0
  # DEBUG __xD.24080 => 0B
  # DEBUG __xD.24080 => 0B
  # DEBUG D#103ptD.0 => &MEM[(struct _Rb_treeD.18415 *)D#157ptD.0]._M_implD.18494
  # DEBUG thisD.22983 => D#103ptD.0
  # .MEM_17 = VDEF <.MEM_11>
  this_1(D)->headD.19244 = 0;
  # .MEM_18 = VDEF <.MEM_17>
  this_1(D)->tailD.19245 = 0;
  # .MEM_19 = VDEF <.MEM_18>
  this_1(D)->idD.19246 = -1;
  # VUSE <.MEM_19>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function std::_Deque_base<_Tp, _Alloc>::~_Deque_base() [with _Tp = Credit*; _Alloc = std::allocator<Credit*>] (_ZNSt11_Deque_baseIP6CreditSaIS1_EED2Ev, funcdef_no=1127, decl_uid=19725, cgraph_uid=256, symbol_order=258)


Pass statistics:
----------------

std::_Deque_base<_Tp, _Alloc>::~_Deque_base() [with _Tp = Credit*; _Alloc = std::allocator<Credit*>] (struct _Deque_baseD.19304 * const thisD.19726)
{
  struct CreditD.18194 * * * __nstartD.22802;
  struct CreditD.18194 * * * _4;
  struct CreditD.18194 * * * _5;
  struct CreditD.18194 * * * _6;
  struct CreditD.18194 * * _13;
  struct CreditD.18194 * * * pretmp_16;
  struct CreditD.18194 * * * prephitmp_17;

;;   basic block 2, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _4 = this_3(D)->_M_implD.19670._M_mapD.19672;
  if (_4 != 0B)
    goto <bb 3>;
  else
    goto <bb 9>;
;;    succ:       3 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _5 = this_3(D)->_M_implD.19670._M_finishD.19675._M_nodeD.19572;
  # PT = nonlocal escaped 
  _6 = _5 + 8;
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __nstart_7 = this_3(D)->_M_implD.19670._M_startD.19674._M_nodeD.19572;
  # DEBUG D#69ptD.0 => this_3(D)
  # DEBUG __nstartD.22802 => __nstart_7
  # DEBUG __nfinishD.22803 => _6
  # DEBUG thisD.22804 => D#69ptD.0
  # DEBUG __nD.22805 => __nstart_7
  if (_6 <= __nstart_7)
    goto <bb 8>;
  else
    goto <bb 4>;
;;    succ:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __nstart_20 = PHI <__nstart_7(4), __nstart_14(6)>
  # .MEM_19 = PHI <.MEM_2(D)(4), .MEM_8(6)>
  # DEBUG __nD.22805 => __nstart_20
  # VUSE <.MEM_19>
  # PT = nonlocal escaped 
  _13 = *__nstart_20;
  # DEBUG thisD.22807 => D#67ptD.0
  # DEBUG __pD.22806 => _13
  # DEBUG __sizeD.22687 => 8
  # DEBUG D#60ptD.0 => &D#68ptD.0->_M_implD.19670
  # DEBUG D#58ptD.0 => D#60ptD.0
  # DEBUG __pD.22811 => _13
  # DEBUG __aD.22809 => D#58ptD.0
  # DEBUG __nD.22810 => D#59ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#54ptD.0 => D#56ptD.0
  # DEBUG D#55ptD.0 => D#57ptD.0
  # DEBUG __pD.22814 => _13
  # DEBUG thisD.22812 => D#54ptD.0
  # DEBUG D.22813 => D#55ptD.0
  # .MEM_8 = VDEF <.MEM_19>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_13);
  # PT = nonlocal escaped 
  __nstart_14 = __nstart_20 + 8;
  # DEBUG __nD.22805 => __nstart_14
  # DEBUG __nD.22805 => __nstart_14
  if (_6 <= __nstart_14)
    goto <bb 7>;
  else
    goto <bb 6>;
;;    succ:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8>
  pretmp_16 = this_3(D)->_M_implD.19670._M_mapD.19672;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_23 = PHI <.MEM_8(7), .MEM_2(D)(3)>
  # PT = nonlocal escaped 
  # prephitmp_17 = PHI <pretmp_16(7), _4(3)>
  # DEBUG D#76ptD.0 => this_3(D)->_M_implD.19670._M_map_sizeD.19673
  # DEBUG D#158ptD.0 => this_3(D)->_M_implD.19670._M_mapD.19672
  # DEBUG D#74ptD.0 => this_3(D)
  # DEBUG D#75ptD.0 => D#76ptD.0
  # DEBUG __pD.22792 => D#158ptD.0
  # DEBUG thisD.22794 => D#74ptD.0
  # DEBUG __nD.22793 => D#75ptD.0
  # DEBUG D#73ptD.0 => D#75ptD.0
  # DEBUG D#72ptD.0 => D#74ptD.0
  # DEBUG D#71ptD.0 => D#72ptD.0
  # DEBUG thisD.22772 => D#71ptD.0
  # DEBUG D#70ptD.0 => D#71ptD.0
  # DEBUG thisD.22760 => D#70ptD.0
  # DEBUG thisD.22752 => NULL
  # DEBUG D.22753 => NULL
  # DEBUG thisD.22750 => NULL
  # DEBUG D#42ptD.0 => &__map_allocD.22795
  # DEBUG D#43ptD.0 => D#73ptD.0
  # DEBUG __pD.22798 => D#158ptD.0
  # DEBUG __aD.22796 => D#42ptD.0
  # DEBUG __nD.22797 => D#43ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG __pD.22801 => D#158ptD.0
  # DEBUG thisD.22799 => D#38ptD.0
  # DEBUG D.22800 => D#39ptD.0
  # .MEM_15 = VDEF <.MEM_23>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (prephitmp_17);
  # DEBUG thisD.22786 => &__map_allocD.22795
  # DEBUG thisD.22765 => &__map_allocD.22795
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 8, next block 1, flags: (NEW, REACHABLE)
;;    pred:       2 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_2(D)(2), .MEM_15(8)>
  # DEBUG D#77ptD.0 => &this_3(D)->_M_implD.19670
  # DEBUG thisD.22815 => D#77ptD.0
  # DEBUG thisD.22816 => D#77ptD.0
  # DEBUG thisD.22817 => D#77ptD.0
  # .MEM_12 = VDEF <.MEM_1>
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  # VUSE <.MEM_12>
  return;
;;    succ:       EXIT [100.0%] 

}


Creating dr for this_3(D)->_M_impl._M_map
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 0
	Access function 1: 0
Creating dr for this_3(D)->_M_impl._M_finish._M_node
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 192
	Access function 1: 384
	Access function 2: 0
Creating dr for this_3(D)->_M_impl._M_start._M_node
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 192
	Access function 1: 128
	Access function 2: 0
Creating dr for *__nstart_20
analyze_innermost: success.
	base_address: __nstart_7
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_7
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_20
analyze_innermost: success.
	base_address: __nstart_7
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_7
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_20
analyze_innermost: success.
	base_address: __nstart_7
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_7
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_20
analyze_innermost: success.
	base_address: __nstart_7
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_7
	Access function 0: {0B, +, 8}_1
Analyzing # of iterations of loop 1
  exit condition [__nstart_7 + 8, + , 8](no_overflow) < _5 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _5 - (unsigned long) __nstart_7) + 7) / 8, bounded by 2305843009213693951
Analyzing # of iterations of loop 1
  exit condition [__nstart_7 + 8, + , 8](no_overflow) < _5 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _5 - (unsigned long) __nstart_7) + 7) / 8, bounded by 2305843009213693951
Creating dr for *__nstart_20
analyze_innermost: success.
	base_address: __nstart_7
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_7
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_20
analyze_innermost: success.
	base_address: __nstart_7
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_7
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_20
analyze_innermost: success.
	base_address: __nstart_7
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_7
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_20
analyze_innermost: success.
	base_address: __nstart_7
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_7
	Access function 0: {0B, +, 8}_1
Analyzing # of iterations of loop 1
  exit condition [__nstart_7 + 8, + , 8](no_overflow) < _5 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _5 - (unsigned long) __nstart_7) + 7) / 8, bounded by 2305843009213693951
Creating dr for this_3(D)->_M_impl._M_map
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 0
	Access function 1: 0

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:11, LOOPS:1, CONDITIONS:3, STMTS:71)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_9 })
  {
    <bb 2>:
    # VUSE <.MEM_2(D)>
    _4 = this_3(D)->_M_impl._M_map;
    if (_4 != 0B)
      goto <bb 3>;
    else
      goto <bb 9>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_8 bb_4 })
  {
    <bb 3>:
    # VUSE <.MEM_2(D)>
    _5 = this_3(D)->_M_impl._M_finish._M_node;
    _6 = _5 + 8;
    # VUSE <.MEM_2(D)>
    __nstart_7 = this_3(D)->_M_impl._M_start._M_node;
    # DEBUG D#69 => this_3(D)
    # DEBUG __nstart => __nstart_7
    # DEBUG __nfinish => _6
    # DEBUG this => D#69
    # DEBUG __n => __nstart_7
    if (_6 <= __nstart_7)
      goto <bb 8>;
    else
      goto <bb 4>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_5 })
  {
    <bb 4>:

  }
  bb_7 (preds = {bb_5 }, succs = {bb_10 })
  {
    <bb 7>:

  }
  bb_10 (preds = {bb_7 }, succs = {bb_8 })
  {
    <bb 10>:
    # VUSE <.MEM_8>
    pretmp_16 = this_3(D)->_M_impl._M_map;

  }
  bb_8 (preds = {bb_10 bb_3 }, succs = {bb_9 })
  {
    <bb 8>:
    # .MEM_23 = PHI <.MEM_8(10), .MEM_2(D)(3)>
    # prephitmp_17 = PHI <pretmp_16(10), _4(3)>
    # DEBUG D#76 => this_3(D)->_M_impl._M_map_size
    # DEBUG D#158 => this_3(D)->_M_impl._M_map
    # DEBUG D#74 => this_3(D)
    # DEBUG D#75 => D#76
    # DEBUG __p => D#158
    # DEBUG this => D#74
    # DEBUG __n => D#75
    # DEBUG D#73 => D#75
    # DEBUG D#72 => D#74
    # DEBUG D#71 => D#72
    # DEBUG this => D#71
    # DEBUG D#70 => D#71
    # DEBUG this => D#70
    # DEBUG this => NULL
    # DEBUG D.22753 => NULL
    # DEBUG this => NULL
    # DEBUG D#42 => &__map_alloc
    # DEBUG D#43 => D#73
    # DEBUG __p => D#158
    # DEBUG __a => D#42
    # DEBUG __n => D#43
    # DEBUG D#41 => D#43
    # DEBUG D#40 => D#42
    # DEBUG D#38 => D#40
    # DEBUG D#39 => D#41
    # DEBUG __p => D#158
    # DEBUG this => D#38
    # DEBUG D.22800 => D#39
    # .MEM_15 = VDEF <.MEM_23>
    operator delete (prephitmp_17);
    # DEBUG this => &__map_alloc
    # DEBUG this => &__map_alloc

  }
  bb_9 (preds = {bb_2 bb_8 }, succs = {bb_1 })
  {
    <bb 9>:
    # .MEM_1 = PHI <.MEM_2(D)(2), .MEM_15(8)>
    # DEBUG D#77 => &this_3(D)->_M_impl
    # DEBUG this => D#77
    # DEBUG this => D#77
    # DEBUG this => D#77
    # .MEM_12 = VDEF <.MEM_1>
    MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
    # VUSE <.MEM_12>
    return;

  }
  loop_1 (header = 5, latch = 6, niter = (((unsigned long) _5 - (unsigned long) __nstart_7) + 7) / 8, upper_bound = 2305843009213693951)
  {
    bb_5 (preds = {bb_4 bb_6 }, succs = {bb_7 bb_6 })
    {
      <bb 5>:
      # __nstart_20 = PHI <__nstart_7(4), __nstart_14(6)>
      # .MEM_19 = PHI <.MEM_2(D)(4), .MEM_8(6)>
      # DEBUG __n => __nstart_20
      # VUSE <.MEM_19>
      _13 = *__nstart_20;
      # DEBUG this => D#67
      # DEBUG __p => _13
      # DEBUG __size => 8
      # DEBUG D#60 => &D#68->_M_impl
      # DEBUG D#58 => D#60
      # DEBUG __p => _13
      # DEBUG __a => D#58
      # DEBUG __n => D#59
      # DEBUG D#57 => D#59
      # DEBUG D#56 => D#58
      # DEBUG D#54 => D#56
      # DEBUG D#55 => D#57
      # DEBUG __p => _13
      # DEBUG this => D#54
      # DEBUG D.22813 => D#55
      # .MEM_8 = VDEF <.MEM_19>
      operator delete (_13);
      __nstart_14 = __nstart_20 + 8;
      # DEBUG __n => __nstart_14
      # DEBUG __n => __nstart_14
      if (_6 <= __nstart_14)
        goto <bb 7>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_5 })
    {
      <bb 6>:
      goto <bb 5>;

    }
  }
}

Pass statistics:
----------------

std::_Deque_base<_Tp, _Alloc>::~_Deque_base() [with _Tp = Credit*; _Alloc = std::allocator<Credit*>] (struct _Deque_baseD.19304 * const thisD.19726)
{
  struct CreditD.18194 * * * __nstartD.22802;
  struct CreditD.18194 * * * _4;
  struct CreditD.18194 * * * _5;
  struct CreditD.18194 * * * _6;
  struct CreditD.18194 * * _13;
  struct CreditD.18194 * * * pretmp_16;
  struct CreditD.18194 * * * prephitmp_17;

;;   basic block 2, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _4 = this_3(D)->_M_implD.19670._M_mapD.19672;
  if (_4 != 0B)
    goto <bb 3>;
  else
    goto <bb 9>;
;;    succ:       3 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _5 = this_3(D)->_M_implD.19670._M_finishD.19675._M_nodeD.19572;
  # PT = nonlocal escaped 
  _6 = _5 + 8;
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __nstart_7 = this_3(D)->_M_implD.19670._M_startD.19674._M_nodeD.19572;
  # DEBUG D#69ptD.0 => this_3(D)
  # DEBUG __nstartD.22802 => __nstart_7
  # DEBUG __nfinishD.22803 => _6
  # DEBUG thisD.22804 => D#69ptD.0
  # DEBUG __nD.22805 => __nstart_7
  if (_6 <= __nstart_7)
    goto <bb 8>;
  else
    goto <bb 4>;
;;    succ:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __nstart_20 = PHI <__nstart_7(4), __nstart_14(6)>
  # .MEM_19 = PHI <.MEM_2(D)(4), .MEM_8(6)>
  # DEBUG __nD.22805 => __nstart_20
  # VUSE <.MEM_19>
  # PT = nonlocal escaped 
  _13 = *__nstart_20;
  # DEBUG thisD.22807 => D#67ptD.0
  # DEBUG __pD.22806 => _13
  # DEBUG __sizeD.22687 => 8
  # DEBUG D#60ptD.0 => &D#68ptD.0->_M_implD.19670
  # DEBUG D#58ptD.0 => D#60ptD.0
  # DEBUG __pD.22811 => _13
  # DEBUG __aD.22809 => D#58ptD.0
  # DEBUG __nD.22810 => D#59ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#54ptD.0 => D#56ptD.0
  # DEBUG D#55ptD.0 => D#57ptD.0
  # DEBUG __pD.22814 => _13
  # DEBUG thisD.22812 => D#54ptD.0
  # DEBUG D.22813 => D#55ptD.0
  # .MEM_8 = VDEF <.MEM_19>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_13);
  # PT = nonlocal escaped 
  __nstart_14 = __nstart_20 + 8;
  # DEBUG __nD.22805 => __nstart_14
  # DEBUG __nD.22805 => __nstart_14
  if (_6 <= __nstart_14)
    goto <bb 7>;
  else
    goto <bb 6>;
;;    succ:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 6, next block 10, flags: (NEW)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       10 [100.0%]  (FALLTHRU)

;;   basic block 10, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 7, next block 8, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_8>
  pretmp_16 = this_3(D)->_M_implD.19670._M_mapD.19672;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 9, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_23 = PHI <.MEM_8(10), .MEM_2(D)(3)>
  # PT = nonlocal escaped 
  # prephitmp_17 = PHI <pretmp_16(10), _4(3)>
  # DEBUG D#76ptD.0 => this_3(D)->_M_implD.19670._M_map_sizeD.19673
  # DEBUG D#158ptD.0 => this_3(D)->_M_implD.19670._M_mapD.19672
  # DEBUG D#74ptD.0 => this_3(D)
  # DEBUG D#75ptD.0 => D#76ptD.0
  # DEBUG __pD.22792 => D#158ptD.0
  # DEBUG thisD.22794 => D#74ptD.0
  # DEBUG __nD.22793 => D#75ptD.0
  # DEBUG D#73ptD.0 => D#75ptD.0
  # DEBUG D#72ptD.0 => D#74ptD.0
  # DEBUG D#71ptD.0 => D#72ptD.0
  # DEBUG thisD.22772 => D#71ptD.0
  # DEBUG D#70ptD.0 => D#71ptD.0
  # DEBUG thisD.22760 => D#70ptD.0
  # DEBUG thisD.22752 => NULL
  # DEBUG D.22753 => NULL
  # DEBUG thisD.22750 => NULL
  # DEBUG D#42ptD.0 => &__map_allocD.22795
  # DEBUG D#43ptD.0 => D#73ptD.0
  # DEBUG __pD.22798 => D#158ptD.0
  # DEBUG __aD.22796 => D#42ptD.0
  # DEBUG __nD.22797 => D#43ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG __pD.22801 => D#158ptD.0
  # DEBUG thisD.22799 => D#38ptD.0
  # DEBUG D.22800 => D#39ptD.0
  # .MEM_15 = VDEF <.MEM_23>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (prephitmp_17);
  # DEBUG thisD.22786 => &__map_allocD.22795
  # DEBUG thisD.22765 => &__map_allocD.22795
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 8, next block 1, flags: (NEW, REACHABLE)
;;    pred:       2 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_2(D)(2), .MEM_15(8)>
  # DEBUG D#77ptD.0 => &this_3(D)->_M_implD.19670
  # DEBUG thisD.22815 => D#77ptD.0
  # DEBUG thisD.22816 => D#77ptD.0
  # DEBUG thisD.22817 => D#77ptD.0
  # .MEM_12 = VDEF <.MEM_1>
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  # VUSE <.MEM_12>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function void std::_Deque_base<_Tp, _Alloc>::_M_initialize_map(std::size_t) [with _Tp = Credit*; _Alloc = std::allocator<Credit*>; std::size_t = long unsigned int] (_ZNSt11_Deque_baseIP6CreditSaIS1_EE17_M_initialize_mapEm, funcdef_no=1160, decl_uid=19657, cgraph_uid=289, symbol_order=291)


Pass statistics:
----------------

void std::_Deque_base<_Tp, _Alloc>::_M_initialize_map(std::size_t) [with _Tp = Credit*; _Alloc = std::allocator<Credit*>; std::size_t = long unsigned int] (struct _Deque_baseD.19304 * const thisD.19658, size_tD.2818 __num_elementsD.19659)
Eh tree:
   5 must_not_throw
   4 cleanup land:{2,<L2>}
   3 try land:{1,<L0>} catch:{}
     8 must_not_throw
     7 cleanup land:{4,<L5>}
     6 try land:{3,<L3>} catch:{}
{
  struct CreditD.18194 * * * __nstartD.24105;
  struct CreditD.18194 * * * __nfinishD.20722;
  struct CreditD.18194 * * * __nstartD.20721;
  const size_tD.2818 __num_nodesD.20718;
  const long unsigned intD.14 D.20719;
  const long unsigned intD.14 D.20720;
  long unsigned intD.14 _3;
  struct CreditD.18194 * * * _8;
  long unsigned intD.14 _15;
  long unsigned intD.14 _16;
  long unsigned intD.14 _17;
  long unsigned intD.14 _18;
  long unsigned intD.14 _20;
  struct CreditD.18194 * * * _23;
  struct CreditD.18194 * * _24;
  long unsigned intD.14 _26;
  long unsigned intD.14 _27;
  long unsigned intD.14 _28;
  struct CreditD.18194 * * _29;
  voidD.45 * _31;
  struct CreditD.18194 * * * _33;
  struct CreditD.18194 * * _40;
  struct CreditD.18194 * * _41;
  struct CreditD.18194 * * _42;
  struct CreditD.18194 * * _52;
  voidD.45 * _54;
  struct CreditD.18194 * * _56;
  long unsigned intD.14 _65;

;;   basic block 2, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __sizeD.23180 => 8
  # RANGE [0, 288230376151711743] NONZERO 288230376151711743
  _3 = __num_elements_2(D) >> 6;
  # RANGE [1, 288230376151711744] NONZERO 576460752303423487
  __num_nodes_4 = _3 + 1;
  # DEBUG __num_nodesD.20718 => __num_nodes_4
  # RANGE [3, 288230376151711746] NONZERO 576460752303423487
  _5 = _3 + 3;
  # DEBUG __aD.23177 => &D.20719
  # DEBUG __bD.23178 => &D.20720
  # RANGE [8, 288230376151711746] NONZERO 576460752303423487
  _65 = MAX_EXPR <_5, 8>;
  # .MEM_11 = VDEF <.MEM_1(D)>
  this_10(D)->_M_implD.19670._M_map_sizeD.19673 = _65;
  # DEBUG D#113ptD.0 => this_10(D)
  # DEBUG __nD.23168 => D#160ptD.0
  # DEBUG thisD.23169 => D#113ptD.0
  # DEBUG D#112ptD.0 => D#113ptD.0
  # DEBUG D#71ptD.0 => D#112ptD.0
  # DEBUG thisD.23030 => D#71ptD.0
  # DEBUG D#70ptD.0 => D#71ptD.0
  # DEBUG thisD.22760 => D#70ptD.0
  # DEBUG thisD.22752 => NULL
  # DEBUG D.22753 => NULL
  # DEBUG thisD.22750 => NULL
  # DEBUG D#111ptD.0 => &__map_allocD.23170
  # DEBUG __nD.23172 => D#160ptD.0
  # DEBUG __aD.23171 => D#111ptD.0
  # DEBUG D#110ptD.0 => D#111ptD.0
  # DEBUG D#108ptD.0 => D#110ptD.0
  # DEBUG D#109ptD.0 => 0B
  # DEBUG __nD.23175 => D#160ptD.0
  # DEBUG thisD.23173 => D#108ptD.0
  # DEBUG D.23174 => D#109ptD.0
  # DEBUG D#107ptD.0 => D#108ptD.0
  # DEBUG D#106ptD.0 => D#107ptD.0
  # DEBUG thisD.22995 => D#106ptD.0
  # RANGE [64, 2305843009213693968] NONZERO 4611686018427387896
  _26 = _65 * 8;
  # .MEM_34 = VDEF <.MEM_11>
  # PT = { D.24135 } (escaped heap)
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  _8 = _ZnwmD.2764 (_26);
  # DEBUG thisD.23043 => &__map_allocD.23170
  # DEBUG thisD.23032 => &__map_allocD.23170
  # .MEM_14 = VDEF <.MEM_34>
  this_10(D)->_M_implD.19670._M_mapD.19672 = _8;
  # VUSE <.MEM_14>
  _15 = this_10(D)->_M_implD.19670._M_map_sizeD.19673;
  # RANGE [0, 18446744073709551615]
  _16 = _15 - __num_nodes_4;
  # RANGE [0, 9223372036854775807] NONZERO 9223372036854775807
  _17 = _16 >> 1;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _18 = _17 * 8;
  # PT = { D.24135 } (escaped heap)
  __nstart_19 = _8 + _18;
  # DEBUG __nstartD.20721 => __nstart_19
  # RANGE [8, 2305843009213693952] NONZERO 4611686018427387896
  _20 = __num_nodes_4 * 8;
  # PT = { D.24135 } (escaped heap)
  __nfinish_21 = __nstart_19 + _20;
  # DEBUG __nfinishD.20722 => __nfinish_21
  # DEBUG D#125ptD.0 => this_10(D)
  # DEBUG __nstartD.24105 => __nstart_19
  # DEBUG __nfinishD.24106 => __nfinish_21
  # DEBUG thisD.24107 => D#125ptD.0
  # DEBUG __curD.24108 => __nstart_19
  if (__nstart_19 >= __nfinish_21)
    goto <bb 14>;
  else
    goto <bb 3>;
;;    succ:       14 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 430, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 9550, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_71 = PHI <.MEM_14(3), .MEM_60(6)>
  # PT = { D.24135 } (escaped heap)
  # __nstart_75 = PHI <__nstart_19(3), __nstart_53(6)>
  # DEBUG __curD.24108 => __nstart_75
  # DEBUG D#122ptD.0 => D#123ptD.0
  # DEBUG thisD.24122 => D#122ptD.0
  # DEBUG D#121ptD.0 => D#122ptD.0
  # DEBUG __sizeD.23103 => 8
  # DEBUG D#120ptD.0 => &D#121ptD.0->_M_implD.19670
  # DEBUG D#119ptD.0 => D#120ptD.0
  # DEBUG __nD.24125 => NULL
  # DEBUG __aD.24124 => D#119ptD.0
  # DEBUG D#118ptD.0 => D#119ptD.0
  # DEBUG D#116ptD.0 => D#118ptD.0
  # DEBUG D#117ptD.0 => 0B
  # DEBUG __nD.24128 => NULL
  # DEBUG thisD.24126 => D#116ptD.0
  # DEBUG D.24127 => D#117ptD.0
  # DEBUG D#115ptD.0 => D#116ptD.0
  # DEBUG D#114ptD.0 => D#115ptD.0
  # DEBUG thisD.23060 => D#114ptD.0
  [LP 3] # .MEM_59 = VDEF <.MEM_71>
  # PT = { D.24136 } (escaped heap)
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  _52 = _ZnwmD.2764 (512);
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 (EH,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9550, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_60 = VDEF <.MEM_59>
  *__nstart_75 = _52;
  # PT = { D.24135 } (escaped heap)
  __nstart_53 = __nstart_75 + 8;
  # DEBUG __curD.24108 => __nstart_53
  # DEBUG __curD.24108 => __nstart_53
  if (__nfinish_21 <= __nstart_53)
    goto <bb 14>;
  else
    goto <bb 6>;
;;    succ:       14 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9120, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       4 (EH,EXECUTABLE)
  # PT = { D.24135 } (escaped heap)
  # __nstart_13 = PHI <__nstart_75(4)>
<L3>: [LP 3]
  # VUSE <.MEM_59>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _54 = __builtin_eh_pointerD.2738 (6);
  # .MEM_61 = VDEF <.MEM_59>
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  __cxa_begin_catchD.20724 (_54);
  # DEBUG D#69ptD.0 => D#124ptD.0
  # DEBUG __nstartD.24111 => __nstart_19
  # DEBUG __nfinishD.24110 => __nstart_13
  # DEBUG thisD.24109 => D#69ptD.0
  # DEBUG __nD.24112 => __nstart_19
  if (__nstart_19 >= __nstart_13)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_55 = PHI <.MEM_61(7), .MEM_74(11)>
  [LP 4] # .MEM_63 = VDEF <.MEM_55>
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  __cxa_rethrowD.20725 ();
;;    succ:       13 (EH,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       7 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = { D.24135 } (escaped heap)
  # __nstart_72 = PHI <__nstart_19(9), __nstart_57(12)>
  # .MEM_73 = PHI <.MEM_61(9), .MEM_62(12)>
  # DEBUG __nD.24112 => __nstart_72
  # VUSE <.MEM_73>
  # PT = nonlocal escaped { D.24136 } (escaped heap)
  _56 = *__nstart_72;
  # DEBUG thisD.24114 => D#67ptD.0
  # DEBUG __pD.24113 => _56
  # DEBUG __sizeD.22687 => 8
  # DEBUG D#60ptD.0 => &D#68ptD.0->_M_implD.19670
  # DEBUG D#58ptD.0 => D#60ptD.0
  # DEBUG __pD.24118 => _56
  # DEBUG __aD.24116 => D#58ptD.0
  # DEBUG __nD.24117 => D#59ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#54ptD.0 => D#56ptD.0
  # DEBUG D#55ptD.0 => D#57ptD.0
  # DEBUG __pD.24121 => _56
  # DEBUG thisD.24119 => D#54ptD.0
  # DEBUG D.24120 => D#55ptD.0
  # .MEM_62 = VDEF <.MEM_73>
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  _ZdlPvD.2766 (_56);
  # PT = { D.24135 } (escaped heap)
  __nstart_57 = __nstart_72 + 8;
  # DEBUG __nD.24112 => __nstart_57
  # DEBUG __nD.24112 => __nstart_57
  if (__nstart_57 >= __nstart_13)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_74 = PHI <.MEM_62(10)>
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       10 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       8 (EH,EXECUTABLE)
<L5>: [LP 4]
  [MNT 8] # .MEM_64 = VDEF <.MEM_63>
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  __cxa_end_catchD.20723 ();
  [LP 1] resx 7
;;    succ:       15 (EH,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       2 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_58 = PHI <.MEM_14(2), .MEM_60(5)>
  # DEBUG D#128ptD.0 => &this_10(D)->_M_implD.19670._M_startD.19674
  # DEBUG thisD.23186 => D#128ptD.0
  # DEBUG __new_nodeD.23187 => __nstart_19
  # .MEM_43 = VDEF <.MEM_58>
  MEM[(struct _Deque_iteratorD.19537 *)this_10(D) + 16B]._M_nodeD.19572 = __nstart_19;
  # VUSE <.MEM_43>
  # PT = nonlocal escaped { D.24136 } (escaped heap)
  _24 = *__nstart_19;
  # .MEM_44 = VDEF <.MEM_43>
  MEM[(struct _Deque_iteratorD.19537 *)this_10(D) + 16B]._M_firstD.19570 = _24;
  # DEBUG __sizeD.22490 => 8
  # PT = nonlocal escaped { D.24136 } (escaped heap)
  _42 = _24 + 512;
  # .MEM_45 = VDEF <.MEM_44>
  MEM[(struct _Deque_iteratorD.19537 *)this_10(D) + 16B]._M_lastD.19571 = _42;
  # PT = { D.24135 } (escaped heap)
  _23 = __nfinish_21 + 18446744073709551608;
  # DEBUG D#127ptD.0 => &this_10(D)->_M_implD.19670._M_finishD.19675
  # DEBUG thisD.23184 => D#127ptD.0
  # DEBUG __new_nodeD.23185 => _23
  # .MEM_46 = VDEF <.MEM_45>
  MEM[(struct _Deque_iteratorD.19537 *)this_10(D) + 48B]._M_nodeD.19572 = _23;
  # VUSE <.MEM_46>
  # PT = nonlocal escaped { D.24136 } (escaped heap)
  _40 = MEM[(struct CreditD.18194 * * *)__nfinish_21 + -8B];
  # .MEM_47 = VDEF <.MEM_46>
  MEM[(struct _Deque_iteratorD.19537 *)this_10(D) + 48B]._M_firstD.19570 = _40;
  # DEBUG __sizeD.22490 => 8
  # PT = nonlocal escaped { D.24136 } (escaped heap)
  _41 = _40 + 512;
  # .MEM_48 = VDEF <.MEM_47>
  MEM[(struct _Deque_iteratorD.19537 *)this_10(D) + 48B]._M_lastD.19571 = _41;
  # .MEM_25 = VDEF <.MEM_48>
  this_10(D)->_M_implD.19670._M_startD.19674._M_curD.19569 = _24;
  # DEBUG __sizeD.23182 => 8
  # RANGE [0, 63] NONZERO 63
  _27 = __num_elements_2(D) & 63;
  # RANGE [0, 504] NONZERO 504
  _28 = _27 * 8;
  # PT = nonlocal escaped { D.24136 } (escaped heap)
  _29 = _40 + _28;
  # .MEM_30 = VDEF <.MEM_25>
  this_10(D)->_M_implD.19670._M_finishD.19675._M_curD.19569 = _29;
  # VUSE <.MEM_30>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       13 (EH,EXECUTABLE)
<L0>: [LP 1]
  # VUSE <.MEM_64>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _31 = __builtin_eh_pointerD.2738 (3);
  # .MEM_32 = VDEF <.MEM_64>
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  __cxa_begin_catchD.20724 (_31);
  # DEBUG D#126ptD.0 => this_10(D)->_M_implD.19670._M_map_sizeD.19673
  # VUSE <.MEM_32>
  # PT = nonlocal escaped 
  _33 = this_10(D)->_M_implD.19670._M_mapD.19672;
  # DEBUG D#74ptD.0 => this_10(D)
  # DEBUG D#75ptD.0 => D#126ptD.0
  # DEBUG __pD.23188 => _33
  # DEBUG thisD.23190 => D#74ptD.0
  # DEBUG __nD.23189 => D#75ptD.0
  # DEBUG D#73ptD.0 => D#75ptD.0
  # DEBUG D#72ptD.0 => D#74ptD.0
  # DEBUG D#71ptD.0 => D#72ptD.0
  # DEBUG thisD.22772 => D#71ptD.0
  # DEBUG D#70ptD.0 => D#71ptD.0
  # DEBUG thisD.22760 => D#70ptD.0
  # DEBUG thisD.22752 => NULL
  # DEBUG D.22753 => NULL
  # DEBUG thisD.22750 => NULL
  # DEBUG D#42ptD.0 => &__map_allocD.23191
  # DEBUG D#43ptD.0 => D#73ptD.0
  # DEBUG __pD.23194 => _33
  # DEBUG __aD.23192 => D#42ptD.0
  # DEBUG __nD.23193 => D#43ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG __pD.23197 => _33
  # DEBUG thisD.23195 => D#38ptD.0
  # DEBUG D.23196 => D#39ptD.0
  # .MEM_49 = VDEF <.MEM_32>
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  _ZdlPvD.2766 (_33);
  # DEBUG thisD.22786 => &__map_allocD.23191
  # DEBUG thisD.22765 => &__map_allocD.23191
  # .MEM_35 = VDEF <.MEM_49>
  this_10(D)->_M_implD.19670._M_mapD.19672 = 0B;
  # .MEM_36 = VDEF <.MEM_35>
  this_10(D)->_M_implD.19670._M_map_sizeD.19673 = 0;
  [LP 2] # .MEM_37 = VDEF <.MEM_36>
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  __cxa_rethrowD.20725 ();
;;    succ:       16 (EH,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 15, next block 1, flags: (NEW, REACHABLE)
;;    pred:       15 (EH,EXECUTABLE)
<L2>: [LP 2]
  [MNT 5] # .MEM_38 = VDEF <.MEM_37>
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  __cxa_end_catchD.20723 ();
  resx 4
;;    succ:      

}


Creating dr for this_10(D)->_M_impl._M_map_size
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_10(D)
	Access function 0: 64
	Access function 1: 0
Creating dr for *__nstart_75
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_2
Creating dr for *__nstart_75
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_2
Creating dr for *__nstart_72
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_72
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_72
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_72
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_1
Analyzing # of iterations of loop 1
  exit condition [__nstart_19 + 8, + , 8](no_overflow) < __nstart_13
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) __nstart_13 - (unsigned long) (__nstart_19 + 8)) + 7) / 8, bounded by 2305843009213693951
Analyzing # of iterations of loop 1
  exit condition [__nstart_19 + 8, + , 8](no_overflow) < __nstart_13
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) __nstart_13 - (unsigned long) (__nstart_19 + 8)) + 7) / 8, bounded by 2305843009213693951
Creating dr for *__nstart_72
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_72
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_72
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_72
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_1
Analyzing # of iterations of loop 1
  exit condition [__nstart_19 + 8, + , 8](no_overflow) < __nstart_13
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) __nstart_13 - (unsigned long) (__nstart_19 + 8)) + 7) / 8, bounded by 2305843009213693951
Creating dr for MEM[(struct _Deque_iterator *)this_10(D) + 16B]._M_node
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_10(D) + 16B]
	Access function 0: 192
Creating dr for *__nstart_19
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *__nstart_19
Creating dr for MEM[(struct _Deque_iterator *)this_10(D) + 16B]._M_first
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_10(D) + 16B]
	Access function 0: 64
Creating dr for MEM[(struct _Deque_iterator *)this_10(D) + 16B]._M_last
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_10(D) + 16B]
	Access function 0: 128
Creating dr for MEM[(struct _Deque_iterator *)this_10(D) + 48B]._M_node
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_10(D) + 48B]
	Access function 0: 192
Creating dr for MEM[(struct Credit * * *)__nfinish_21 + -8B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:397, generic-match.c:4039
Applying pattern match.pd:697, generic-match.c:1350
Applying pattern match.pd:625, generic-match.c:1309
success.
Applying pattern match.pd:715, generic-match.c:1389
Applying pattern match.pd:397, generic-match.c:4039
Applying pattern match.pd:715, generic-match.c:1389
	base_address: _8 + (_3 + _17) * 8
	offset from base address: 0
	constant offset from base address: 0(OVF)
	step: 0
	aligned to: 256
	base_object: MEM[(struct Credit * * *)__nfinish_21 + -8B]
Creating dr for MEM[(struct _Deque_iterator *)this_10(D) + 48B]._M_first
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_10(D) + 48B]
	Access function 0: 64
Creating dr for MEM[(struct _Deque_iterator *)this_10(D) + 48B]._M_last
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 64
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_10(D) + 48B]
	Access function 0: 128
Creating dr for this_10(D)->_M_impl._M_start._M_cur
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: *this_10(D)
	Access function 0: 0
	Access function 1: 128
	Access function 2: 0
Creating dr for this_10(D)->_M_impl._M_finish._M_cur
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: *this_10(D)
	Access function 0: 0
	Access function 1: 384
	Access function 2: 0

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:26)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:19, LOOPS:2, CONDITIONS:5, STMTS:177)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_14 bb_3 })
  {
    <bb 2>:
    # DEBUG __size => 8
    _3 = __num_elements_2(D) >> 6;
    __num_nodes_4 = _3 + 1;
    # DEBUG __num_nodes => __num_nodes_4
    _5 = _3 + 3;
    # DEBUG __a => &D.20719
    # DEBUG __b => &D.20720
    _65 = MAX_EXPR <_5, 8>;
    # .MEM_11 = VDEF <.MEM_1(D)>
    this_10(D)->_M_impl._M_map_size = _65;
    # DEBUG D#113 => this_10(D)
    # DEBUG __n => D#160
    # DEBUG this => D#113
    # DEBUG D#112 => D#113
    # DEBUG D#71 => D#112
    # DEBUG this => D#71
    # DEBUG D#70 => D#71
    # DEBUG this => D#70
    # DEBUG this => NULL
    # DEBUG D.22753 => NULL
    # DEBUG this => NULL
    # DEBUG D#111 => &__map_alloc
    # DEBUG __n => D#160
    # DEBUG __a => D#111
    # DEBUG D#110 => D#111
    # DEBUG D#108 => D#110
    # DEBUG D#109 => 0B
    # DEBUG __n => D#160
    # DEBUG this => D#108
    # DEBUG D.23174 => D#109
    # DEBUG D#107 => D#108
    # DEBUG D#106 => D#107
    # DEBUG this => D#106
    _26 = _65 * 8;
    # .MEM_34 = VDEF <.MEM_11>
    _8 = operator new (_26);
    # DEBUG this => &__map_alloc
    # DEBUG this => &__map_alloc
    # .MEM_14 = VDEF <.MEM_34>
    this_10(D)->_M_impl._M_map = _8;
    # VUSE <.MEM_14>
    _15 = this_10(D)->_M_impl._M_map_size;
    _16 = _15 - __num_nodes_4;
    _17 = _16 >> 1;
    _18 = _17 * 8;
    __nstart_19 = _8 + _18;
    # DEBUG __nstart => __nstart_19
    _20 = __num_nodes_4 * 8;
    __nfinish_21 = __nstart_19 + _20;
    # DEBUG __nfinish => __nfinish_21
    # DEBUG D#125 => this_10(D)
    # DEBUG __nstart => __nstart_19
    # DEBUG __nfinish => __nfinish_21
    # DEBUG this => D#125
    # DEBUG __cur => __nstart_19
    if (__nstart_19 >= __nfinish_21)
      goto <bb 14>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 })
  {
    <bb 3>:

  }
  bb_7 (preds = {bb_4 }, succs = {bb_8 bb_9 })
  {
    # __nstart_13 = PHI <__nstart_75(4)>
  <L3>:
    # VUSE <.MEM_59>
    _54 = __builtin_eh_pointer (6);
    # .MEM_61 = VDEF <.MEM_59>
    __cxa_begin_catch (_54);
    # DEBUG D#69 => D#124
    # DEBUG __nstart => __nstart_19
    # DEBUG __nfinish => __nstart_13
    # DEBUG this => D#69
    # DEBUG __n => __nstart_19
    if (__nstart_19 >= __nstart_13)
      goto <bb 8>;
    else
      goto <bb 9>;

  }
  bb_8 (preds = {bb_7 bb_17 }, succs = {bb_13 })
  {
    <bb 8>:
    # .MEM_55 = PHI <.MEM_61(7), .MEM_74(17)>
    # .MEM_63 = VDEF <.MEM_55>
    __cxa_rethrow ();

  }
  bb_9 (preds = {bb_7 }, succs = {bb_10 })
  {
    <bb 9>:

  }
  bb_11 (preds = {bb_10 }, succs = {bb_17 })
  {
    <bb 11>:
    # .MEM_74 = PHI <.MEM_62(10)>

  }
  bb_17 (preds = {bb_11 }, succs = {bb_8 })
  {
    <bb 17>:
    goto <bb 8>;

  }
  bb_13 (preds = {bb_8 }, succs = {bb_15 })
  {
  <L5>:
    # .MEM_64 = VDEF <.MEM_63>
    __cxa_end_catch ();
    resx 7

  }
  bb_14 (preds = {bb_2 bb_5 }, succs = {bb_18 })
  {
    <bb 14>:
    # .MEM_58 = PHI <.MEM_14(2), .MEM_60(5)>

  }
  bb_18 (preds = {bb_14 }, succs = {bb_1 })
  {
    <bb 18>:
    # DEBUG D#128 => &this_10(D)->_M_impl._M_start
    # DEBUG this => D#128
    # DEBUG __new_node => __nstart_19
    # .MEM_43 = VDEF <.MEM_58>
    MEM[(struct _Deque_iterator *)this_10(D) + 16B]._M_node = __nstart_19;
    # VUSE <.MEM_43>
    _24 = *__nstart_19;
    # .MEM_44 = VDEF <.MEM_43>
    MEM[(struct _Deque_iterator *)this_10(D) + 16B]._M_first = _24;
    # DEBUG __size => 8
    _42 = _24 + 512;
    # .MEM_45 = VDEF <.MEM_44>
    MEM[(struct _Deque_iterator *)this_10(D) + 16B]._M_last = _42;
    _23 = __nfinish_21 + 18446744073709551608;
    # DEBUG D#127 => &this_10(D)->_M_impl._M_finish
    # DEBUG this => D#127
    # DEBUG __new_node => _23
    # .MEM_46 = VDEF <.MEM_45>
    MEM[(struct _Deque_iterator *)this_10(D) + 48B]._M_node = _23;
    # VUSE <.MEM_46>
    _40 = MEM[(struct Credit * * *)__nfinish_21 + -8B];
    # .MEM_47 = VDEF <.MEM_46>
    MEM[(struct _Deque_iterator *)this_10(D) + 48B]._M_first = _40;
    # DEBUG __size => 8
    _41 = _40 + 512;
    # .MEM_48 = VDEF <.MEM_47>
    MEM[(struct _Deque_iterator *)this_10(D) + 48B]._M_last = _41;
    # .MEM_25 = VDEF <.MEM_48>
    this_10(D)->_M_impl._M_start._M_cur = _24;
    # DEBUG __size => 8
    _27 = __num_elements_2(D) & 63;
    _28 = _27 * 8;
    _29 = _40 + _28;
    # .MEM_30 = VDEF <.MEM_25>
    this_10(D)->_M_impl._M_finish._M_cur = _29;
    # VUSE <.MEM_30>
    return;

  }
  bb_15 (preds = {bb_13 }, succs = {bb_16 })
  {
  <L0>:
    # VUSE <.MEM_64>
    _31 = __builtin_eh_pointer (3);
    # .MEM_32 = VDEF <.MEM_64>
    __cxa_begin_catch (_31);
    # DEBUG D#126 => this_10(D)->_M_impl._M_map_size
    # VUSE <.MEM_32>
    _33 = this_10(D)->_M_impl._M_map;
    # DEBUG D#74 => this_10(D)
    # DEBUG D#75 => D#126
    # DEBUG __p => _33
    # DEBUG this => D#74
    # DEBUG __n => D#75
    # DEBUG D#73 => D#75
    # DEBUG D#72 => D#74
    # DEBUG D#71 => D#72
    # DEBUG this => D#71
    # DEBUG D#70 => D#71
    # DEBUG this => D#70
    # DEBUG this => NULL
    # DEBUG D.22753 => NULL
    # DEBUG this => NULL
    # DEBUG D#42 => &__map_alloc
    # DEBUG D#43 => D#73
    # DEBUG __p => _33
    # DEBUG __a => D#42
    # DEBUG __n => D#43
    # DEBUG D#41 => D#43
    # DEBUG D#40 => D#42
    # DEBUG D#38 => D#40
    # DEBUG D#39 => D#41
    # DEBUG __p => _33
    # DEBUG this => D#38
    # DEBUG D.23196 => D#39
    # .MEM_49 = VDEF <.MEM_32>
    operator delete (_33);
    # DEBUG this => &__map_alloc
    # DEBUG this => &__map_alloc
    # .MEM_35 = VDEF <.MEM_49>
    this_10(D)->_M_impl._M_map = 0B;
    # .MEM_36 = VDEF <.MEM_35>
    this_10(D)->_M_impl._M_map_size = 0;
    # .MEM_37 = VDEF <.MEM_36>
    __cxa_rethrow ();

  }
  bb_16 (preds = {bb_15 }, succs = {})
  {
  <L2>:
    # .MEM_38 = VDEF <.MEM_37>
    __cxa_end_catch ();
    resx 4

  }
  loop_1 (header = 10, latch = 12, niter = (((unsigned long) __nstart_13 - (unsigned long) (__nstart_19 + 8)) + 7) / 8, upper_bound = 2305843009213693951)
  {
    bb_10 (preds = {bb_9 bb_12 }, succs = {bb_11 bb_12 })
    {
      <bb 10>:
      # __nstart_72 = PHI <__nstart_19(9), __nstart_57(12)>
      # .MEM_73 = PHI <.MEM_61(9), .MEM_62(12)>
      # DEBUG __n => __nstart_72
      # VUSE <.MEM_73>
      _56 = *__nstart_72;
      # DEBUG this => D#67
      # DEBUG __p => _56
      # DEBUG __size => 8
      # DEBUG D#60 => &D#68->_M_impl
      # DEBUG D#58 => D#60
      # DEBUG __p => _56
      # DEBUG __a => D#58
      # DEBUG __n => D#59
      # DEBUG D#57 => D#59
      # DEBUG D#56 => D#58
      # DEBUG D#54 => D#56
      # DEBUG D#55 => D#57
      # DEBUG __p => _56
      # DEBUG this => D#54
      # DEBUG D.24120 => D#55
      # .MEM_62 = VDEF <.MEM_73>
      operator delete (_56);
      __nstart_57 = __nstart_72 + 8;
      # DEBUG __n => __nstart_57
      # DEBUG __n => __nstart_57
      if (__nstart_57 >= __nstart_13)
        goto <bb 11>;
      else
        goto <bb 12>;

    }
    bb_12 (preds = {bb_10 }, succs = {bb_10 })
    {
      <bb 12>:
      goto <bb 10>;

    }
  }
  loop_2 (header = 4, latch = 6, niter = , upper_bound = 2305843009213693951)
  {
    bb_4 (preds = {bb_3 bb_6 }, succs = {bb_5 bb_7 })
    {
      <bb 4>:
      # .MEM_71 = PHI <.MEM_14(3), .MEM_60(6)>
      # __nstart_75 = PHI <__nstart_19(3), __nstart_53(6)>
      # DEBUG __cur => __nstart_75
      # DEBUG D#122 => D#123
      # DEBUG this => D#122
      # DEBUG D#121 => D#122
      # DEBUG __size => 8
      # DEBUG D#120 => &D#121->_M_impl
      # DEBUG D#119 => D#120
      # DEBUG __n => NULL
      # DEBUG __a => D#119
      # DEBUG D#118 => D#119
      # DEBUG D#116 => D#118
      # DEBUG D#117 => 0B
      # DEBUG __n => NULL
      # DEBUG this => D#116
      # DEBUG D.24127 => D#117
      # DEBUG D#115 => D#116
      # DEBUG D#114 => D#115
      # DEBUG this => D#114
      # .MEM_59 = VDEF <.MEM_71>
      _52 = operator new (512);

    }
    bb_5 (preds = {bb_4 }, succs = {bb_14 bb_6 })
    {
      <bb 5>:
      # .MEM_60 = VDEF <.MEM_59>
      *__nstart_75 = _52;
      __nstart_53 = __nstart_75 + 8;
      # DEBUG __cur => __nstart_53
      # DEBUG __cur => __nstart_53
      if (__nfinish_21 <= __nstart_53)
        goto <bb 14>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_4 })
    {
      <bb 6>:
      goto <bb 4>;

    }
  }
}

Pass statistics:
----------------

void std::_Deque_base<_Tp, _Alloc>::_M_initialize_map(std::size_t) [with _Tp = Credit*; _Alloc = std::allocator<Credit*>; std::size_t = long unsigned int] (struct _Deque_baseD.19304 * const thisD.19658, size_tD.2818 __num_elementsD.19659)
Eh tree:
   5 must_not_throw
   4 cleanup land:{2,<L2>}
   3 try land:{1,<L0>} catch:{}
     8 must_not_throw
     7 cleanup land:{4,<L5>}
     6 try land:{3,<L3>} catch:{}
{
  struct CreditD.18194 * * * __nstartD.24105;
  struct CreditD.18194 * * * __nfinishD.20722;
  struct CreditD.18194 * * * __nstartD.20721;
  const size_tD.2818 __num_nodesD.20718;
  const long unsigned intD.14 D.20719;
  const long unsigned intD.14 D.20720;
  long unsigned intD.14 _3;
  struct CreditD.18194 * * * _8;
  long unsigned intD.14 _15;
  long unsigned intD.14 _16;
  long unsigned intD.14 _17;
  long unsigned intD.14 _18;
  long unsigned intD.14 _20;
  struct CreditD.18194 * * * _23;
  struct CreditD.18194 * * _24;
  long unsigned intD.14 _26;
  long unsigned intD.14 _27;
  long unsigned intD.14 _28;
  struct CreditD.18194 * * _29;
  voidD.45 * _31;
  struct CreditD.18194 * * * _33;
  struct CreditD.18194 * * _40;
  struct CreditD.18194 * * _41;
  struct CreditD.18194 * * _42;
  struct CreditD.18194 * * _52;
  voidD.45 * _54;
  struct CreditD.18194 * * _56;
  long unsigned intD.14 _65;

;;   basic block 2, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __sizeD.23180 => 8
  # RANGE [0, 288230376151711743] NONZERO 288230376151711743
  _3 = __num_elements_2(D) >> 6;
  # RANGE [1, 288230376151711744] NONZERO 576460752303423487
  __num_nodes_4 = _3 + 1;
  # DEBUG __num_nodesD.20718 => __num_nodes_4
  # RANGE [3, 288230376151711746] NONZERO 576460752303423487
  _5 = _3 + 3;
  # DEBUG __aD.23177 => &D.20719
  # DEBUG __bD.23178 => &D.20720
  # RANGE [8, 288230376151711746] NONZERO 576460752303423487
  _65 = MAX_EXPR <_5, 8>;
  # .MEM_11 = VDEF <.MEM_1(D)>
  this_10(D)->_M_implD.19670._M_map_sizeD.19673 = _65;
  # DEBUG D#113ptD.0 => this_10(D)
  # DEBUG __nD.23168 => D#160ptD.0
  # DEBUG thisD.23169 => D#113ptD.0
  # DEBUG D#112ptD.0 => D#113ptD.0
  # DEBUG D#71ptD.0 => D#112ptD.0
  # DEBUG thisD.23030 => D#71ptD.0
  # DEBUG D#70ptD.0 => D#71ptD.0
  # DEBUG thisD.22760 => D#70ptD.0
  # DEBUG thisD.22752 => NULL
  # DEBUG D.22753 => NULL
  # DEBUG thisD.22750 => NULL
  # DEBUG D#111ptD.0 => &__map_allocD.23170
  # DEBUG __nD.23172 => D#160ptD.0
  # DEBUG __aD.23171 => D#111ptD.0
  # DEBUG D#110ptD.0 => D#111ptD.0
  # DEBUG D#108ptD.0 => D#110ptD.0
  # DEBUG D#109ptD.0 => 0B
  # DEBUG __nD.23175 => D#160ptD.0
  # DEBUG thisD.23173 => D#108ptD.0
  # DEBUG D.23174 => D#109ptD.0
  # DEBUG D#107ptD.0 => D#108ptD.0
  # DEBUG D#106ptD.0 => D#107ptD.0
  # DEBUG thisD.22995 => D#106ptD.0
  # RANGE [64, 2305843009213693968] NONZERO 4611686018427387896
  _26 = _65 * 8;
  # .MEM_34 = VDEF <.MEM_11>
  # PT = { D.24135 } (escaped heap)
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  _8 = _ZnwmD.2764 (_26);
  # DEBUG thisD.23043 => &__map_allocD.23170
  # DEBUG thisD.23032 => &__map_allocD.23170
  # .MEM_14 = VDEF <.MEM_34>
  this_10(D)->_M_implD.19670._M_mapD.19672 = _8;
  # VUSE <.MEM_14>
  _15 = this_10(D)->_M_implD.19670._M_map_sizeD.19673;
  # RANGE [0, 18446744073709551615]
  _16 = _15 - __num_nodes_4;
  # RANGE [0, 9223372036854775807] NONZERO 9223372036854775807
  _17 = _16 >> 1;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _18 = _17 * 8;
  # PT = { D.24135 } (escaped heap)
  __nstart_19 = _8 + _18;
  # DEBUG __nstartD.20721 => __nstart_19
  # RANGE [8, 2305843009213693952] NONZERO 4611686018427387896
  _20 = __num_nodes_4 * 8;
  # PT = { D.24135 } (escaped heap)
  __nfinish_21 = __nstart_19 + _20;
  # DEBUG __nfinishD.20722 => __nfinish_21
  # DEBUG D#125ptD.0 => this_10(D)
  # DEBUG __nstartD.24105 => __nstart_19
  # DEBUG __nfinishD.24106 => __nfinish_21
  # DEBUG thisD.24107 => D#125ptD.0
  # DEBUG __curD.24108 => __nstart_19
  if (__nstart_19 >= __nfinish_21)
    goto <bb 14>;
  else
    goto <bb 3>;
;;    succ:       14 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 430, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 9550, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_71 = PHI <.MEM_14(3), .MEM_60(6)>
  # PT = { D.24135 } (escaped heap)
  # __nstart_75 = PHI <__nstart_19(3), __nstart_53(6)>
  # DEBUG __curD.24108 => __nstart_75
  # DEBUG D#122ptD.0 => D#123ptD.0
  # DEBUG thisD.24122 => D#122ptD.0
  # DEBUG D#121ptD.0 => D#122ptD.0
  # DEBUG __sizeD.23103 => 8
  # DEBUG D#120ptD.0 => &D#121ptD.0->_M_implD.19670
  # DEBUG D#119ptD.0 => D#120ptD.0
  # DEBUG __nD.24125 => NULL
  # DEBUG __aD.24124 => D#119ptD.0
  # DEBUG D#118ptD.0 => D#119ptD.0
  # DEBUG D#116ptD.0 => D#118ptD.0
  # DEBUG D#117ptD.0 => 0B
  # DEBUG __nD.24128 => NULL
  # DEBUG thisD.24126 => D#116ptD.0
  # DEBUG D.24127 => D#117ptD.0
  # DEBUG D#115ptD.0 => D#116ptD.0
  # DEBUG D#114ptD.0 => D#115ptD.0
  # DEBUG thisD.23060 => D#114ptD.0
  [LP 3] # .MEM_59 = VDEF <.MEM_71>
  # PT = { D.24136 } (escaped heap)
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  _52 = _ZnwmD.2764 (512);
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 (EH,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9550, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_60 = VDEF <.MEM_59>
  *__nstart_75 = _52;
  # PT = { D.24135 } (escaped heap)
  __nstart_53 = __nstart_75 + 8;
  # DEBUG __curD.24108 => __nstart_53
  # DEBUG __curD.24108 => __nstart_53
  if (__nfinish_21 <= __nstart_53)
    goto <bb 14>;
  else
    goto <bb 6>;
;;    succ:       14 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9120, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       4 (EH,EXECUTABLE)
  # PT = { D.24135 } (escaped heap)
  # __nstart_13 = PHI <__nstart_75(4)>
<L3>: [LP 3]
  # VUSE <.MEM_59>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _54 = __builtin_eh_pointerD.2738 (6);
  # .MEM_61 = VDEF <.MEM_59>
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  __cxa_begin_catchD.20724 (_54);
  # DEBUG D#69ptD.0 => D#124ptD.0
  # DEBUG __nstartD.24111 => __nstart_19
  # DEBUG __nfinishD.24110 => __nstart_13
  # DEBUG thisD.24109 => D#69ptD.0
  # DEBUG __nD.24112 => __nstart_19
  if (__nstart_19 >= __nstart_13)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_55 = PHI <.MEM_61(7), .MEM_74(17)>
  [LP 4] # .MEM_63 = VDEF <.MEM_55>
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  __cxa_rethrowD.20725 ();
;;    succ:       13 (EH,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       7 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = { D.24135 } (escaped heap)
  # __nstart_72 = PHI <__nstart_19(9), __nstart_57(12)>
  # .MEM_73 = PHI <.MEM_61(9), .MEM_62(12)>
  # DEBUG __nD.24112 => __nstart_72
  # VUSE <.MEM_73>
  # PT = nonlocal escaped { D.24136 } (escaped heap)
  _56 = *__nstart_72;
  # DEBUG thisD.24114 => D#67ptD.0
  # DEBUG __pD.24113 => _56
  # DEBUG __sizeD.22687 => 8
  # DEBUG D#60ptD.0 => &D#68ptD.0->_M_implD.19670
  # DEBUG D#58ptD.0 => D#60ptD.0
  # DEBUG __pD.24118 => _56
  # DEBUG __aD.24116 => D#58ptD.0
  # DEBUG __nD.24117 => D#59ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#54ptD.0 => D#56ptD.0
  # DEBUG D#55ptD.0 => D#57ptD.0
  # DEBUG __pD.24121 => _56
  # DEBUG thisD.24119 => D#54ptD.0
  # DEBUG D.24120 => D#55ptD.0
  # .MEM_62 = VDEF <.MEM_73>
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  _ZdlPvD.2766 (_56);
  # PT = { D.24135 } (escaped heap)
  __nstart_57 = __nstart_72 + 8;
  # DEBUG __nD.24112 => __nstart_57
  # DEBUG __nD.24112 => __nstart_57
  if (__nstart_57 >= __nstart_13)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 10, next block 17, flags: (NEW)
;;    pred:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_74 = PHI <.MEM_62(10)>
;;    succ:       17 [100.0%]  (FALLTHRU)

;;   basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 11, next block 12, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 17, next block 13, flags: (NEW)
;;    pred:       10 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       8 (EH,EXECUTABLE)
<L5>: [LP 4]
  [MNT 8] # .MEM_64 = VDEF <.MEM_63>
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  __cxa_end_catchD.20723 ();
  [LP 1] resx 7
;;    succ:       15 (EH,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 13, next block 18, flags: (NEW, REACHABLE)
;;    pred:       2 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_58 = PHI <.MEM_14(2), .MEM_60(5)>
;;    succ:       18 [100.0%]  (FALLTHRU)

;;   basic block 18, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 14, next block 15, flags: (NEW)
;;    pred:       14 [100.0%]  (FALLTHRU)
  # DEBUG D#128ptD.0 => &this_10(D)->_M_implD.19670._M_startD.19674
  # DEBUG thisD.23186 => D#128ptD.0
  # DEBUG __new_nodeD.23187 => __nstart_19
  # .MEM_43 = VDEF <.MEM_58>
  MEM[(struct _Deque_iteratorD.19537 *)this_10(D) + 16B]._M_nodeD.19572 = __nstart_19;
  # VUSE <.MEM_43>
  # PT = nonlocal escaped { D.24136 } (escaped heap)
  _24 = *__nstart_19;
  # .MEM_44 = VDEF <.MEM_43>
  MEM[(struct _Deque_iteratorD.19537 *)this_10(D) + 16B]._M_firstD.19570 = _24;
  # DEBUG __sizeD.22490 => 8
  # PT = nonlocal escaped { D.24136 } (escaped heap)
  _42 = _24 + 512;
  # .MEM_45 = VDEF <.MEM_44>
  MEM[(struct _Deque_iteratorD.19537 *)this_10(D) + 16B]._M_lastD.19571 = _42;
  # PT = { D.24135 } (escaped heap)
  _23 = __nfinish_21 + 18446744073709551608;
  # DEBUG D#127ptD.0 => &this_10(D)->_M_implD.19670._M_finishD.19675
  # DEBUG thisD.23184 => D#127ptD.0
  # DEBUG __new_nodeD.23185 => _23
  # .MEM_46 = VDEF <.MEM_45>
  MEM[(struct _Deque_iteratorD.19537 *)this_10(D) + 48B]._M_nodeD.19572 = _23;
  # VUSE <.MEM_46>
  # PT = nonlocal escaped { D.24136 } (escaped heap)
  _40 = MEM[(struct CreditD.18194 * * *)__nfinish_21 + -8B];
  # .MEM_47 = VDEF <.MEM_46>
  MEM[(struct _Deque_iteratorD.19537 *)this_10(D) + 48B]._M_firstD.19570 = _40;
  # DEBUG __sizeD.22490 => 8
  # PT = nonlocal escaped { D.24136 } (escaped heap)
  _41 = _40 + 512;
  # .MEM_48 = VDEF <.MEM_47>
  MEM[(struct _Deque_iteratorD.19537 *)this_10(D) + 48B]._M_lastD.19571 = _41;
  # .MEM_25 = VDEF <.MEM_48>
  this_10(D)->_M_implD.19670._M_startD.19674._M_curD.19569 = _24;
  # DEBUG __sizeD.23182 => 8
  # RANGE [0, 63] NONZERO 63
  _27 = __num_elements_2(D) & 63;
  # RANGE [0, 504] NONZERO 504
  _28 = _27 * 8;
  # PT = nonlocal escaped { D.24136 } (escaped heap)
  _29 = _40 + _28;
  # .MEM_30 = VDEF <.MEM_25>
  this_10(D)->_M_implD.19670._M_finishD.19675._M_curD.19569 = _29;
  # VUSE <.MEM_30>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 18, next block 16, flags: (NEW, REACHABLE)
;;    pred:       13 (EH,EXECUTABLE)
<L0>: [LP 1]
  # VUSE <.MEM_64>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _31 = __builtin_eh_pointerD.2738 (3);
  # .MEM_32 = VDEF <.MEM_64>
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  __cxa_begin_catchD.20724 (_31);
  # DEBUG D#126ptD.0 => this_10(D)->_M_implD.19670._M_map_sizeD.19673
  # VUSE <.MEM_32>
  # PT = nonlocal escaped 
  _33 = this_10(D)->_M_implD.19670._M_mapD.19672;
  # DEBUG D#74ptD.0 => this_10(D)
  # DEBUG D#75ptD.0 => D#126ptD.0
  # DEBUG __pD.23188 => _33
  # DEBUG thisD.23190 => D#74ptD.0
  # DEBUG __nD.23189 => D#75ptD.0
  # DEBUG D#73ptD.0 => D#75ptD.0
  # DEBUG D#72ptD.0 => D#74ptD.0
  # DEBUG D#71ptD.0 => D#72ptD.0
  # DEBUG thisD.22772 => D#71ptD.0
  # DEBUG D#70ptD.0 => D#71ptD.0
  # DEBUG thisD.22760 => D#70ptD.0
  # DEBUG thisD.22752 => NULL
  # DEBUG D.22753 => NULL
  # DEBUG thisD.22750 => NULL
  # DEBUG D#42ptD.0 => &__map_allocD.23191
  # DEBUG D#43ptD.0 => D#73ptD.0
  # DEBUG __pD.23194 => _33
  # DEBUG __aD.23192 => D#42ptD.0
  # DEBUG __nD.23193 => D#43ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG __pD.23197 => _33
  # DEBUG thisD.23195 => D#38ptD.0
  # DEBUG D.23196 => D#39ptD.0
  # .MEM_49 = VDEF <.MEM_32>
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  _ZdlPvD.2766 (_33);
  # DEBUG thisD.22786 => &__map_allocD.23191
  # DEBUG thisD.22765 => &__map_allocD.23191
  # .MEM_35 = VDEF <.MEM_49>
  this_10(D)->_M_implD.19670._M_mapD.19672 = 0B;
  # .MEM_36 = VDEF <.MEM_35>
  this_10(D)->_M_implD.19670._M_map_sizeD.19673 = 0;
  [LP 2] # .MEM_37 = VDEF <.MEM_36>
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  __cxa_rethrowD.20725 ();
;;    succ:       16 (EH,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 15, next block 1, flags: (NEW, REACHABLE)
;;    pred:       15 (EH,EXECUTABLE)
<L2>: [LP 2]
  [MNT 5] # .MEM_38 = VDEF <.MEM_37>
  # USE = nonlocal null { D.24135 D.24136 } (escaped heap)
  # CLB = nonlocal null { D.24135 D.24136 } (escaped heap)
  __cxa_end_catchD.20723 ();
  resx 4
;;    succ:      

}



;; Function std::deque<_Tp, _Alloc>::deque(const std::deque<_Tp, _Alloc>&) [with _Tp = Credit*; _Alloc = std::allocator<Credit*>] (_ZNSt5dequeIP6CreditSaIS1_EEC2ERKS3_, funcdef_no=1137, decl_uid=20190, cgraph_uid=266, symbol_order=268)


Pass statistics:
----------------

std::deque<_Tp, _Alloc>::deque(const std::deque<_Tp, _Alloc>&) [with _Tp = Credit*; _Alloc = std::allocator<Credit*>] (struct dequeD.19255 * const thisD.20191, const struct dequeD.19255 & __xD.20192)
{
  struct CreditD.18194 * * * __first$_M_nodeD.24253;
  struct CreditD.18194 * * __first$_M_lastD.24252;
  struct CreditD.18194 * * const __firstD.24250;
  struct CreditD.18194 * * * SR.270D.24249;
  struct CreditD.18194 * * SR.269D.24248;
  struct CreditD.18194 * * SR.268D.24247;
  struct CreditD.18194 * * * __first$24D.24246;
  struct CreditD.18194 * * __first$16D.24245;
  struct CreditD.18194 * * __first$8D.24244;
  struct CreditD.18194 * * __firstD.24243;
  _DistanceD.21529 __nD.24229;
  struct _Deque_iteratorD.19539 __firstD.24223;
  struct _Deque_iteratorD.19539 __lastD.24224;
  struct _Deque_iteratorD.19539 __lastD.24204;
  struct _Deque_iteratorD.19539 __firstD.24205;
  struct _Deque_iteratorD.19537 D.24222;
  struct CreditD.18194 * * __itD.24221;
  struct CreditD.18194 * * __it$8D.24220;
  struct CreditD.18194 * * __it$16D.24219;
  struct CreditD.18194 * * * __it$24D.24217;
  struct CreditD.18194 * * __itD.24216;
  struct CreditD.18194 * * __it$8D.24215;
  struct CreditD.18194 * * __it$16D.24214;
  struct CreditD.18194 * * * __it$24D.24212;
  struct _Deque_iteratorD.19539 __firstD.24198;
  struct _Deque_iteratorD.19539 __lastD.24199;
  struct _Deque_iteratorD.19537 D.24197;
  struct _Deque_iteratorD.19539 D.24196;
  struct _Deque_iteratorD.19539 D.24195;
  struct CreditD.18194 * * __itD.24194;
  struct CreditD.18194 * * __it$8D.24193;
  struct CreditD.18194 * * __it$16D.24192;
  struct CreditD.18194 * * * __it$24D.24191;
  struct CreditD.18194 * * __itD.24190;
  struct CreditD.18194 * * __it$8D.24189;
  struct CreditD.18194 * * __it$16D.24188;
  struct CreditD.18194 * * * __it$24D.24187;
  struct _Deque_iteratorD.19539 __firstD.24178;
  struct _Deque_iteratorD.19539 __lastD.24179;
  struct _Deque_iteratorD.19539 __lastD.24173;
  struct _Deque_iteratorD.19539 __firstD.24174;
  struct _Deque_iteratorD.19537 D.24177;
  struct _Deque_iteratorD.19539 __firstD.24164;
  struct _Deque_iteratorD.19539 __lastD.24165;
  struct _Deque_iteratorD.19537 D.24163;
  struct _Deque_iteratorD.19537 D.24162;
  struct _Deque_iteratorD.19539 __firstD.24156;
  struct _Deque_iteratorD.19539 __lastD.24157;
  struct _Deque_iteratorD.19539 D.22040;
  struct _Deque_iteratorD.19539 D.22039;
  struct _Deque_iteratorD.19537 D.20616;
  struct _Deque_baseD.19304 * _7;
  struct CreditD.18194 * * _9;
  struct CreditD.18194 * * _10;
  struct CreditD.18194 * * _13;
  struct CreditD.18194 * * * _15;
  struct CreditD.18194 * * _17;
  struct CreditD.18194 * * * _18;
  struct CreditD.18194 * * * _19;
  long intD.12 _20;
  struct CreditD.18194 * * * _21;
  long intD.12 _22;
  long intD.12 _23;
  long intD.12 _24;
  long intD.12 _25;
  long intD.12 _26;
  struct CreditD.18194 * * _27;
  long intD.12 _28;
  struct CreditD.18194 * * _29;
  long intD.12 _30;
  long intD.12 _31;
  long intD.12 _32;
  long intD.12 _33;
  struct CreditD.18194 * * _34;
  long intD.12 _35;
  struct CreditD.18194 * * _36;
  long intD.12 _37;
  long intD.12 _38;
  long intD.12 _39;
  difference_typeD.19567 _40;
  size_typeD.19746 _41;
  long intD.12 _97;
  long intD.12 _99;
  long intD.12 _100;
  long intD.12 _101;
  long intD.12 _102;
  long intD.12 _103;
  long intD.12 _105;
  long intD.12 _107;
  long intD.12 _108;
  long intD.12 _109;
  long intD.12 _110;
  long intD.12 _112;
  long intD.12 _114;
  long intD.12 _115;
  long intD.12 _116;
  struct CreditD.18194 * _121;
  struct CreditD.18194 * * _126;
  struct CreditD.18194 * * * _138;
  struct CreditD.18194 * * _139;
  struct CreditD.18194 * * _140;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.23653 => __x_2(D)
  # DEBUG D#31ptD.0 => &__x_2(D)->D.20219._M_implD.19670._M_startD.19674
  # DEBUG D#32ptD.0 => &__x_2(D)->D.20219._M_implD.19670._M_finishD.19675
  # DEBUG __xD.23655 => D#32ptD.0
  # DEBUG __yD.23654 => D#31ptD.0
  # DEBUG __sizeD.22490 => 8
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _19 = MEM[(const struct _Deque_iteratorD.19537 &)__x_2(D) + 48]._M_nodeD.19572;
  _20 = (long intD.12) _19;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _21 = MEM[(const struct _Deque_iteratorD.19537 &)__x_2(D) + 16]._M_nodeD.19572;
  _22 = (long intD.12) _21;
  _23 = _20 - _22;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _24 = _23 /[ex] 8;
  # RANGE [-1152921504606846977, 1152921504606846974]
  _25 = _24 + -1;
  # RANGE [-9223372036854775808, 9223372036854775807] NONZERO 18446744073709551552
  _26 = _25 * 64;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _27 = MEM[(const struct _Deque_iteratorD.19537 &)__x_2(D) + 48]._M_curD.19569;
  _28 = (long intD.12) _27;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _29 = MEM[(const struct _Deque_iteratorD.19537 &)__x_2(D) + 48]._M_firstD.19570;
  _30 = (long intD.12) _29;
  _31 = _28 - _30;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _32 = _31 /[ex] 8;
  _33 = _26 + _32;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _34 = MEM[(const struct _Deque_iteratorD.19537 &)__x_2(D) + 16]._M_lastD.19571;
  _35 = (long intD.12) _34;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _36 = MEM[(const struct _Deque_iteratorD.19537 &)__x_2(D) + 16]._M_curD.19569;
  _37 = (long intD.12) _36;
  _38 = _35 - _37;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _39 = _38 /[ex] 8;
  _40 = _33 + _39;
  # RANGE [0, 18446744073709551615]
  _41 = (size_typeD.19746) _40;
  # DEBUG D#144ptD.0 => &__x_2(D)->D.20219
  # DEBUG thisD.23651 => D#144ptD.0
  # DEBUG __aD.23649 => NULL
  # PT = nonlocal 
  _7 = &this_6(D)->D.20219;
  # DEBUG thisD.23641 => _7
  # DEBUG __aD.23642 => NULL
  # DEBUG __num_elementsD.23643 => _41
  # DEBUG D#132ptD.0 => &_7->_M_implD.19670
  # DEBUG thisD.23646 => D#132ptD.0
  # DEBUG __aD.23645 => NULL
  # DEBUG thisD.22848 => D#132ptD.0
  # DEBUG __aD.22849 => NULL
  # DEBUG thisD.22843 => D#132ptD.0
  # DEBUG D.22844 => NULL
  # .MEM_42 = VDEF <.MEM_1(D)>
  MEM[(struct _Deque_implD.19638 *)this_6(D)]._M_mapD.19672 = 0B;
  # .MEM_43 = VDEF <.MEM_42>
  MEM[(struct _Deque_implD.19638 *)this_6(D)]._M_map_sizeD.19673 = 0;
  # DEBUG D#89ptD.0 => &D#132ptD.0->_M_startD.19674
  # DEBUG thisD.23647 => D#89ptD.0
  # .MEM_44 = VDEF <.MEM_43>
  MEM[(struct _Deque_iteratorD.19537 *)this_6(D) + 16B]._M_curD.19569 = 0B;
  # .MEM_45 = VDEF <.MEM_44>
  MEM[(struct _Deque_iteratorD.19537 *)this_6(D) + 16B]._M_firstD.19570 = 0B;
  # .MEM_46 = VDEF <.MEM_45>
  MEM[(struct _Deque_iteratorD.19537 *)this_6(D) + 16B]._M_lastD.19571 = 0B;
  # .MEM_47 = VDEF <.MEM_46>
  MEM[(struct _Deque_iteratorD.19537 *)this_6(D) + 16B]._M_nodeD.19572 = 0B;
  # DEBUG D#88ptD.0 => &D#132ptD.0->_M_finishD.19675
  # DEBUG thisD.23648 => D#88ptD.0
  # .MEM_48 = VDEF <.MEM_47>
  MEM[(struct _Deque_iteratorD.19537 *)this_6(D) + 48B]._M_curD.19569 = 0B;
  # .MEM_49 = VDEF <.MEM_48>
  MEM[(struct _Deque_iteratorD.19537 *)this_6(D) + 48B]._M_firstD.19570 = 0B;
  # .MEM_50 = VDEF <.MEM_49>
  MEM[(struct _Deque_iteratorD.19537 *)this_6(D) + 48B]._M_lastD.19571 = 0B;
  # .MEM_51 = VDEF <.MEM_50>
  MEM[(struct _Deque_iteratorD.19537 *)this_6(D) + 48B]._M_nodeD.19572 = 0B;
  # .MEM_52 = VDEF <.MEM_51>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZNSt11_Deque_baseIP6CreditSaIS1_EE17_M_initialize_mapEmD.19657 (_7, _41);
  # DEBUG D#145ptD.0 => &this_6(D)->D.20219
  # DEBUG thisD.23639 => D#145ptD.0
  # DEBUG D#146ptD.0 => &this_6(D)->D.20219._M_implD.19670._M_startD.19674
  # DEBUG thisD.23637 => &D.20616
  # DEBUG __xD.23638 => D#146ptD.0
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _9 = MEM[(const struct iteratorD.19557 &)this_6(D) + 16]._M_curD.19569;
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _17 = MEM[(const struct iteratorD.19557 &)this_6(D) + 16]._M_lastD.19571;
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _18 = MEM[(const struct iteratorD.19557 &)this_6(D) + 16]._M_nodeD.19572;
  # DEBUG thisD.23634 => __x_2(D)
  # DEBUG D#17ptD.0 => &__x_2(D)->D.20219._M_implD.19670._M_finishD.19675
  # DEBUG thisD.23636 => &D.22039
  # DEBUG __xD.23635 => D#17ptD.0
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _10 = MEM[(const struct iteratorD.20509 &)__x_2(D) + 48]._M_curD.19569;
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _13 = MEM[(const struct iteratorD.20509 &)__x_2(D) + 48]._M_firstD.19570;
  # DEBUG D#161ptD.0 => MEM[(const struct iteratorD.20509 &)__x_2(D) + 48]._M_lastD.19571
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _15 = MEM[(const struct iteratorD.20509 &)__x_2(D) + 48]._M_nodeD.19572;
  # DEBUG thisD.23631 => __x_2(D)
  # DEBUG D#18ptD.0 => &__x_2(D)->D.20219._M_implD.19670._M_startD.19674
  # DEBUG thisD.23633 => &D.22040
  # DEBUG __xD.23632 => D#18ptD.0
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  __first_8 = MEM[(const struct iteratorD.20509 &)__x_2(D) + 16]._M_curD.19569;
  # DEBUG D#162ptD.0 => MEM[(const struct iteratorD.20509 &)__x_2(D) + 16]._M_firstD.19570
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  __first$_M_last_4 = MEM[(const struct iteratorD.20509 &)__x_2(D) + 16]._M_lastD.19571;
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  __first$_M_node_3 = MEM[(const struct iteratorD.20509 &)__x_2(D) + 16]._M_nodeD.19572;
  # DEBUG __resultD.24158 => &D.20616
  # DEBUG D.24159 => D#143ptD.0
  # DEBUG thisD.24161 => &D.24163
  # DEBUG __xD.24160 => &D.20616
  # DEBUG __resultD.24166 => &D.24163
  # DEBUG __assignableD.24169 => 1
  # DEBUG thisD.24171 => NULL
  # DEBUG __xD.24170 => &D.24163
  # DEBUG __resultD.24172 => NULL
  # DEBUG thisD.24176 => &D.24177
  # DEBUG __xD.24175 => NULL
  # DEBUG __resultD.24180 => &D.24177
  # DEBUG thisD.24182 => &D.24197
  # DEBUG __xD.24181 => &D.24177
  # DEBUG __itD.24190 => _10
  # DEBUG __it$8D.24189 => _13
  # DEBUG __it$16D.24188 => D#161ptD.0
  # DEBUG __it$24D.24187 => _15
  # DEBUG __it$_M_curD.23584 => _10
  # DEBUG __it$_M_firstD.23583 => _13
  # DEBUG __it$_M_lastD.23582 => D#161ptD.0
  # DEBUG __it$_M_nodeD.23581 => _15
  # DEBUG __itD.24194 => __first_8
  # DEBUG __it$8D.24193 => D#162ptD.0
  # DEBUG __it$16D.24192 => __first$_M_last_4
  # DEBUG __it$24D.24191 => __first$_M_node_3
  # DEBUG __it$_M_curD.23578 => __first_8
  # DEBUG __it$_M_firstD.23577 => D#162ptD.0
  # DEBUG __it$_M_lastD.23576 => __first$_M_last_4
  # DEBUG __it$_M_nodeD.23575 => __first$_M_node_3
  # DEBUG __resultD.24200 => &D.24197
  # DEBUG thisD.24202 => NULL
  # DEBUG __xD.24201 => &D.24197
  # DEBUG __itD.23539 => NULL
  # DEBUG thisD.23541 => NULL
  # DEBUG __xD.23540 => NULL
  # DEBUG __itD.23542 => NULL
  # DEBUG thisD.23544 => NULL
  # DEBUG __xD.23543 => NULL
  # DEBUG __itD.24216 => _10
  # DEBUG __it$8D.24215 => _13
  # DEBUG __it$16D.24214 => D#161ptD.0
  # DEBUG __it$24D.24212 => _15
  # DEBUG __it$_M_curD.23538 => _10
  # DEBUG __it$_M_firstD.23537 => _13
  # DEBUG __it$_M_lastD.23536 => D#161ptD.0
  # DEBUG __it$_M_nodeD.23535 => _15
  # DEBUG __itD.24221 => __first_8
  # DEBUG __it$8D.24220 => D#162ptD.0
  # DEBUG __it$16D.24219 => __first$_M_last_4
  # DEBUG __it$24D.24217 => __first$_M_node_3
  # DEBUG __it$_M_curD.23532 => __first_8
  # DEBUG __it$_M_firstD.23531 => D#162ptD.0
  # DEBUG __it$_M_lastD.23530 => __first$_M_last_4
  # DEBUG __it$_M_nodeD.23529 => __first$_M_node_3
  # DEBUG __firstD.24243 => __first_8
  # DEBUG __first$8D.24244 => D#162ptD.0
  # DEBUG __first$16D.24245 => __first$_M_last_4
  # DEBUG __first$24D.24246 => __first$_M_node_3
  # DEBUG __resultD.24203 => NULL
  # DEBUG __simpleD.24209 => 0
  # DEBUG thisD.24211 => &D.24222
  # DEBUG __xD.24210 => NULL
  # DEBUG __firstD.24250 => __first_8
  # DEBUG __first$_M_firstD.24251 => D#162ptD.0
  # DEBUG __first$_M_lastD.24252 => __first$_M_last_4
  # DEBUG __first$_M_nodeD.24253 => __first$_M_node_3
  # DEBUG __resultD.24225 => &D.24222
  # DEBUG __xD.24233 => &__lastD.24224
  # DEBUG __yD.24232 => &__firstD.24223
  # DEBUG __sizeD.23480 => 8
  _97 = (long intD.12) _15;
  _99 = (long intD.12) __first$_M_node_3;
  _100 = _97 - _99;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _101 = _100 /[ex] 8;
  # RANGE [-1152921504606846977, 1152921504606846974]
  _102 = _101 + -1;
  # RANGE [-9223372036854775808, 9223372036854775807] NONZERO 18446744073709551552
  _103 = _102 * 64;
  _105 = (long intD.12) _10;
  _107 = (long intD.12) _13;
  _108 = _105 - _107;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _109 = _108 /[ex] 8;
  _110 = _103 + _109;
  _112 = (long intD.12) __first$_M_last_4;
  _114 = (long intD.12) __first_8;
  _115 = _112 - _114;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _116 = _115 /[ex] 8;
  __n_117 = _110 + _116;
  # DEBUG __nD.24229 => __n_117
  # DEBUG __nD.24229 => __n_117
  if (__n_117 <= 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_52(2), .MEM_56(10)>
  # DEBUG thisD.24228 => &D.24162
  # DEBUG __xD.24227 => &D.24222
  # .MEM_203 = VDEF <.MEM_5>
  D.24222 ={v} {CLOBBER};
  # .MEM_204 = VDEF <.MEM_203>
  D.24197 ={v} {CLOBBER};
  # .MEM_205 = VDEF <.MEM_204>
  D.24177 ={v} {CLOBBER};
  # .MEM_206 = VDEF <.MEM_205>
  D.24163 ={v} {CLOBBER};
  # .MEM_12 = VDEF <.MEM_206>
  D.20616 ={v} {CLOBBER};
  # VUSE <.MEM_12>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # __n_54 = PHI <__n_117(4), __n_128(11)>
  # .MEM_55 = PHI <.MEM_52(4), .MEM_188(11)>
  # PT = nonlocal escaped 
  # SR.268_198 = PHI <_9(4), SR.268_197(11)>
  # PT = nonlocal escaped 
  # SR.269_195 = PHI <_17(4), SR.269_194(11)>
  # PT = nonlocal escaped 
  # SR.270_193 = PHI <_18(4), SR.270_192(11)>
  # PT = nonlocal escaped 
  # __first_190 = PHI <__first_8(4), __first_189(11)>
  # PT = nonlocal escaped 
  # __first$_M_last_186 = PHI <__first$_M_last_4(4), __first$_M_last_185(11)>
  # PT = nonlocal escaped 
  # __first$_M_node_184 = PHI <__first$_M_node_3(4), __first$_M_node_182(11)>
  # DEBUG __first$_M_nodeD.24253 => __first$_M_node_184
  # DEBUG __first$_M_lastD.24252 => __first$_M_last_186
  # DEBUG __firstD.24250 => __first_190
  # DEBUG __nD.24229 => __n_54
  # DEBUG D#16ptD.0 => &D.24222
  # DEBUG thisD.23507 => D#16ptD.0
  # DEBUG D#142ptD.0 => &__firstD.24223
  # DEBUG thisD.23504 => D#142ptD.0
  # VUSE <.MEM_55>
  # PT = nonlocal escaped 
  _121 = MEM[(struct CreditD.18194 * const &)__first_190];
  # .MEM_188 = VDEF <.MEM_55>
  *SR.268_198 = _121;
  # DEBUG thisD.24230 => &__firstD.24223
  # PT = nonlocal escaped 
  __first_123 = __first_190 + 8;
  # DEBUG __firstD.24250 => __first_123
  if (__first_123 == __first$_M_last_186)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [6.7%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [93.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 612, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [6.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.24234 => &__firstD.24223
  # PT = nonlocal escaped 
  __first$_M_node_134 = __first$_M_node_184 + 8;
  # DEBUG thisD.24236 => &__firstD.24223
  # DEBUG __new_nodeD.24235 => __first$_M_node_134
  # DEBUG __first$_M_nodeD.24253 => __first$_M_node_134
  # VUSE <.MEM_188>
  # PT = nonlocal escaped 
  __first_135 = MEM[(struct CreditD.18194 * * *)__first$_M_node_184 + 8B];
  # DEBUG __sizeD.23480 => 8
  # PT = nonlocal escaped 
  __first$_M_last_136 = __first_135 + 512;
  # DEBUG __first$_M_lastD.24252 => __first$_M_last_136
  # DEBUG __firstD.24250 => __first_135
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       5 [93.3%]  (FALSE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_189 = PHI <__first_123(5), __first_135(6)>
  # PT = nonlocal escaped 
  # __first$_M_last_185 = PHI <__first$_M_last_186(5), __first$_M_last_136(6)>
  # PT = nonlocal escaped 
  # __first$_M_node_182 = PHI <__first$_M_node_184(5), __first$_M_node_134(6)>
  # DEBUG __first$_M_nodeD.24253 => __first$_M_node_182
  # DEBUG __first$_M_lastD.24252 => __first$_M_last_185
  # DEBUG __firstD.24250 => __first_189
  # DEBUG thisD.24231 => &D.24222
  # PT = nonlocal escaped 
  _126 = SR.268_198 + 8;
  if (_126 == SR.269_195)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [6.7%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [93.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 612, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [6.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.24238 => &D.24222
  # PT = nonlocal escaped 
  _138 = SR.270_193 + 8;
  # DEBUG thisD.24240 => &D.24222
  # DEBUG __new_nodeD.24239 => _138
  # VUSE <.MEM_188>
  # PT = nonlocal escaped 
  _139 = MEM[(struct CreditD.18194 * * *)SR.270_193 + 8B];
  # DEBUG __sizeD.22490 => 8
  # PT = nonlocal escaped 
  _140 = _139 + 512;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [93.3%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # SR.268_197 = PHI <_126(7), _139(8)>
  # PT = nonlocal escaped 
  # SR.269_194 = PHI <SR.269_195(7), _140(8)>
  # PT = nonlocal escaped 
  # SR.270_192 = PHI <SR.270_193(7), _138(8)>
  # RANGE [0, 9223372036854775806] NONZERO 9223372036854775807
  __n_128 = __n_54 + -1;
  # DEBUG __nD.24229 => __n_128
  # DEBUG __nD.24229 => __n_128
  if (__n_128 <= 0)
    goto <bb 10>;
  else
    goto <bb 11>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_56 = PHI <.MEM_188(9)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 10, next block 1, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}


Creating dr for MEM[(const struct _Deque_iterator &)__x_2(D) + 48]._M_node
analyze_innermost: success.
	base_address: __x_2(D)
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)__x_2(D) + 48]
	Access function 0: 192
Creating dr for MEM[(const struct _Deque_iterator &)__x_2(D) + 16]._M_node
analyze_innermost: success.
	base_address: __x_2(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)__x_2(D) + 16]
	Access function 0: 192
Creating dr for MEM[(const struct _Deque_iterator &)__x_2(D) + 48]._M_cur
analyze_innermost: success.
	base_address: __x_2(D)
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)__x_2(D) + 48]
	Access function 0: 0
Creating dr for MEM[(const struct _Deque_iterator &)__x_2(D) + 48]._M_first
analyze_innermost: success.
	base_address: __x_2(D)
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)__x_2(D) + 48]
	Access function 0: 64
Creating dr for MEM[(const struct _Deque_iterator &)__x_2(D) + 16]._M_last
analyze_innermost: success.
	base_address: __x_2(D)
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)__x_2(D) + 16]
	Access function 0: 128
Creating dr for MEM[(const struct _Deque_iterator &)__x_2(D) + 16]._M_cur
analyze_innermost: success.
	base_address: __x_2(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)__x_2(D) + 16]
	Access function 0: 0
Creating dr for MEM[(struct _Deque_impl *)this_6(D)]._M_map
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_impl *)this_6(D)]
	Access function 0: 0
Creating dr for MEM[(struct _Deque_impl *)this_6(D)]._M_map_size
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_impl *)this_6(D)]
	Access function 0: 64
Creating dr for MEM[(struct _Deque_iterator *)this_6(D) + 16B]._M_cur
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_6(D) + 16B]
	Access function 0: 0
Creating dr for MEM[(struct _Deque_iterator *)this_6(D) + 16B]._M_first
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_6(D) + 16B]
	Access function 0: 64
Creating dr for MEM[(struct _Deque_iterator *)this_6(D) + 16B]._M_last
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_6(D) + 16B]
	Access function 0: 128
Creating dr for MEM[(struct _Deque_iterator *)this_6(D) + 16B]._M_node
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_6(D) + 16B]
	Access function 0: 192
Creating dr for MEM[(struct _Deque_iterator *)this_6(D) + 48B]._M_cur
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_6(D) + 48B]
	Access function 0: 0
Creating dr for MEM[(struct _Deque_iterator *)this_6(D) + 48B]._M_first
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_6(D) + 48B]
	Access function 0: 64
Creating dr for MEM[(struct _Deque_iterator *)this_6(D) + 48B]._M_last
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 64
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_6(D) + 48B]
	Access function 0: 128
Creating dr for MEM[(struct _Deque_iterator *)this_6(D) + 48B]._M_node
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_6(D) + 48B]
	Access function 0: 192
Creating dr for MEM[(struct Credit * const &)__first_190]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * const &)__first_190]
Creating dr for MEM[(struct Credit * const &)__first_190]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * const &)__first_190]
Creating dr for *SR.268_198
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *SR.268_198
Creating dr for *SR.268_198
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *SR.268_198
Creating dr for MEM[(struct Credit * const &)__first_190]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * const &)__first_190]
Creating dr for MEM[(struct Credit * const &)__first_190]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * const &)__first_190]
Creating dr for *SR.268_198
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *SR.268_198
Creating dr for *SR.268_198
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *SR.268_198
Creating dr for MEM[(struct Credit * * *)__first$_M_node_184 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * * *)__first$_M_node_184 + 8B]
Creating dr for MEM[(struct Credit * * *)__first$_M_node_184 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * * *)__first$_M_node_184 + 8B]
Creating dr for MEM[(struct Credit * * *)SR.270_193 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * * *)SR.270_193 + 8B]
Creating dr for MEM[(struct Credit * * *)SR.270_193 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * * *)SR.270_193 + 8B]
Analyzing # of iterations of loop 1
  exit condition 0 < [__n_117 + -1, + , -1](no_overflow)
  bounds on difference of bases: 0 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations (unsigned long) (__n_117 + -1), bounded by 9223372036854775806
Analyzing # of iterations of loop 1
  exit condition 0 < [__n_117 + -1, + , -1](no_overflow)
  bounds on difference of bases: 0 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations (unsigned long) (__n_117 + -1), bounded by 9223372036854775806
Creating dr for MEM[(struct Credit * const &)__first_190]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * const &)__first_190]
Creating dr for MEM[(struct Credit * const &)__first_190]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * const &)__first_190]
Creating dr for *SR.268_198
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *SR.268_198
Creating dr for *SR.268_198
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *SR.268_198
Creating dr for MEM[(struct Credit * const &)__first_190]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * const &)__first_190]
Creating dr for MEM[(struct Credit * const &)__first_190]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * const &)__first_190]
Creating dr for *SR.268_198
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *SR.268_198
Creating dr for *SR.268_198
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *SR.268_198
Creating dr for MEM[(struct Credit * * *)__first$_M_node_184 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * * *)__first$_M_node_184 + 8B]
Creating dr for MEM[(struct Credit * * *)__first$_M_node_184 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * * *)__first$_M_node_184 + 8B]
Creating dr for MEM[(struct Credit * * *)SR.270_193 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * * *)SR.270_193 + 8B]
Creating dr for MEM[(struct Credit * * *)SR.270_193 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct Credit * * *)SR.270_193 + 8B]
Analyzing # of iterations of loop 1
  exit condition 0 < [__n_117 + -1, + , -1](no_overflow)
  bounds on difference of bases: 0 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations (unsigned long) (__n_117 + -1), bounded by 9223372036854775806

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:10)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:7)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:13, LOOPS:1, CONDITIONS:4, STMTS:221)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG this => __x_2(D)
    # DEBUG D#31 => &__x_2(D)->D.20219._M_impl._M_start
    # DEBUG D#32 => &__x_2(D)->D.20219._M_impl._M_finish
    # DEBUG __x => D#32
    # DEBUG __y => D#31
    # DEBUG __size => 8
    # VUSE <.MEM_1(D)>
    _19 = MEM[(const struct _Deque_iterator &)__x_2(D) + 48]._M_node;
    _20 = (long int) _19;
    # VUSE <.MEM_1(D)>
    _21 = MEM[(const struct _Deque_iterator &)__x_2(D) + 16]._M_node;
    _22 = (long int) _21;
    _23 = _20 - _22;
    _24 = _23 /[ex] 8;
    _25 = _24 + -1;
    _26 = _25 * 64;
    # VUSE <.MEM_1(D)>
    _27 = MEM[(const struct _Deque_iterator &)__x_2(D) + 48]._M_cur;
    _28 = (long int) _27;
    # VUSE <.MEM_1(D)>
    _29 = MEM[(const struct _Deque_iterator &)__x_2(D) + 48]._M_first;
    _30 = (long int) _29;
    _31 = _28 - _30;
    _32 = _31 /[ex] 8;
    _33 = _26 + _32;
    # VUSE <.MEM_1(D)>
    _34 = MEM[(const struct _Deque_iterator &)__x_2(D) + 16]._M_last;
    _35 = (long int) _34;
    # VUSE <.MEM_1(D)>
    _36 = MEM[(const struct _Deque_iterator &)__x_2(D) + 16]._M_cur;
    _37 = (long int) _36;
    _38 = _35 - _37;
    _39 = _38 /[ex] 8;
    _40 = _33 + _39;
    _41 = (size_type) _40;
    # DEBUG D#144 => &__x_2(D)->D.20219
    # DEBUG this => D#144
    # DEBUG __a => NULL
    _7 = &this_6(D)->D.20219;
    # DEBUG this => _7
    # DEBUG __a => NULL
    # DEBUG __num_elements => _41
    # DEBUG D#132 => &_7->_M_impl
    # DEBUG this => D#132
    # DEBUG __a => NULL
    # DEBUG this => D#132
    # DEBUG __a => NULL
    # DEBUG this => D#132
    # DEBUG D.22844 => NULL
    # .MEM_42 = VDEF <.MEM_1(D)>
    MEM[(struct _Deque_impl *)this_6(D)]._M_map = 0B;
    # .MEM_43 = VDEF <.MEM_42>
    MEM[(struct _Deque_impl *)this_6(D)]._M_map_size = 0;
    # DEBUG D#89 => &D#132->_M_start
    # DEBUG this => D#89
    # .MEM_44 = VDEF <.MEM_43>
    MEM[(struct _Deque_iterator *)this_6(D) + 16B]._M_cur = 0B;
    # .MEM_45 = VDEF <.MEM_44>
    MEM[(struct _Deque_iterator *)this_6(D) + 16B]._M_first = 0B;
    # .MEM_46 = VDEF <.MEM_45>
    MEM[(struct _Deque_iterator *)this_6(D) + 16B]._M_last = 0B;
    # .MEM_47 = VDEF <.MEM_46>
    MEM[(struct _Deque_iterator *)this_6(D) + 16B]._M_node = 0B;
    # DEBUG D#88 => &D#132->_M_finish
    # DEBUG this => D#88
    # .MEM_48 = VDEF <.MEM_47>
    MEM[(struct _Deque_iterator *)this_6(D) + 48B]._M_cur = 0B;
    # .MEM_49 = VDEF <.MEM_48>
    MEM[(struct _Deque_iterator *)this_6(D) + 48B]._M_first = 0B;
    # .MEM_50 = VDEF <.MEM_49>
    MEM[(struct _Deque_iterator *)this_6(D) + 48B]._M_last = 0B;
    # .MEM_51 = VDEF <.MEM_50>
    MEM[(struct _Deque_iterator *)this_6(D) + 48B]._M_node = 0B;
    # .MEM_52 = VDEF <.MEM_51>
    std::_Deque_base<Credit*, std::allocator<Credit*> >::_M_initialize_map (_7, _41);
    # DEBUG D#145 => &this_6(D)->D.20219
    # DEBUG this => D#145
    # DEBUG D#146 => &this_6(D)->D.20219._M_impl._M_start
    # DEBUG this => &D.20616
    # DEBUG __x => D#146
    # VUSE <.MEM_52>
    _9 = MEM[(const struct iterator &)this_6(D) + 16]._M_cur;
    # VUSE <.MEM_52>
    _17 = MEM[(const struct iterator &)this_6(D) + 16]._M_last;
    # VUSE <.MEM_52>
    _18 = MEM[(const struct iterator &)this_6(D) + 16]._M_node;
    # DEBUG this => __x_2(D)
    # DEBUG D#17 => &__x_2(D)->D.20219._M_impl._M_finish
    # DEBUG this => &D.22039
    # DEBUG __x => D#17
    # VUSE <.MEM_52>
    _10 = MEM[(const struct iterator &)__x_2(D) + 48]._M_cur;
    # VUSE <.MEM_52>
    _13 = MEM[(const struct iterator &)__x_2(D) + 48]._M_first;
    # DEBUG D#161 => MEM[(const struct iterator &)__x_2(D) + 48]._M_last
    # VUSE <.MEM_52>
    _15 = MEM[(const struct iterator &)__x_2(D) + 48]._M_node;
    # DEBUG this => __x_2(D)
    # DEBUG D#18 => &__x_2(D)->D.20219._M_impl._M_start
    # DEBUG this => &D.22040
    # DEBUG __x => D#18
    # VUSE <.MEM_52>
    __first_8 = MEM[(const struct iterator &)__x_2(D) + 16]._M_cur;
    # DEBUG D#162 => MEM[(const struct iterator &)__x_2(D) + 16]._M_first
    # VUSE <.MEM_52>
    __first$_M_last_4 = MEM[(const struct iterator &)__x_2(D) + 16]._M_last;
    # VUSE <.MEM_52>
    __first$_M_node_3 = MEM[(const struct iterator &)__x_2(D) + 16]._M_node;
    # DEBUG __result => &D.20616
    # DEBUG D.24159 => D#143
    # DEBUG this => &D.24163
    # DEBUG __x => &D.20616
    # DEBUG __result => &D.24163
    # DEBUG __assignable => 1
    # DEBUG this => NULL
    # DEBUG __x => &D.24163
    # DEBUG __result => NULL
    # DEBUG this => &D.24177
    # DEBUG __x => NULL
    # DEBUG __result => &D.24177
    # DEBUG this => &D.24197
    # DEBUG __x => &D.24177
    # DEBUG __it => _10
    # DEBUG __it$8 => _13
    # DEBUG __it$16 => D#161
    # DEBUG __it$24 => _15
    # DEBUG __it$_M_cur => _10
    # DEBUG __it$_M_first => _13
    # DEBUG __it$_M_last => D#161
    # DEBUG __it$_M_node => _15
    # DEBUG __it => __first_8
    # DEBUG __it$8 => D#162
    # DEBUG __it$16 => __first$_M_last_4
    # DEBUG __it$24 => __first$_M_node_3
    # DEBUG __it$_M_cur => __first_8
    # DEBUG __it$_M_first => D#162
    # DEBUG __it$_M_last => __first$_M_last_4
    # DEBUG __it$_M_node => __first$_M_node_3
    # DEBUG __result => &D.24197
    # DEBUG this => NULL
    # DEBUG __x => &D.24197
    # DEBUG __it => NULL
    # DEBUG this => NULL
    # DEBUG __x => NULL
    # DEBUG __it => NULL
    # DEBUG this => NULL
    # DEBUG __x => NULL
    # DEBUG __it => _10
    # DEBUG __it$8 => _13
    # DEBUG __it$16 => D#161
    # DEBUG __it$24 => _15
    # DEBUG __it$_M_cur => _10
    # DEBUG __it$_M_first => _13
    # DEBUG __it$_M_last => D#161
    # DEBUG __it$_M_node => _15
    # DEBUG __it => __first_8
    # DEBUG __it$8 => D#162
    # DEBUG __it$16 => __first$_M_last_4
    # DEBUG __it$24 => __first$_M_node_3
    # DEBUG __it$_M_cur => __first_8
    # DEBUG __it$_M_first => D#162
    # DEBUG __it$_M_last => __first$_M_last_4
    # DEBUG __it$_M_node => __first$_M_node_3
    # DEBUG __first => __first_8
    # DEBUG __first$8 => D#162
    # DEBUG __first$16 => __first$_M_last_4
    # DEBUG __first$24 => __first$_M_node_3
    # DEBUG __result => NULL
    # DEBUG __simple => 0
    # DEBUG this => &D.24222
    # DEBUG __x => NULL
    # DEBUG __first => __first_8
    # DEBUG __first$_M_first => D#162
    # DEBUG __first$_M_last => __first$_M_last_4
    # DEBUG __first$_M_node => __first$_M_node_3
    # DEBUG __result => &D.24222
    # DEBUG __x => &__last
    # DEBUG __y => &__first
    # DEBUG __size => 8
    _97 = (long int) _15;
    _99 = (long int) __first$_M_node_3;
    _100 = _97 - _99;
    _101 = _100 /[ex] 8;
    _102 = _101 + -1;
    _103 = _102 * 64;
    _105 = (long int) _10;
    _107 = (long int) _13;
    _108 = _105 - _107;
    _109 = _108 /[ex] 8;
    _110 = _103 + _109;
    _112 = (long int) __first$_M_last_4;
    _114 = (long int) __first_8;
    _115 = _112 - _114;
    _116 = _115 /[ex] 8;
    __n_117 = _110 + _116;
    # DEBUG __n => __n_117
    # DEBUG __n => __n_117
    if (__n_117 <= 0)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 bb_12 }, succs = {bb_1 })
  {
    <bb 3>:
    # .MEM_5 = PHI <.MEM_52(2), .MEM_56(12)>
    # DEBUG this => &D.24162
    # DEBUG __x => &D.24222
    # .MEM_203 = VDEF <.MEM_5>
    D.24222 ={v} {CLOBBER};
    # .MEM_204 = VDEF <.MEM_203>
    D.24197 ={v} {CLOBBER};
    # .MEM_205 = VDEF <.MEM_204>
    D.24177 ={v} {CLOBBER};
    # .MEM_206 = VDEF <.MEM_205>
    D.24163 ={v} {CLOBBER};
    # .MEM_12 = VDEF <.MEM_206>
    D.20616 ={v} {CLOBBER};
    # VUSE <.MEM_12>
    return;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 })
  {
    <bb 4>:

  }
  bb_10 (preds = {bb_9 }, succs = {bb_12 })
  {
    <bb 10>:
    # .MEM_56 = PHI <.MEM_188(9)>

  }
  bb_12 (preds = {bb_10 }, succs = {bb_3 })
  {
    <bb 12>:
    goto <bb 3>;

  }
  loop_1 (header = 5, latch = 11, niter = (unsigned long) (__n_117 + -1), upper_bound = 9223372036854775806)
  {
    bb_5 (preds = {bb_4 bb_11 }, succs = {bb_6 bb_7 })
    {
      <bb 5>:
      # __n_54 = PHI <__n_117(4), __n_128(11)>
      # .MEM_55 = PHI <.MEM_52(4), .MEM_188(11)>
      # SR.268_198 = PHI <_9(4), SR.268_197(11)>
      # SR.269_195 = PHI <_17(4), SR.269_194(11)>
      # SR.270_193 = PHI <_18(4), SR.270_192(11)>
      # __first_190 = PHI <__first_8(4), __first_189(11)>
      # __first$_M_last_186 = PHI <__first$_M_last_4(4), __first$_M_last_185(11)>
      # __first$_M_node_184 = PHI <__first$_M_node_3(4), __first$_M_node_182(11)>
      # DEBUG __first$_M_node => __first$_M_node_184
      # DEBUG __first$_M_last => __first$_M_last_186
      # DEBUG __first => __first_190
      # DEBUG __n => __n_54
      # DEBUG D#16 => &D.24222
      # DEBUG this => D#16
      # DEBUG D#142 => &__first
      # DEBUG this => D#142
      # VUSE <.MEM_55>
      _121 = MEM[(struct Credit * const &)__first_190];
      # .MEM_188 = VDEF <.MEM_55>
      *SR.268_198 = _121;
      # DEBUG this => &__first
      __first_123 = __first_190 + 8;
      # DEBUG __first => __first_123
      if (__first_123 == __first$_M_last_186)
        goto <bb 6>;
      else
        goto <bb 7>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_7 })
    {
      <bb 6>:
      # DEBUG this => &__first
      __first$_M_node_134 = __first$_M_node_184 + 8;
      # DEBUG this => &__first
      # DEBUG __new_node => __first$_M_node_134
      # DEBUG __first$_M_node => __first$_M_node_134
      # VUSE <.MEM_188>
      __first_135 = MEM[(struct Credit * * *)__first$_M_node_184 + 8B];
      # DEBUG __size => 8
      __first$_M_last_136 = __first_135 + 512;
      # DEBUG __first$_M_last => __first$_M_last_136
      # DEBUG __first => __first_135

    }
    bb_7 (preds = {bb_5 bb_6 }, succs = {bb_8 bb_9 })
    {
      <bb 7>:
      # __first_189 = PHI <__first_123(5), __first_135(6)>
      # __first$_M_last_185 = PHI <__first$_M_last_186(5), __first$_M_last_136(6)>
      # __first$_M_node_182 = PHI <__first$_M_node_184(5), __first$_M_node_134(6)>
      # DEBUG __first$_M_node => __first$_M_node_182
      # DEBUG __first$_M_last => __first$_M_last_185
      # DEBUG __first => __first_189
      # DEBUG this => &D.24222
      _126 = SR.268_198 + 8;
      if (_126 == SR.269_195)
        goto <bb 8>;
      else
        goto <bb 9>;

    }
    bb_8 (preds = {bb_7 }, succs = {bb_9 })
    {
      <bb 8>:
      # DEBUG this => &D.24222
      _138 = SR.270_193 + 8;
      # DEBUG this => &D.24222
      # DEBUG __new_node => _138
      # VUSE <.MEM_188>
      _139 = MEM[(struct Credit * * *)SR.270_193 + 8B];
      # DEBUG __size => 8
      _140 = _139 + 512;

    }
    bb_9 (preds = {bb_7 bb_8 }, succs = {bb_10 bb_11 })
    {
      <bb 9>:
      # SR.268_197 = PHI <_126(7), _139(8)>
      # SR.269_194 = PHI <SR.269_195(7), _140(8)>
      # SR.270_192 = PHI <SR.270_193(7), _138(8)>
      __n_128 = __n_54 + -1;
      # DEBUG __n => __n_128
      # DEBUG __n => __n_128
      if (__n_128 <= 0)
        goto <bb 10>;
      else
        goto <bb 11>;

    }
    bb_11 (preds = {bb_9 }, succs = {bb_5 })
    {
      <bb 11>:
      goto <bb 5>;

    }
  }
}

Pass statistics:
----------------

std::deque<_Tp, _Alloc>::deque(const std::deque<_Tp, _Alloc>&) [with _Tp = Credit*; _Alloc = std::allocator<Credit*>] (struct dequeD.19255 * const thisD.20191, const struct dequeD.19255 & __xD.20192)
{
  struct CreditD.18194 * * * __first$_M_nodeD.24253;
  struct CreditD.18194 * * __first$_M_lastD.24252;
  struct CreditD.18194 * * const __firstD.24250;
  struct CreditD.18194 * * * SR.270D.24249;
  struct CreditD.18194 * * SR.269D.24248;
  struct CreditD.18194 * * SR.268D.24247;
  struct CreditD.18194 * * * __first$24D.24246;
  struct CreditD.18194 * * __first$16D.24245;
  struct CreditD.18194 * * __first$8D.24244;
  struct CreditD.18194 * * __firstD.24243;
  _DistanceD.21529 __nD.24229;
  struct _Deque_iteratorD.19539 __firstD.24223;
  struct _Deque_iteratorD.19539 __lastD.24224;
  struct _Deque_iteratorD.19539 __lastD.24204;
  struct _Deque_iteratorD.19539 __firstD.24205;
  struct _Deque_iteratorD.19537 D.24222;
  struct CreditD.18194 * * __itD.24221;
  struct CreditD.18194 * * __it$8D.24220;
  struct CreditD.18194 * * __it$16D.24219;
  struct CreditD.18194 * * * __it$24D.24217;
  struct CreditD.18194 * * __itD.24216;
  struct CreditD.18194 * * __it$8D.24215;
  struct CreditD.18194 * * __it$16D.24214;
  struct CreditD.18194 * * * __it$24D.24212;
  struct _Deque_iteratorD.19539 __firstD.24198;
  struct _Deque_iteratorD.19539 __lastD.24199;
  struct _Deque_iteratorD.19537 D.24197;
  struct _Deque_iteratorD.19539 D.24196;
  struct _Deque_iteratorD.19539 D.24195;
  struct CreditD.18194 * * __itD.24194;
  struct CreditD.18194 * * __it$8D.24193;
  struct CreditD.18194 * * __it$16D.24192;
  struct CreditD.18194 * * * __it$24D.24191;
  struct CreditD.18194 * * __itD.24190;
  struct CreditD.18194 * * __it$8D.24189;
  struct CreditD.18194 * * __it$16D.24188;
  struct CreditD.18194 * * * __it$24D.24187;
  struct _Deque_iteratorD.19539 __firstD.24178;
  struct _Deque_iteratorD.19539 __lastD.24179;
  struct _Deque_iteratorD.19539 __lastD.24173;
  struct _Deque_iteratorD.19539 __firstD.24174;
  struct _Deque_iteratorD.19537 D.24177;
  struct _Deque_iteratorD.19539 __firstD.24164;
  struct _Deque_iteratorD.19539 __lastD.24165;
  struct _Deque_iteratorD.19537 D.24163;
  struct _Deque_iteratorD.19537 D.24162;
  struct _Deque_iteratorD.19539 __firstD.24156;
  struct _Deque_iteratorD.19539 __lastD.24157;
  struct _Deque_iteratorD.19539 D.22040;
  struct _Deque_iteratorD.19539 D.22039;
  struct _Deque_iteratorD.19537 D.20616;
  struct _Deque_baseD.19304 * _7;
  struct CreditD.18194 * * _9;
  struct CreditD.18194 * * _10;
  struct CreditD.18194 * * _13;
  struct CreditD.18194 * * * _15;
  struct CreditD.18194 * * _17;
  struct CreditD.18194 * * * _18;
  struct CreditD.18194 * * * _19;
  long intD.12 _20;
  struct CreditD.18194 * * * _21;
  long intD.12 _22;
  long intD.12 _23;
  long intD.12 _24;
  long intD.12 _25;
  long intD.12 _26;
  struct CreditD.18194 * * _27;
  long intD.12 _28;
  struct CreditD.18194 * * _29;
  long intD.12 _30;
  long intD.12 _31;
  long intD.12 _32;
  long intD.12 _33;
  struct CreditD.18194 * * _34;
  long intD.12 _35;
  struct CreditD.18194 * * _36;
  long intD.12 _37;
  long intD.12 _38;
  long intD.12 _39;
  difference_typeD.19567 _40;
  size_typeD.19746 _41;
  long intD.12 _97;
  long intD.12 _99;
  long intD.12 _100;
  long intD.12 _101;
  long intD.12 _102;
  long intD.12 _103;
  long intD.12 _105;
  long intD.12 _107;
  long intD.12 _108;
  long intD.12 _109;
  long intD.12 _110;
  long intD.12 _112;
  long intD.12 _114;
  long intD.12 _115;
  long intD.12 _116;
  struct CreditD.18194 * _121;
  struct CreditD.18194 * * _126;
  struct CreditD.18194 * * * _138;
  struct CreditD.18194 * * _139;
  struct CreditD.18194 * * _140;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.23653 => __x_2(D)
  # DEBUG D#31ptD.0 => &__x_2(D)->D.20219._M_implD.19670._M_startD.19674
  # DEBUG D#32ptD.0 => &__x_2(D)->D.20219._M_implD.19670._M_finishD.19675
  # DEBUG __xD.23655 => D#32ptD.0
  # DEBUG __yD.23654 => D#31ptD.0
  # DEBUG __sizeD.22490 => 8
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _19 = MEM[(const struct _Deque_iteratorD.19537 &)__x_2(D) + 48]._M_nodeD.19572;
  _20 = (long intD.12) _19;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _21 = MEM[(const struct _Deque_iteratorD.19537 &)__x_2(D) + 16]._M_nodeD.19572;
  _22 = (long intD.12) _21;
  _23 = _20 - _22;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _24 = _23 /[ex] 8;
  # RANGE [-1152921504606846977, 1152921504606846974]
  _25 = _24 + -1;
  # RANGE [-9223372036854775808, 9223372036854775807] NONZERO 18446744073709551552
  _26 = _25 * 64;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _27 = MEM[(const struct _Deque_iteratorD.19537 &)__x_2(D) + 48]._M_curD.19569;
  _28 = (long intD.12) _27;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _29 = MEM[(const struct _Deque_iteratorD.19537 &)__x_2(D) + 48]._M_firstD.19570;
  _30 = (long intD.12) _29;
  _31 = _28 - _30;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _32 = _31 /[ex] 8;
  _33 = _26 + _32;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _34 = MEM[(const struct _Deque_iteratorD.19537 &)__x_2(D) + 16]._M_lastD.19571;
  _35 = (long intD.12) _34;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _36 = MEM[(const struct _Deque_iteratorD.19537 &)__x_2(D) + 16]._M_curD.19569;
  _37 = (long intD.12) _36;
  _38 = _35 - _37;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _39 = _38 /[ex] 8;
  _40 = _33 + _39;
  # RANGE [0, 18446744073709551615]
  _41 = (size_typeD.19746) _40;
  # DEBUG D#144ptD.0 => &__x_2(D)->D.20219
  # DEBUG thisD.23651 => D#144ptD.0
  # DEBUG __aD.23649 => NULL
  # PT = nonlocal 
  _7 = &this_6(D)->D.20219;
  # DEBUG thisD.23641 => _7
  # DEBUG __aD.23642 => NULL
  # DEBUG __num_elementsD.23643 => _41
  # DEBUG D#132ptD.0 => &_7->_M_implD.19670
  # DEBUG thisD.23646 => D#132ptD.0
  # DEBUG __aD.23645 => NULL
  # DEBUG thisD.22848 => D#132ptD.0
  # DEBUG __aD.22849 => NULL
  # DEBUG thisD.22843 => D#132ptD.0
  # DEBUG D.22844 => NULL
  # .MEM_42 = VDEF <.MEM_1(D)>
  MEM[(struct _Deque_implD.19638 *)this_6(D)]._M_mapD.19672 = 0B;
  # .MEM_43 = VDEF <.MEM_42>
  MEM[(struct _Deque_implD.19638 *)this_6(D)]._M_map_sizeD.19673 = 0;
  # DEBUG D#89ptD.0 => &D#132ptD.0->_M_startD.19674
  # DEBUG thisD.23647 => D#89ptD.0
  # .MEM_44 = VDEF <.MEM_43>
  MEM[(struct _Deque_iteratorD.19537 *)this_6(D) + 16B]._M_curD.19569 = 0B;
  # .MEM_45 = VDEF <.MEM_44>
  MEM[(struct _Deque_iteratorD.19537 *)this_6(D) + 16B]._M_firstD.19570 = 0B;
  # .MEM_46 = VDEF <.MEM_45>
  MEM[(struct _Deque_iteratorD.19537 *)this_6(D) + 16B]._M_lastD.19571 = 0B;
  # .MEM_47 = VDEF <.MEM_46>
  MEM[(struct _Deque_iteratorD.19537 *)this_6(D) + 16B]._M_nodeD.19572 = 0B;
  # DEBUG D#88ptD.0 => &D#132ptD.0->_M_finishD.19675
  # DEBUG thisD.23648 => D#88ptD.0
  # .MEM_48 = VDEF <.MEM_47>
  MEM[(struct _Deque_iteratorD.19537 *)this_6(D) + 48B]._M_curD.19569 = 0B;
  # .MEM_49 = VDEF <.MEM_48>
  MEM[(struct _Deque_iteratorD.19537 *)this_6(D) + 48B]._M_firstD.19570 = 0B;
  # .MEM_50 = VDEF <.MEM_49>
  MEM[(struct _Deque_iteratorD.19537 *)this_6(D) + 48B]._M_lastD.19571 = 0B;
  # .MEM_51 = VDEF <.MEM_50>
  MEM[(struct _Deque_iteratorD.19537 *)this_6(D) + 48B]._M_nodeD.19572 = 0B;
  # .MEM_52 = VDEF <.MEM_51>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZNSt11_Deque_baseIP6CreditSaIS1_EE17_M_initialize_mapEmD.19657 (_7, _41);
  # DEBUG D#145ptD.0 => &this_6(D)->D.20219
  # DEBUG thisD.23639 => D#145ptD.0
  # DEBUG D#146ptD.0 => &this_6(D)->D.20219._M_implD.19670._M_startD.19674
  # DEBUG thisD.23637 => &D.20616
  # DEBUG __xD.23638 => D#146ptD.0
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _9 = MEM[(const struct iteratorD.19557 &)this_6(D) + 16]._M_curD.19569;
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _17 = MEM[(const struct iteratorD.19557 &)this_6(D) + 16]._M_lastD.19571;
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _18 = MEM[(const struct iteratorD.19557 &)this_6(D) + 16]._M_nodeD.19572;
  # DEBUG thisD.23634 => __x_2(D)
  # DEBUG D#17ptD.0 => &__x_2(D)->D.20219._M_implD.19670._M_finishD.19675
  # DEBUG thisD.23636 => &D.22039
  # DEBUG __xD.23635 => D#17ptD.0
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _10 = MEM[(const struct iteratorD.20509 &)__x_2(D) + 48]._M_curD.19569;
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _13 = MEM[(const struct iteratorD.20509 &)__x_2(D) + 48]._M_firstD.19570;
  # DEBUG D#161ptD.0 => MEM[(const struct iteratorD.20509 &)__x_2(D) + 48]._M_lastD.19571
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _15 = MEM[(const struct iteratorD.20509 &)__x_2(D) + 48]._M_nodeD.19572;
  # DEBUG thisD.23631 => __x_2(D)
  # DEBUG D#18ptD.0 => &__x_2(D)->D.20219._M_implD.19670._M_startD.19674
  # DEBUG thisD.23633 => &D.22040
  # DEBUG __xD.23632 => D#18ptD.0
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  __first_8 = MEM[(const struct iteratorD.20509 &)__x_2(D) + 16]._M_curD.19569;
  # DEBUG D#162ptD.0 => MEM[(const struct iteratorD.20509 &)__x_2(D) + 16]._M_firstD.19570
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  __first$_M_last_4 = MEM[(const struct iteratorD.20509 &)__x_2(D) + 16]._M_lastD.19571;
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  __first$_M_node_3 = MEM[(const struct iteratorD.20509 &)__x_2(D) + 16]._M_nodeD.19572;
  # DEBUG __resultD.24158 => &D.20616
  # DEBUG D.24159 => D#143ptD.0
  # DEBUG thisD.24161 => &D.24163
  # DEBUG __xD.24160 => &D.20616
  # DEBUG __resultD.24166 => &D.24163
  # DEBUG __assignableD.24169 => 1
  # DEBUG thisD.24171 => NULL
  # DEBUG __xD.24170 => &D.24163
  # DEBUG __resultD.24172 => NULL
  # DEBUG thisD.24176 => &D.24177
  # DEBUG __xD.24175 => NULL
  # DEBUG __resultD.24180 => &D.24177
  # DEBUG thisD.24182 => &D.24197
  # DEBUG __xD.24181 => &D.24177
  # DEBUG __itD.24190 => _10
  # DEBUG __it$8D.24189 => _13
  # DEBUG __it$16D.24188 => D#161ptD.0
  # DEBUG __it$24D.24187 => _15
  # DEBUG __it$_M_curD.23584 => _10
  # DEBUG __it$_M_firstD.23583 => _13
  # DEBUG __it$_M_lastD.23582 => D#161ptD.0
  # DEBUG __it$_M_nodeD.23581 => _15
  # DEBUG __itD.24194 => __first_8
  # DEBUG __it$8D.24193 => D#162ptD.0
  # DEBUG __it$16D.24192 => __first$_M_last_4
  # DEBUG __it$24D.24191 => __first$_M_node_3
  # DEBUG __it$_M_curD.23578 => __first_8
  # DEBUG __it$_M_firstD.23577 => D#162ptD.0
  # DEBUG __it$_M_lastD.23576 => __first$_M_last_4
  # DEBUG __it$_M_nodeD.23575 => __first$_M_node_3
  # DEBUG __resultD.24200 => &D.24197
  # DEBUG thisD.24202 => NULL
  # DEBUG __xD.24201 => &D.24197
  # DEBUG __itD.23539 => NULL
  # DEBUG thisD.23541 => NULL
  # DEBUG __xD.23540 => NULL
  # DEBUG __itD.23542 => NULL
  # DEBUG thisD.23544 => NULL
  # DEBUG __xD.23543 => NULL
  # DEBUG __itD.24216 => _10
  # DEBUG __it$8D.24215 => _13
  # DEBUG __it$16D.24214 => D#161ptD.0
  # DEBUG __it$24D.24212 => _15
  # DEBUG __it$_M_curD.23538 => _10
  # DEBUG __it$_M_firstD.23537 => _13
  # DEBUG __it$_M_lastD.23536 => D#161ptD.0
  # DEBUG __it$_M_nodeD.23535 => _15
  # DEBUG __itD.24221 => __first_8
  # DEBUG __it$8D.24220 => D#162ptD.0
  # DEBUG __it$16D.24219 => __first$_M_last_4
  # DEBUG __it$24D.24217 => __first$_M_node_3
  # DEBUG __it$_M_curD.23532 => __first_8
  # DEBUG __it$_M_firstD.23531 => D#162ptD.0
  # DEBUG __it$_M_lastD.23530 => __first$_M_last_4
  # DEBUG __it$_M_nodeD.23529 => __first$_M_node_3
  # DEBUG __firstD.24243 => __first_8
  # DEBUG __first$8D.24244 => D#162ptD.0
  # DEBUG __first$16D.24245 => __first$_M_last_4
  # DEBUG __first$24D.24246 => __first$_M_node_3
  # DEBUG __resultD.24203 => NULL
  # DEBUG __simpleD.24209 => 0
  # DEBUG thisD.24211 => &D.24222
  # DEBUG __xD.24210 => NULL
  # DEBUG __firstD.24250 => __first_8
  # DEBUG __first$_M_firstD.24251 => D#162ptD.0
  # DEBUG __first$_M_lastD.24252 => __first$_M_last_4
  # DEBUG __first$_M_nodeD.24253 => __first$_M_node_3
  # DEBUG __resultD.24225 => &D.24222
  # DEBUG __xD.24233 => &__lastD.24224
  # DEBUG __yD.24232 => &__firstD.24223
  # DEBUG __sizeD.23480 => 8
  _97 = (long intD.12) _15;
  _99 = (long intD.12) __first$_M_node_3;
  _100 = _97 - _99;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _101 = _100 /[ex] 8;
  # RANGE [-1152921504606846977, 1152921504606846974]
  _102 = _101 + -1;
  # RANGE [-9223372036854775808, 9223372036854775807] NONZERO 18446744073709551552
  _103 = _102 * 64;
  _105 = (long intD.12) _10;
  _107 = (long intD.12) _13;
  _108 = _105 - _107;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _109 = _108 /[ex] 8;
  _110 = _103 + _109;
  _112 = (long intD.12) __first$_M_last_4;
  _114 = (long intD.12) __first_8;
  _115 = _112 - _114;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _116 = _115 /[ex] 8;
  __n_117 = _110 + _116;
  # DEBUG __nD.24229 => __n_117
  # DEBUG __nD.24229 => __n_117
  if (__n_117 <= 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_52(2), .MEM_56(12)>
  # DEBUG thisD.24228 => &D.24162
  # DEBUG __xD.24227 => &D.24222
  # .MEM_203 = VDEF <.MEM_5>
  D.24222 ={v} {CLOBBER};
  # .MEM_204 = VDEF <.MEM_203>
  D.24197 ={v} {CLOBBER};
  # .MEM_205 = VDEF <.MEM_204>
  D.24177 ={v} {CLOBBER};
  # .MEM_206 = VDEF <.MEM_205>
  D.24163 ={v} {CLOBBER};
  # .MEM_12 = VDEF <.MEM_206>
  D.20616 ={v} {CLOBBER};
  # VUSE <.MEM_12>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # __n_54 = PHI <__n_117(4), __n_128(11)>
  # .MEM_55 = PHI <.MEM_52(4), .MEM_188(11)>
  # PT = nonlocal escaped 
  # SR.268_198 = PHI <_9(4), SR.268_197(11)>
  # PT = nonlocal escaped 
  # SR.269_195 = PHI <_17(4), SR.269_194(11)>
  # PT = nonlocal escaped 
  # SR.270_193 = PHI <_18(4), SR.270_192(11)>
  # PT = nonlocal escaped 
  # __first_190 = PHI <__first_8(4), __first_189(11)>
  # PT = nonlocal escaped 
  # __first$_M_last_186 = PHI <__first$_M_last_4(4), __first$_M_last_185(11)>
  # PT = nonlocal escaped 
  # __first$_M_node_184 = PHI <__first$_M_node_3(4), __first$_M_node_182(11)>
  # DEBUG __first$_M_nodeD.24253 => __first$_M_node_184
  # DEBUG __first$_M_lastD.24252 => __first$_M_last_186
  # DEBUG __firstD.24250 => __first_190
  # DEBUG __nD.24229 => __n_54
  # DEBUG D#16ptD.0 => &D.24222
  # DEBUG thisD.23507 => D#16ptD.0
  # DEBUG D#142ptD.0 => &__firstD.24223
  # DEBUG thisD.23504 => D#142ptD.0
  # VUSE <.MEM_55>
  # PT = nonlocal escaped 
  _121 = MEM[(struct CreditD.18194 * const &)__first_190];
  # .MEM_188 = VDEF <.MEM_55>
  *SR.268_198 = _121;
  # DEBUG thisD.24230 => &__firstD.24223
  # PT = nonlocal escaped 
  __first_123 = __first_190 + 8;
  # DEBUG __firstD.24250 => __first_123
  if (__first_123 == __first$_M_last_186)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [6.7%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [93.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 612, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [6.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.24234 => &__firstD.24223
  # PT = nonlocal escaped 
  __first$_M_node_134 = __first$_M_node_184 + 8;
  # DEBUG thisD.24236 => &__firstD.24223
  # DEBUG __new_nodeD.24235 => __first$_M_node_134
  # DEBUG __first$_M_nodeD.24253 => __first$_M_node_134
  # VUSE <.MEM_188>
  # PT = nonlocal escaped 
  __first_135 = MEM[(struct CreditD.18194 * * *)__first$_M_node_184 + 8B];
  # DEBUG __sizeD.23480 => 8
  # PT = nonlocal escaped 
  __first$_M_last_136 = __first_135 + 512;
  # DEBUG __first$_M_lastD.24252 => __first$_M_last_136
  # DEBUG __firstD.24250 => __first_135
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       5 [93.3%]  (FALSE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_189 = PHI <__first_123(5), __first_135(6)>
  # PT = nonlocal escaped 
  # __first$_M_last_185 = PHI <__first$_M_last_186(5), __first$_M_last_136(6)>
  # PT = nonlocal escaped 
  # __first$_M_node_182 = PHI <__first$_M_node_184(5), __first$_M_node_134(6)>
  # DEBUG __first$_M_nodeD.24253 => __first$_M_node_182
  # DEBUG __first$_M_lastD.24252 => __first$_M_last_185
  # DEBUG __firstD.24250 => __first_189
  # DEBUG thisD.24231 => &D.24222
  # PT = nonlocal escaped 
  _126 = SR.268_198 + 8;
  if (_126 == SR.269_195)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [6.7%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [93.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 612, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [6.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.24238 => &D.24222
  # PT = nonlocal escaped 
  _138 = SR.270_193 + 8;
  # DEBUG thisD.24240 => &D.24222
  # DEBUG __new_nodeD.24239 => _138
  # VUSE <.MEM_188>
  # PT = nonlocal escaped 
  _139 = MEM[(struct CreditD.18194 * * *)SR.270_193 + 8B];
  # DEBUG __sizeD.22490 => 8
  # PT = nonlocal escaped 
  _140 = _139 + 512;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [93.3%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # SR.268_197 = PHI <_126(7), _139(8)>
  # PT = nonlocal escaped 
  # SR.269_194 = PHI <SR.269_195(7), _140(8)>
  # PT = nonlocal escaped 
  # SR.270_192 = PHI <SR.270_193(7), _138(8)>
  # RANGE [0, 9223372036854775806] NONZERO 9223372036854775807
  __n_128 = __n_54 + -1;
  # DEBUG __nD.24229 => __n_128
  # DEBUG __nD.24229 => __n_128
  if (__n_128 <= 0)
    goto <bb 10>;
  else
    goto <bb 11>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 9, next block 12, flags: (NEW)
;;    pred:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_56 = PHI <.MEM_188(9)>
;;    succ:       12 [100.0%]  (FALLTHRU)

;;   basic block 12, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 10, next block 11, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU)
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 12, next block 1, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}



;; Function static Credit* Credit::New() (_ZN6Credit3NewEv, funcdef_no=1087, decl_uid=19249, cgraph_uid=216, symbol_order=218)


Pass statistics:
----------------

static Credit* Credit::New() ()
{
  struct _Rb_tree_nodeD.18419 * __xD.24385;
  struct CreditD.18194 * * __tmp$_M_curD.23458;
  struct CreditD.18194 * cD.20320;
  struct CreditD.18194 * * const _3;
  voidD.45 * _5;
  struct CreditD.18194 * c.2_9;
  struct _Rep_typeD.18413 * _11;
  struct _Rb_tree_node_baseD.14415 * _14;
  struct _Rb_tree_node_baseD.14415 * _15;
  struct CreditD.18194 * * _16;
  struct CreditD.18194 * * * _17;
  struct CreditD.18194 * * _18;
  struct _Rb_tree_node_baseD.14415 * _21;
  struct CreditD.18194 * * _31;
  struct CreditD.18194 * * _32;
  struct CreditD.18194 * * _33;
  struct CreditD.18194 * pretmp_34;
  struct CreditD.18194 * * _36;
  struct CreditD.18194 * prephitmp_38;
  struct CreditD.18194 * * pretmp_39;
  struct CreditD.18194 * * _41;
  struct CreditD.18194 * * _42;
  struct CreditD.18194 * * _43;
  struct CreditD.18194 * * * _44;
  struct CreditD.18194 * * * _45;
  struct CreditD.18194 * * _46;
  struct CreditD.18194 * * _47;
  struct CreditD.18194 * * _48;
  struct CreditD.18194 * * prephitmp_56;
  struct CreditD.18194 * prephitmp_58;
  struct CreditD.18194 * pretmp_59;
  struct CreditD.18194 * pretmp_60;
  struct CreditD.18194 * pretmp_61;

;;   basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.23436 => &_ZN6Credit5_freeED.19258
  # DEBUG D#15ptD.0 => &_ZN6Credit5_freeED.19258.cD.20262
  # DEBUG thisD.23437 => D#15ptD.0
  # DEBUG D#13ptD.0 => &D#15ptD.0->D.20219._M_implD.19670._M_startD.19674
  # DEBUG D#14ptD.0 => &D#15ptD.0->D.20219._M_implD.19670._M_finishD.19675
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __tmp$_M_cur_8 = MEM[(struct CreditD.18194 * * *)&_ZN6Credit5_freeED.19258 + 48B];
  # DEBUG D#11ptD.0 => D#14ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _3 = MEM[(struct CreditD.18194 * * *)&_ZN6Credit5_freeED.19258 + 16B];
  # DEBUG D#12ptD.0 => D#13ptD.0
  # DEBUG __xD.23438 => D#11ptD.0
  # DEBUG __yD.23439 => D#12ptD.0
  if (_3 == __tmp$_M_cur_8)
    goto <bb 3>;
  else
    goto <bb 8>;
;;    succ:       3 [4.4%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [95.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 4900, maybe hot
;;   Invalid sum of incoming frequencies 441, should be 4900
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [4.4%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_4 = VDEF <.MEM_2(D)>
  # PT = { D.24412 } (escaped heap)
  # USE = nonlocal null { D.19257 D.20320 D.24412 } (nonlocal, escaped)
  # CLB = nonlocal null { D.19257 D.20320 D.24412 } (nonlocal, escaped)
  _5 = _ZnwmD.2764 (56);
  # DEBUG thisD.24375 => _5
  # DEBUG D#105ptD.0 => &MEM[(struct CreditD.18194 *)_5].vcD.19243
  # DEBUG thisD.24376 => D#105ptD.0
  # DEBUG D#45ptD.0 => &D#105ptD.0->_M_tD.18416
  # DEBUG thisD.24377 => D#45ptD.0
  # DEBUG D#44ptD.0 => &MEM[(struct _Rb_treeD.18415 *)D#45ptD.0]._M_implD.18494
  # DEBUG thisD.24378 => D#44ptD.0
  # DEBUG thisD.22593 => D#44ptD.0
  # DEBUG thisD.22590 => D#44ptD.0
  # .MEM_49 = VDEF <.MEM_4>
  MEM[(struct _Rb_tree_implD.18506 *)_5]._M_headerD.18660._M_colorD.14419 = 0;
  # .MEM_50 = VDEF <.MEM_49>
  MEM[(struct _Rb_tree_implD.18506 *)_5]._M_headerD.18660._M_parentD.14420 = 0B;
  # .MEM_53 = VDEF <.MEM_50>
  MEM[(struct _Rb_tree_implD.18506 *)_5]._M_node_countD.18661 = 0;
  # DEBUG thisD.24379 => D#44ptD.0
  # PT = { D.24412 } (escaped heap)
  _21 = &MEM[(struct _Rb_tree_implD.18506 *)_5]._M_headerD.18660;
  # .MEM_54 = VDEF <.MEM_53>
  MEM[(struct _Rb_tree_implD.18506 *)_5]._M_headerD.18660._M_leftD.14421 = _21;
  # .MEM_55 = VDEF <.MEM_54>
  MEM[(struct _Rb_tree_implD.18506 *)_5]._M_headerD.18660._M_rightD.14422 = _21;
  # DEBUG thisD.24380 => _5
  # DEBUG D#104ptD.0 => &MEM[(struct CreditD.18194 *)_5].vcD.19243
  # DEBUG thisD.24381 => D#104ptD.0
  # DEBUG D#165ptD.0 => &MEM[(struct setD.18198 *)_5]._M_tD.18416
  # DEBUG thisD.24382 => D#165ptD.0
  # DEBUG D#2ptD.0 => D#165ptD.0
  # DEBUG thisD.22970 => D#2ptD.0
  # DEBUG thisD.24384 => D#165ptD.0
  # DEBUG __xD.24385 => 0B
  # DEBUG __xD.24385 => 0B
  # DEBUG D#103ptD.0 => &MEM[(struct _Rb_treeD.18415 *)D#165ptD.0]._M_implD.18494
  # DEBUG thisD.24383 => D#103ptD.0
  # .MEM_62 = VDEF <.MEM_55>
  MEM[(struct CreditD.18194 *)_5].headD.19244 = 0;
  # .MEM_63 = VDEF <.MEM_62>
  MEM[(struct CreditD.18194 *)_5].tailD.19245 = 0;
  # .MEM_64 = VDEF <.MEM_63>
  MEM[(struct CreditD.18194 *)_5].idD.19246 = -1;
  # .MEM_7 = VDEF <.MEM_64>
  cD.20320 = _5;
  # DEBUG thisD.23441 => &_ZN6Credit4_allED.19257
  # DEBUG __xD.23442 => &cD.20320
  # DEBUG thisD.24367 => &_ZN6Credit4_allED.19257.cD.20262
  # DEBUG __xD.24368 => &cD.20320
  # VUSE <.MEM_7>
  # PT = nonlocal escaped 
  _31 = MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569;
  # VUSE <.MEM_7>
  # PT = nonlocal escaped 
  _32 = MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_lastD.19571;
  # PT = nonlocal escaped 
  _33 = _32 + 18446744073709551608;
  if (_31 != _33)
    goto <bb 4>;
  else
    goto <bb 7>;
;;    succ:       4 [93.3%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [6.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 411, maybe hot
;;   Invalid sum of incoming frequencies 4571, should be 411
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [93.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#141ptD.0 => &MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670
  # DEBUG D#21ptD.0 => D#141ptD.0
  # DEBUG __pD.24371 => _31
  # DEBUG __argD.24370 => &cD.20320
  # DEBUG __aD.24369 => D#21ptD.0
  # DEBUG D#20ptD.0 => D#21ptD.0
  # DEBUG D#19ptD.0 => D#20ptD.0
  # DEBUG __pD.24374 => _31
  # DEBUG __valD.24373 => &cD.20320
  # DEBUG thisD.24372 => D#19ptD.0
  # DEBUG D#1ptD.0 => 8
  # DEBUG __pD.22446 => _31
  # DEBUG D.22447 => D#1ptD.0
  if (_31 != 0B)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 370, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_66 = VDEF <.MEM_7>
  *_31 = _5;
  # VUSE <.MEM_66>
  pretmp_39 = MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569;
  # VUSE <.MEM_66>
  pretmp_61 = cD.20320;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 411, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_30 = PHI <.MEM_7(4), .MEM_66(5)>
  # PT = nonlocal escaped 
  # prephitmp_56 = PHI <_31(4), pretmp_39(5)>
  # prephitmp_58 = PHI <_5(4), pretmp_61(5)>
  # PT = nonlocal escaped 
  _36 = prephitmp_56 + 8;
  # .MEM_67 = VDEF <.MEM_30>
  MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569 = _36;
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 30, maybe hot
;;   Invalid sum of incoming frequencies 329, should be 30
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       3 [6.7%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_65 = VDEF <.MEM_7>
  # USE = nonlocal null { D.19257 D.20320 D.24412 } (nonlocal, escaped)
  # CLB = nonlocal null { D.19257 D.20320 D.24412 } (nonlocal, escaped)
  _ZNSt5dequeIP6CreditSaIS1_EE16_M_push_back_auxERKS1_D.20026 (&_ZN6Credit4_allED.19257.cD.20262, &cD.20320);
  # VUSE <.MEM_65>
  pretmp_59 = cD.20320;
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 9559, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       2 [95.6%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.23448 => &_ZN6Credit5_freeED.19258
  # DEBUG D#30ptD.0 => &_ZN6Credit5_freeED.19258.cD.20262
  # DEBUG thisD.23449 => D#30ptD.0
  # DEBUG thisD.23451 => D#30ptD.0
  # DEBUG D#3ptD.0 => &D#30ptD.0->D.20219._M_implD.19670._M_finishD.19675
  # DEBUG thisD.23453 => &__tmpD.23450
  # DEBUG __xD.23452 => D#3ptD.0
  # DEBUG __tmp$_M_curD.23458 => __tmp$_M_cur_8
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _16 = MEM[(const struct iteratorD.19557 &)&_ZN6Credit5_freeED.19258 + 48]._M_firstD.19570;
  # DEBUG __tmp$_M_firstD.22509 => _16
  # DEBUG D#29ptD.0 => MEM[(const struct iteratorD.19557 &)D#30ptD.0 + 48]._M_lastD.19571
  # DEBUG __tmp$_M_lastD.22510 => D#29ptD.0
  # DEBUG D#166ptD.0 => MEM[(const struct iteratorD.19557 &)&_ZN6Credit5_freeED.19258 + 48]._M_nodeD.19572
  # DEBUG __tmp$_M_nodeD.22511 => D#166ptD.0
  # DEBUG thisD.23454 => &__tmpD.23450
  if (__tmp$_M_cur_8 == _16)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1434, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _17 = MEM[(const struct iteratorD.19557 &)&_ZN6Credit5_freeED.19258 + 48]._M_nodeD.19572;
  # DEBUG D#28ptD.0 => D#166ptD.0 + 18446744073709551608
  # DEBUG thisD.23456 => &__tmpD.23450
  # DEBUG __new_nodeD.23455 => D#28ptD.0
  # DEBUG __tmp$_M_nodeD.22511 => D#28ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _18 = MEM[(struct CreditD.18194 * * *)_17 + -8B];
  # DEBUG __tmp$_M_firstD.22509 => _18
  # DEBUG __sizeD.22490 => 8
  # PT = nonlocal escaped 
  __tmp$_M_cur_19 = _18 + 512;
  # DEBUG __tmp$_M_lastD.22510 => __tmp$_M_cur_19
  # DEBUG __tmp$_M_curD.23458 => __tmp$_M_cur_19
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 9559, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [85.0%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __tmp$_M_cur_20 = PHI <__tmp$_M_cur_8(8), __tmp$_M_cur_19(9)>
  # DEBUG __tmp$_M_curD.23458 => __tmp$_M_cur_20
  # DEBUG __tmp$_M_curD.23458 => __tmp$_M_cur_20 + 18446744073709551608
  # DEBUG D#16ptD.0 => &__tmpD.23450
  # DEBUG thisD.22499 => D#16ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  c.2_9 = MEM[(struct CreditD.18194 * &)__tmp$_M_cur_20 + 18446744073709551608];
  # .MEM_10 = VDEF <.MEM_2(D)>
  cD.20320 = c.2_9;
  # DEBUG thisD.23444 => c.2_9
  # DEBUG D#104ptD.0 => &c.2_9->vcD.19243
  # DEBUG thisD.23445 => D#104ptD.0
  # PT = nonlocal escaped 
  _11 = &MEM[(struct setD.18198 *)c.2_9]._M_tD.18416;
  # DEBUG thisD.23446 => _11
  # VUSE <.MEM_10>
  # PT = nonlocal escaped 
  _14 = MEM[(struct _Rb_tree_node_baseD.14415 * *)c.2_9 + 16B];
  # DEBUG D#2ptD.0 => _11
  # DEBUG thisD.22970 => D#2ptD.0
  # .MEM_22 = VDEF <.MEM_10>
  # USE = nonlocal null { D.19257 D.20320 D.24412 } (nonlocal, escaped)
  # CLB = nonlocal null { D.19257 D.20320 D.24412 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.18787 (_11, _14);
  # DEBUG D#103ptD.0 => &MEM[(struct _Rb_treeD.18415 *)_11]._M_implD.18494
  # DEBUG thisD.23447 => D#103ptD.0
  # .MEM_23 = VDEF <.MEM_22>
  MEM[(struct _Rb_tree_implD.18506 *)c.2_9]._M_headerD.18660._M_parentD.14420 = 0B;
  # PT = nonlocal escaped 
  _15 = &MEM[(struct _Rb_tree_implD.18506 *)c.2_9]._M_headerD.18660;
  # .MEM_24 = VDEF <.MEM_23>
  MEM[(struct _Rb_tree_implD.18506 *)c.2_9]._M_headerD.18660._M_leftD.14421 = _15;
  # .MEM_25 = VDEF <.MEM_24>
  MEM[(struct _Rb_tree_implD.18506 *)c.2_9]._M_headerD.18660._M_rightD.14422 = _15;
  # .MEM_26 = VDEF <.MEM_25>
  MEM[(struct _Rb_tree_implD.18506 *)c.2_9]._M_node_countD.18661 = 0;
  # .MEM_27 = VDEF <.MEM_26>
  c.2_9->headD.19244 = 0;
  # .MEM_28 = VDEF <.MEM_27>
  c.2_9->tailD.19245 = 0;
  # .MEM_29 = VDEF <.MEM_28>
  c.2_9->idD.19246 = -1;
  # DEBUG thisD.23443 => &_ZN6Credit5_freeED.19258
  # DEBUG thisD.24397 => &_ZN6Credit5_freeED.19258.cD.20262
  # VUSE <.MEM_29>
  # PT = nonlocal escaped 
  _41 = MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569;
  # VUSE <.MEM_29>
  # PT = nonlocal escaped 
  _42 = MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219._M_implD.19670._M_finishD.19675._M_firstD.19570;
  if (_41 != _42)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 8591, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  _43 = _41 + 18446744073709551608;
  # .MEM_73 = VDEF <.MEM_29>
  MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569 = _43;
  # DEBUG D#66ptD.0 => MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569
  # DEBUG D#65ptD.0 => &MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219._M_implD.19670
  # DEBUG D#26ptD.0 => D#65ptD.0
  # DEBUG D#27ptD.0 => D#66ptD.0
  # DEBUG __aD.22707 => D#26ptD.0
  # DEBUG __pD.22706 => D#27ptD.0
  # VUSE <.MEM_73>
  pretmp_34 = cD.20320;
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 968, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       10 [10.1%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.24398 => &_ZN6Credit5_freeED.19258.cD.20262
  # DEBUG D#64ptD.0 => &MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219
  # DEBUG thisD.24400 => D#64ptD.0
  # DEBUG __pD.24399 => _41
  # DEBUG __sizeD.22687 => 8
  # DEBUG D#60ptD.0 => &D#64ptD.0->_M_implD.19670
  # DEBUG D#58ptD.0 => D#60ptD.0
  # DEBUG __pD.24404 => _41
  # DEBUG __aD.24402 => D#58ptD.0
  # DEBUG __nD.24403 => D#59ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#54ptD.0 => D#56ptD.0
  # DEBUG D#55ptD.0 => D#57ptD.0
  # DEBUG __pD.24407 => _41
  # DEBUG thisD.24405 => D#54ptD.0
  # DEBUG D.24406 => D#55ptD.0
  # .MEM_68 = VDEF <.MEM_29>
  # USE = nonlocal null { D.19257 D.20320 D.24412 } (nonlocal, escaped)
  # CLB = nonlocal null { D.19257 D.20320 D.24412 } (nonlocal, escaped)
  _ZdlPvD.2766 (_41);
  # VUSE <.MEM_68>
  # PT = nonlocal escaped 
  _44 = MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219._M_implD.19670._M_finishD.19675._M_nodeD.19572;
  # PT = nonlocal escaped 
  _45 = _44 + 18446744073709551608;
  # DEBUG D#63ptD.0 => &MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219._M_implD.19670._M_finishD.19675
  # DEBUG thisD.24409 => D#63ptD.0
  # DEBUG __new_nodeD.24408 => _45
  # .MEM_69 = VDEF <.MEM_68>
  MEM[(struct _Deque_iteratorD.19537 *)&_ZN6Credit5_freeED.19258 + 48B]._M_nodeD.19572 = _45;
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  _46 = MEM[(struct CreditD.18194 * * *)_44 + -8B];
  # .MEM_70 = VDEF <.MEM_69>
  MEM[(struct _Deque_iteratorD.19537 *)&_ZN6Credit5_freeED.19258 + 48B]._M_firstD.19570 = _46;
  # DEBUG __sizeD.22490 => 8
  # PT = nonlocal escaped 
  _47 = _46 + 512;
  # .MEM_71 = VDEF <.MEM_70>
  MEM[(struct _Deque_iteratorD.19537 *)&_ZN6Credit5_freeED.19258 + 48B]._M_lastD.19571 = _47;
  # PT = nonlocal escaped 
  _48 = &MEM[(voidD.45 *)_46 + 504B];
  # .MEM_72 = VDEF <.MEM_71>
  MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569 = _48;
  # DEBUG D#62ptD.0 => MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569
  # DEBUG D#61ptD.0 => &MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219
  # DEBUG thisD.22692 => D#61ptD.0
  # DEBUG D#27ptD.0 => D#62ptD.0
  # DEBUG __aD.22691 => D#26ptD.0
  # DEBUG __pD.22690 => D#27ptD.0
  # DEBUG D#25ptD.0 => D#27ptD.0
  # DEBUG D#24ptD.0 => D#26ptD.0
  # DEBUG D#22ptD.0 => D#24ptD.0
  # DEBUG D#23ptD.0 => D#25ptD.0
  # DEBUG thisD.22481 => D#22ptD.0
  # DEBUG __pD.22480 => D#23ptD.0
  # VUSE <.MEM_72>
  pretmp_60 = cD.20320;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 12, next block 1, flags: (NEW, REACHABLE)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_65(7), .MEM_72(12), .MEM_67(6), .MEM_73(11)>
  # PT = nonlocal escaped { D.24412 } (escaped heap)
  # prephitmp_38 = PHI <pretmp_59(7), pretmp_60(12), prephitmp_58(6), pretmp_34(11)>
  # .MEM_13 = VDEF <.MEM_1>
  cD.20320 ={v} {CLOBBER};
  # VUSE <.MEM_13>
  return prephitmp_38;
;;    succ:       EXIT [100.0%] 

}


Creating dr for MEM[(struct Credit * * *)&_free + 48B]
analyze_innermost: success.
	base_address: &_free
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(struct Credit * * *)&_free + 48B]
Creating dr for MEM[(struct Credit * * *)&_free + 16B]
analyze_innermost: success.
	base_address: &_free
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct Credit * * *)&_free + 16B]
Creating dr for *_31
analyze_innermost: success.
	base_address: _31
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *_31
Creating dr for MEM[(struct deque *)&_all].D.20219._M_impl._M_finish._M_cur
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(struct deque *)&_all]
	Access function 0: 0
	Access function 1: 384
	Access function 2: 0
	Access function 3: 0
Creating dr for c
analyze_innermost: success.
	base_address: &c
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: c
Creating dr for MEM[(struct deque *)&_all].D.20219._M_impl._M_finish._M_cur
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(struct deque *)&_all]
	Access function 0: 0
	Access function 1: 384
	Access function 2: 0
	Access function 3: 0
Creating dr for MEM[(const struct iterator &)&_free + 48]._M_first
analyze_innermost: success.
	base_address: &_free
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)&_free + 48]
	Access function 0: 64
Creating dr for MEM[(const struct iterator &)&_free + 48]._M_node
analyze_innermost: success.
	base_address: &_free
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)&_free + 48]
	Access function 0: 192
Creating dr for MEM[(struct Credit * * *)_17 + -8B]
analyze_innermost: success.
	base_address: _17
	offset from base address: 0
	constant offset from base address: -8(OVF)
	step: 0
	aligned to: 256
	base_object: MEM[(struct Credit * * *)_17 + -8B]
Creating dr for MEM[(struct Credit * &)__tmp$_M_cur_20 + 18446744073709551608]
analyze_innermost: success.
	base_address: __tmp$_M_cur_20
	offset from base address: 0
	constant offset from base address: -8(OVF)
	step: 0
	aligned to: 256
	base_object: MEM[(struct Credit * &)__tmp$_M_cur_20 + 18446744073709551608]
Creating dr for c
analyze_innermost: success.
	base_address: &c
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: c
Creating dr for MEM[(struct _Rb_tree_node_base * *)c.2_9 + 16B]
analyze_innermost: success.
	base_address: c.2_9
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)c.2_9 + 16B]
Creating dr for MEM[(struct deque *)&_free].D.20219._M_impl._M_finish._M_cur
analyze_innermost: success.
	base_address: &_free
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(struct deque *)&_free]
	Access function 0: 0
	Access function 1: 384
	Access function 2: 0
	Access function 3: 0
Creating dr for c
analyze_innermost: success.
	base_address: &c
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: c

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:11)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:9)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:15, LOOPS:0, CONDITIONS:5, STMTS:186)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_8 })
  {
    <bb 2>:
    # DEBUG this => &_free
    # DEBUG D#15 => &_free.c
    # DEBUG this => D#15
    # DEBUG D#13 => &D#15->D.20219._M_impl._M_start
    # DEBUG D#14 => &D#15->D.20219._M_impl._M_finish
    # VUSE <.MEM_2(D)>
    __tmp$_M_cur_8 = MEM[(struct Credit * * *)&_free + 48B];
    # DEBUG D#11 => D#14
    # VUSE <.MEM_2(D)>
    _3 = MEM[(struct Credit * * *)&_free + 16B];
    # DEBUG D#12 => D#13
    # DEBUG __x => D#11
    # DEBUG __y => D#12
    if (_3 == __tmp$_M_cur_8)
      goto <bb 3>;
    else
      goto <bb 8>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_7 })
  {
    <bb 3>:
    # .MEM_4 = VDEF <.MEM_2(D)>
    _5 = operator new (56);
    # DEBUG this => _5
    # DEBUG D#105 => &MEM[(struct Credit *)_5].vc
    # DEBUG this => D#105
    # DEBUG D#45 => &D#105->_M_t
    # DEBUG this => D#45
    # DEBUG D#44 => &MEM[(struct _Rb_tree *)D#45]._M_impl
    # DEBUG this => D#44
    # DEBUG this => D#44
    # DEBUG this => D#44
    # .MEM_49 = VDEF <.MEM_4>
    MEM[(struct _Rb_tree_impl *)_5]._M_header._M_color = 0;
    # .MEM_50 = VDEF <.MEM_49>
    MEM[(struct _Rb_tree_impl *)_5]._M_header._M_parent = 0B;
    # .MEM_53 = VDEF <.MEM_50>
    MEM[(struct _Rb_tree_impl *)_5]._M_node_count = 0;
    # DEBUG this => D#44
    _21 = &MEM[(struct _Rb_tree_impl *)_5]._M_header;
    # .MEM_54 = VDEF <.MEM_53>
    MEM[(struct _Rb_tree_impl *)_5]._M_header._M_left = _21;
    # .MEM_55 = VDEF <.MEM_54>
    MEM[(struct _Rb_tree_impl *)_5]._M_header._M_right = _21;
    # DEBUG this => _5
    # DEBUG D#104 => &MEM[(struct Credit *)_5].vc
    # DEBUG this => D#104
    # DEBUG D#165 => &MEM[(struct set *)_5]._M_t
    # DEBUG this => D#165
    # DEBUG D#2 => D#165
    # DEBUG this => D#2
    # DEBUG this => D#165
    # DEBUG __x => 0B
    # DEBUG __x => 0B
    # DEBUG D#103 => &MEM[(struct _Rb_tree *)D#165]._M_impl
    # DEBUG this => D#103
    # .MEM_62 = VDEF <.MEM_55>
    MEM[(struct Credit *)_5].head = 0;
    # .MEM_63 = VDEF <.MEM_62>
    MEM[(struct Credit *)_5].tail = 0;
    # .MEM_64 = VDEF <.MEM_63>
    MEM[(struct Credit *)_5].id = -1;
    # .MEM_7 = VDEF <.MEM_64>
    c = _5;
    # DEBUG this => &_all
    # DEBUG __x => &c
    # DEBUG this => &_all.c
    # DEBUG __x => &c
    # VUSE <.MEM_7>
    _31 = MEM[(struct deque *)&_all].D.20219._M_impl._M_finish._M_cur;
    # VUSE <.MEM_7>
    _32 = MEM[(struct deque *)&_all].D.20219._M_impl._M_finish._M_last;
    _33 = _32 + 18446744073709551608;
    if (_31 != _33)
      goto <bb 4>;
    else
      goto <bb 7>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_5 bb_6 })
  {
    <bb 4>:
    # DEBUG D#141 => &MEM[(struct deque *)&_all].D.20219._M_impl
    # DEBUG D#21 => D#141
    # DEBUG __p => _31
    # DEBUG __arg => &c
    # DEBUG __a => D#21
    # DEBUG D#20 => D#21
    # DEBUG D#19 => D#20
    # DEBUG __p => _31
    # DEBUG __val => &c
    # DEBUG this => D#19
    # DEBUG D#1 => 8
    # DEBUG __p => _31
    # DEBUG D.22447 => D#1
    if (_31 != 0B)
      goto <bb 5>;
    else
      goto <bb 6>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_6 })
  {
    <bb 5>:
    # .MEM_66 = VDEF <.MEM_7>
    *_31 = _5;
    # VUSE <.MEM_66>
    pretmp_39 = MEM[(struct deque *)&_all].D.20219._M_impl._M_finish._M_cur;
    # VUSE <.MEM_66>
    pretmp_61 = c;

  }
  bb_6 (preds = {bb_4 bb_5 }, succs = {bb_14 })
  {
    <bb 6>:
    # .MEM_30 = PHI <.MEM_7(4), .MEM_66(5)>
    # prephitmp_56 = PHI <_31(4), pretmp_39(5)>
    # prephitmp_58 = PHI <_5(4), pretmp_61(5)>

  }
  bb_14 (preds = {bb_6 }, succs = {bb_13 })
  {
    <bb 14>:
    _36 = prephitmp_56 + 8;
    # .MEM_67 = VDEF <.MEM_30>
    MEM[(struct deque *)&_all].D.20219._M_impl._M_finish._M_cur = _36;
    goto <bb 13>;

  }
  bb_7 (preds = {bb_3 }, succs = {bb_13 })
  {
    <bb 7>:
    # .MEM_65 = VDEF <.MEM_7>
    std::deque<Credit*, std::allocator<Credit*> >::_M_push_back_aux (&_all.c, &c);
    # VUSE <.MEM_65>
    pretmp_59 = c;
    goto <bb 13>;

  }
  bb_8 (preds = {bb_2 }, succs = {bb_9 bb_10 })
  {
    <bb 8>:
    # DEBUG this => &_free
    # DEBUG D#30 => &_free.c
    # DEBUG this => D#30
    # DEBUG this => D#30
    # DEBUG D#3 => &D#30->D.20219._M_impl._M_finish
    # DEBUG this => &__tmp
    # DEBUG __x => D#3
    # DEBUG __tmp$_M_cur => __tmp$_M_cur_8
    # VUSE <.MEM_2(D)>
    _16 = MEM[(const struct iterator &)&_free + 48]._M_first;
    # DEBUG __tmp$_M_first => _16
    # DEBUG D#29 => MEM[(const struct iterator &)D#30 + 48]._M_last
    # DEBUG __tmp$_M_last => D#29
    # DEBUG D#166 => MEM[(const struct iterator &)&_free + 48]._M_node
    # DEBUG __tmp$_M_node => D#166
    # DEBUG this => &__tmp
    if (__tmp$_M_cur_8 == _16)
      goto <bb 9>;
    else
      goto <bb 10>;

  }
  bb_9 (preds = {bb_8 }, succs = {bb_10 })
  {
    <bb 9>:
    # VUSE <.MEM_2(D)>
    _17 = MEM[(const struct iterator &)&_free + 48]._M_node;
    # DEBUG D#28 => D#166 + 18446744073709551608
    # DEBUG this => &__tmp
    # DEBUG __new_node => D#28
    # DEBUG __tmp$_M_node => D#28
    # VUSE <.MEM_2(D)>
    _18 = MEM[(struct Credit * * *)_17 + -8B];
    # DEBUG __tmp$_M_first => _18
    # DEBUG __size => 8
    __tmp$_M_cur_19 = _18 + 512;
    # DEBUG __tmp$_M_last => __tmp$_M_cur_19
    # DEBUG __tmp$_M_cur => __tmp$_M_cur_19

  }
  bb_10 (preds = {bb_8 bb_9 }, succs = {bb_11 bb_12 })
  {
    <bb 10>:
    # __tmp$_M_cur_20 = PHI <__tmp$_M_cur_8(8), __tmp$_M_cur_19(9)>
    # DEBUG __tmp$_M_cur => __tmp$_M_cur_20
    # DEBUG __tmp$_M_cur => __tmp$_M_cur_20 + 18446744073709551608
    # DEBUG D#16 => &__tmp
    # DEBUG this => D#16
    # VUSE <.MEM_2(D)>
    c.2_9 = MEM[(struct Credit * &)__tmp$_M_cur_20 + 18446744073709551608];
    # .MEM_10 = VDEF <.MEM_2(D)>
    c = c.2_9;
    # DEBUG this => c.2_9
    # DEBUG D#104 => &c.2_9->vc
    # DEBUG this => D#104
    _11 = &MEM[(struct set *)c.2_9]._M_t;
    # DEBUG this => _11
    # VUSE <.MEM_10>
    _14 = MEM[(struct _Rb_tree_node_base * *)c.2_9 + 16B];
    # DEBUG D#2 => _11
    # DEBUG this => D#2
    # .MEM_22 = VDEF <.MEM_10>
    std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase (_11, _14);
    # DEBUG D#103 => &MEM[(struct _Rb_tree *)_11]._M_impl
    # DEBUG this => D#103
    # .MEM_23 = VDEF <.MEM_22>
    MEM[(struct _Rb_tree_impl *)c.2_9]._M_header._M_parent = 0B;
    _15 = &MEM[(struct _Rb_tree_impl *)c.2_9]._M_header;
    # .MEM_24 = VDEF <.MEM_23>
    MEM[(struct _Rb_tree_impl *)c.2_9]._M_header._M_left = _15;
    # .MEM_25 = VDEF <.MEM_24>
    MEM[(struct _Rb_tree_impl *)c.2_9]._M_header._M_right = _15;
    # .MEM_26 = VDEF <.MEM_25>
    MEM[(struct _Rb_tree_impl *)c.2_9]._M_node_count = 0;
    # .MEM_27 = VDEF <.MEM_26>
    c.2_9->head = 0;
    # .MEM_28 = VDEF <.MEM_27>
    c.2_9->tail = 0;
    # .MEM_29 = VDEF <.MEM_28>
    c.2_9->id = -1;
    # DEBUG this => &_free
    # DEBUG this => &_free.c
    # VUSE <.MEM_29>
    _41 = MEM[(struct deque *)&_free].D.20219._M_impl._M_finish._M_cur;
    # VUSE <.MEM_29>
    _42 = MEM[(struct deque *)&_free].D.20219._M_impl._M_finish._M_first;
    if (_41 != _42)
      goto <bb 11>;
    else
      goto <bb 12>;

  }
  bb_11 (preds = {bb_10 }, succs = {bb_13 })
  {
    <bb 11>:
    _43 = _41 + 18446744073709551608;
    # .MEM_73 = VDEF <.MEM_29>
    MEM[(struct deque *)&_free].D.20219._M_impl._M_finish._M_cur = _43;
    # DEBUG D#66 => MEM[(struct deque *)&_free].D.20219._M_impl._M_finish._M_cur
    # DEBUG D#65 => &MEM[(struct deque *)&_free].D.20219._M_impl
    # DEBUG D#26 => D#65
    # DEBUG D#27 => D#66
    # DEBUG __a => D#26
    # DEBUG __p => D#27
    # VUSE <.MEM_73>
    pretmp_34 = c;
    goto <bb 13>;

  }
  bb_12 (preds = {bb_10 }, succs = {bb_13 })
  {
    <bb 12>:
    # DEBUG this => &_free.c
    # DEBUG D#64 => &MEM[(struct deque *)&_free].D.20219
    # DEBUG this => D#64
    # DEBUG __p => _41
    # DEBUG __size => 8
    # DEBUG D#60 => &D#64->_M_impl
    # DEBUG D#58 => D#60
    # DEBUG __p => _41
    # DEBUG __a => D#58
    # DEBUG __n => D#59
    # DEBUG D#57 => D#59
    # DEBUG D#56 => D#58
    # DEBUG D#54 => D#56
    # DEBUG D#55 => D#57
    # DEBUG __p => _41
    # DEBUG this => D#54
    # DEBUG D.24406 => D#55
    # .MEM_68 = VDEF <.MEM_29>
    operator delete (_41);
    # VUSE <.MEM_68>
    _44 = MEM[(struct deque *)&_free].D.20219._M_impl._M_finish._M_node;
    _45 = _44 + 18446744073709551608;
    # DEBUG D#63 => &MEM[(struct deque *)&_free].D.20219._M_impl._M_finish
    # DEBUG this => D#63
    # DEBUG __new_node => _45
    # .MEM_69 = VDEF <.MEM_68>
    MEM[(struct _Deque_iterator *)&_free + 48B]._M_node = _45;
    # VUSE <.MEM_69>
    _46 = MEM[(struct Credit * * *)_44 + -8B];
    # .MEM_70 = VDEF <.MEM_69>
    MEM[(struct _Deque_iterator *)&_free + 48B]._M_first = _46;
    # DEBUG __size => 8
    _47 = _46 + 512;
    # .MEM_71 = VDEF <.MEM_70>
    MEM[(struct _Deque_iterator *)&_free + 48B]._M_last = _47;
    _48 = &MEM[(void *)_46 + 504B];
    # .MEM_72 = VDEF <.MEM_71>
    MEM[(struct deque *)&_free].D.20219._M_impl._M_finish._M_cur = _48;
    # DEBUG D#62 => MEM[(struct deque *)&_free].D.20219._M_impl._M_finish._M_cur
    # DEBUG D#61 => &MEM[(struct deque *)&_free].D.20219
    # DEBUG this => D#61
    # DEBUG D#27 => D#62
    # DEBUG __a => D#26
    # DEBUG __p => D#27
    # DEBUG D#25 => D#27
    # DEBUG D#24 => D#26
    # DEBUG D#22 => D#24
    # DEBUG D#23 => D#25
    # DEBUG this => D#22
    # DEBUG __p => D#23
    # VUSE <.MEM_72>
    pretmp_60 = c;

  }
  bb_13 (preds = {bb_7 bb_12 bb_14 bb_11 }, succs = {bb_1 })
  {
    <bb 13>:
    # .MEM_1 = PHI <.MEM_65(7), .MEM_72(12), .MEM_67(14), .MEM_73(11)>
    # prephitmp_38 = PHI <pretmp_59(7), pretmp_60(12), prephitmp_58(14), pretmp_34(11)>
    # .MEM_13 = VDEF <.MEM_1>
    c ={v} {CLOBBER};
    # VUSE <.MEM_13>
    return prephitmp_38;

  }
}

Pass statistics:
----------------

static Credit* Credit::New() ()
{
  struct _Rb_tree_nodeD.18419 * __xD.24385;
  struct CreditD.18194 * * __tmp$_M_curD.23458;
  struct CreditD.18194 * cD.20320;
  struct CreditD.18194 * * const _3;
  voidD.45 * _5;
  struct CreditD.18194 * c.2_9;
  struct _Rep_typeD.18413 * _11;
  struct _Rb_tree_node_baseD.14415 * _14;
  struct _Rb_tree_node_baseD.14415 * _15;
  struct CreditD.18194 * * _16;
  struct CreditD.18194 * * * _17;
  struct CreditD.18194 * * _18;
  struct _Rb_tree_node_baseD.14415 * _21;
  struct CreditD.18194 * * _31;
  struct CreditD.18194 * * _32;
  struct CreditD.18194 * * _33;
  struct CreditD.18194 * pretmp_34;
  struct CreditD.18194 * * _36;
  struct CreditD.18194 * prephitmp_38;
  struct CreditD.18194 * * pretmp_39;
  struct CreditD.18194 * * _41;
  struct CreditD.18194 * * _42;
  struct CreditD.18194 * * _43;
  struct CreditD.18194 * * * _44;
  struct CreditD.18194 * * * _45;
  struct CreditD.18194 * * _46;
  struct CreditD.18194 * * _47;
  struct CreditD.18194 * * _48;
  struct CreditD.18194 * * prephitmp_56;
  struct CreditD.18194 * prephitmp_58;
  struct CreditD.18194 * pretmp_59;
  struct CreditD.18194 * pretmp_60;
  struct CreditD.18194 * pretmp_61;

;;   basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.23436 => &_ZN6Credit5_freeED.19258
  # DEBUG D#15ptD.0 => &_ZN6Credit5_freeED.19258.cD.20262
  # DEBUG thisD.23437 => D#15ptD.0
  # DEBUG D#13ptD.0 => &D#15ptD.0->D.20219._M_implD.19670._M_startD.19674
  # DEBUG D#14ptD.0 => &D#15ptD.0->D.20219._M_implD.19670._M_finishD.19675
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __tmp$_M_cur_8 = MEM[(struct CreditD.18194 * * *)&_ZN6Credit5_freeED.19258 + 48B];
  # DEBUG D#11ptD.0 => D#14ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _3 = MEM[(struct CreditD.18194 * * *)&_ZN6Credit5_freeED.19258 + 16B];
  # DEBUG D#12ptD.0 => D#13ptD.0
  # DEBUG __xD.23438 => D#11ptD.0
  # DEBUG __yD.23439 => D#12ptD.0
  if (_3 == __tmp$_M_cur_8)
    goto <bb 3>;
  else
    goto <bb 8>;
;;    succ:       3 [4.4%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [95.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 4900, maybe hot
;;   Invalid sum of incoming frequencies 441, should be 4900
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [4.4%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_4 = VDEF <.MEM_2(D)>
  # PT = { D.24412 } (escaped heap)
  # USE = nonlocal null { D.19257 D.20320 D.24412 } (nonlocal, escaped)
  # CLB = nonlocal null { D.19257 D.20320 D.24412 } (nonlocal, escaped)
  _5 = _ZnwmD.2764 (56);
  # DEBUG thisD.24375 => _5
  # DEBUG D#105ptD.0 => &MEM[(struct CreditD.18194 *)_5].vcD.19243
  # DEBUG thisD.24376 => D#105ptD.0
  # DEBUG D#45ptD.0 => &D#105ptD.0->_M_tD.18416
  # DEBUG thisD.24377 => D#45ptD.0
  # DEBUG D#44ptD.0 => &MEM[(struct _Rb_treeD.18415 *)D#45ptD.0]._M_implD.18494
  # DEBUG thisD.24378 => D#44ptD.0
  # DEBUG thisD.22593 => D#44ptD.0
  # DEBUG thisD.22590 => D#44ptD.0
  # .MEM_49 = VDEF <.MEM_4>
  MEM[(struct _Rb_tree_implD.18506 *)_5]._M_headerD.18660._M_colorD.14419 = 0;
  # .MEM_50 = VDEF <.MEM_49>
  MEM[(struct _Rb_tree_implD.18506 *)_5]._M_headerD.18660._M_parentD.14420 = 0B;
  # .MEM_53 = VDEF <.MEM_50>
  MEM[(struct _Rb_tree_implD.18506 *)_5]._M_node_countD.18661 = 0;
  # DEBUG thisD.24379 => D#44ptD.0
  # PT = { D.24412 } (escaped heap)
  _21 = &MEM[(struct _Rb_tree_implD.18506 *)_5]._M_headerD.18660;
  # .MEM_54 = VDEF <.MEM_53>
  MEM[(struct _Rb_tree_implD.18506 *)_5]._M_headerD.18660._M_leftD.14421 = _21;
  # .MEM_55 = VDEF <.MEM_54>
  MEM[(struct _Rb_tree_implD.18506 *)_5]._M_headerD.18660._M_rightD.14422 = _21;
  # DEBUG thisD.24380 => _5
  # DEBUG D#104ptD.0 => &MEM[(struct CreditD.18194 *)_5].vcD.19243
  # DEBUG thisD.24381 => D#104ptD.0
  # DEBUG D#165ptD.0 => &MEM[(struct setD.18198 *)_5]._M_tD.18416
  # DEBUG thisD.24382 => D#165ptD.0
  # DEBUG D#2ptD.0 => D#165ptD.0
  # DEBUG thisD.22970 => D#2ptD.0
  # DEBUG thisD.24384 => D#165ptD.0
  # DEBUG __xD.24385 => 0B
  # DEBUG __xD.24385 => 0B
  # DEBUG D#103ptD.0 => &MEM[(struct _Rb_treeD.18415 *)D#165ptD.0]._M_implD.18494
  # DEBUG thisD.24383 => D#103ptD.0
  # .MEM_62 = VDEF <.MEM_55>
  MEM[(struct CreditD.18194 *)_5].headD.19244 = 0;
  # .MEM_63 = VDEF <.MEM_62>
  MEM[(struct CreditD.18194 *)_5].tailD.19245 = 0;
  # .MEM_64 = VDEF <.MEM_63>
  MEM[(struct CreditD.18194 *)_5].idD.19246 = -1;
  # .MEM_7 = VDEF <.MEM_64>
  cD.20320 = _5;
  # DEBUG thisD.23441 => &_ZN6Credit4_allED.19257
  # DEBUG __xD.23442 => &cD.20320
  # DEBUG thisD.24367 => &_ZN6Credit4_allED.19257.cD.20262
  # DEBUG __xD.24368 => &cD.20320
  # VUSE <.MEM_7>
  # PT = nonlocal escaped 
  _31 = MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569;
  # VUSE <.MEM_7>
  # PT = nonlocal escaped 
  _32 = MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_lastD.19571;
  # PT = nonlocal escaped 
  _33 = _32 + 18446744073709551608;
  if (_31 != _33)
    goto <bb 4>;
  else
    goto <bb 7>;
;;    succ:       4 [93.3%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [6.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 411, maybe hot
;;   Invalid sum of incoming frequencies 4571, should be 411
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [93.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#141ptD.0 => &MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670
  # DEBUG D#21ptD.0 => D#141ptD.0
  # DEBUG __pD.24371 => _31
  # DEBUG __argD.24370 => &cD.20320
  # DEBUG __aD.24369 => D#21ptD.0
  # DEBUG D#20ptD.0 => D#21ptD.0
  # DEBUG D#19ptD.0 => D#20ptD.0
  # DEBUG __pD.24374 => _31
  # DEBUG __valD.24373 => &cD.20320
  # DEBUG thisD.24372 => D#19ptD.0
  # DEBUG D#1ptD.0 => 8
  # DEBUG __pD.22446 => _31
  # DEBUG D.22447 => D#1ptD.0
  if (_31 != 0B)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 370, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_66 = VDEF <.MEM_7>
  *_31 = _5;
  # VUSE <.MEM_66>
  pretmp_39 = MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569;
  # VUSE <.MEM_66>
  pretmp_61 = cD.20320;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 411, maybe hot
;;    prev block 5, next block 14, flags: (NEW, REACHABLE)
;;    pred:       4 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_30 = PHI <.MEM_7(4), .MEM_66(5)>
  # PT = nonlocal escaped 
  # prephitmp_56 = PHI <_31(4), pretmp_39(5)>
  # prephitmp_58 = PHI <_5(4), pretmp_61(5)>
;;    succ:       14 [100.0%]  (FALLTHRU)

;;   basic block 14, loop depth 0, count 0, freq 411, maybe hot
;;    prev block 6, next block 7, flags: (NEW)
;;    pred:       6 [100.0%]  (FALLTHRU)
  # PT = nonlocal escaped 
  _36 = prephitmp_56 + 8;
  # .MEM_67 = VDEF <.MEM_30>
  MEM[(struct dequeD.19255 *)&_ZN6Credit4_allED.19257].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569 = _36;
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 30, maybe hot
;;   Invalid sum of incoming frequencies 329, should be 30
;;    prev block 14, next block 8, flags: (NEW, REACHABLE)
;;    pred:       3 [6.7%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_65 = VDEF <.MEM_7>
  # USE = nonlocal null { D.19257 D.20320 D.24412 } (nonlocal, escaped)
  # CLB = nonlocal null { D.19257 D.20320 D.24412 } (nonlocal, escaped)
  _ZNSt5dequeIP6CreditSaIS1_EE16_M_push_back_auxERKS1_D.20026 (&_ZN6Credit4_allED.19257.cD.20262, &cD.20320);
  # VUSE <.MEM_65>
  pretmp_59 = cD.20320;
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 9559, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       2 [95.6%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.23448 => &_ZN6Credit5_freeED.19258
  # DEBUG D#30ptD.0 => &_ZN6Credit5_freeED.19258.cD.20262
  # DEBUG thisD.23449 => D#30ptD.0
  # DEBUG thisD.23451 => D#30ptD.0
  # DEBUG D#3ptD.0 => &D#30ptD.0->D.20219._M_implD.19670._M_finishD.19675
  # DEBUG thisD.23453 => &__tmpD.23450
  # DEBUG __xD.23452 => D#3ptD.0
  # DEBUG __tmp$_M_curD.23458 => __tmp$_M_cur_8
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _16 = MEM[(const struct iteratorD.19557 &)&_ZN6Credit5_freeED.19258 + 48]._M_firstD.19570;
  # DEBUG __tmp$_M_firstD.22509 => _16
  # DEBUG D#29ptD.0 => MEM[(const struct iteratorD.19557 &)D#30ptD.0 + 48]._M_lastD.19571
  # DEBUG __tmp$_M_lastD.22510 => D#29ptD.0
  # DEBUG D#166ptD.0 => MEM[(const struct iteratorD.19557 &)&_ZN6Credit5_freeED.19258 + 48]._M_nodeD.19572
  # DEBUG __tmp$_M_nodeD.22511 => D#166ptD.0
  # DEBUG thisD.23454 => &__tmpD.23450
  if (__tmp$_M_cur_8 == _16)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1434, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _17 = MEM[(const struct iteratorD.19557 &)&_ZN6Credit5_freeED.19258 + 48]._M_nodeD.19572;
  # DEBUG D#28ptD.0 => D#166ptD.0 + 18446744073709551608
  # DEBUG thisD.23456 => &__tmpD.23450
  # DEBUG __new_nodeD.23455 => D#28ptD.0
  # DEBUG __tmp$_M_nodeD.22511 => D#28ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _18 = MEM[(struct CreditD.18194 * * *)_17 + -8B];
  # DEBUG __tmp$_M_firstD.22509 => _18
  # DEBUG __sizeD.22490 => 8
  # PT = nonlocal escaped 
  __tmp$_M_cur_19 = _18 + 512;
  # DEBUG __tmp$_M_lastD.22510 => __tmp$_M_cur_19
  # DEBUG __tmp$_M_curD.23458 => __tmp$_M_cur_19
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 9559, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [85.0%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __tmp$_M_cur_20 = PHI <__tmp$_M_cur_8(8), __tmp$_M_cur_19(9)>
  # DEBUG __tmp$_M_curD.23458 => __tmp$_M_cur_20
  # DEBUG __tmp$_M_curD.23458 => __tmp$_M_cur_20 + 18446744073709551608
  # DEBUG D#16ptD.0 => &__tmpD.23450
  # DEBUG thisD.22499 => D#16ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  c.2_9 = MEM[(struct CreditD.18194 * &)__tmp$_M_cur_20 + 18446744073709551608];
  # .MEM_10 = VDEF <.MEM_2(D)>
  cD.20320 = c.2_9;
  # DEBUG thisD.23444 => c.2_9
  # DEBUG D#104ptD.0 => &c.2_9->vcD.19243
  # DEBUG thisD.23445 => D#104ptD.0
  # PT = nonlocal escaped 
  _11 = &MEM[(struct setD.18198 *)c.2_9]._M_tD.18416;
  # DEBUG thisD.23446 => _11
  # VUSE <.MEM_10>
  # PT = nonlocal escaped 
  _14 = MEM[(struct _Rb_tree_node_baseD.14415 * *)c.2_9 + 16B];
  # DEBUG D#2ptD.0 => _11
  # DEBUG thisD.22970 => D#2ptD.0
  # .MEM_22 = VDEF <.MEM_10>
  # USE = nonlocal null { D.19257 D.20320 D.24412 } (nonlocal, escaped)
  # CLB = nonlocal null { D.19257 D.20320 D.24412 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.18787 (_11, _14);
  # DEBUG D#103ptD.0 => &MEM[(struct _Rb_treeD.18415 *)_11]._M_implD.18494
  # DEBUG thisD.23447 => D#103ptD.0
  # .MEM_23 = VDEF <.MEM_22>
  MEM[(struct _Rb_tree_implD.18506 *)c.2_9]._M_headerD.18660._M_parentD.14420 = 0B;
  # PT = nonlocal escaped 
  _15 = &MEM[(struct _Rb_tree_implD.18506 *)c.2_9]._M_headerD.18660;
  # .MEM_24 = VDEF <.MEM_23>
  MEM[(struct _Rb_tree_implD.18506 *)c.2_9]._M_headerD.18660._M_leftD.14421 = _15;
  # .MEM_25 = VDEF <.MEM_24>
  MEM[(struct _Rb_tree_implD.18506 *)c.2_9]._M_headerD.18660._M_rightD.14422 = _15;
  # .MEM_26 = VDEF <.MEM_25>
  MEM[(struct _Rb_tree_implD.18506 *)c.2_9]._M_node_countD.18661 = 0;
  # .MEM_27 = VDEF <.MEM_26>
  c.2_9->headD.19244 = 0;
  # .MEM_28 = VDEF <.MEM_27>
  c.2_9->tailD.19245 = 0;
  # .MEM_29 = VDEF <.MEM_28>
  c.2_9->idD.19246 = -1;
  # DEBUG thisD.23443 => &_ZN6Credit5_freeED.19258
  # DEBUG thisD.24397 => &_ZN6Credit5_freeED.19258.cD.20262
  # VUSE <.MEM_29>
  # PT = nonlocal escaped 
  _41 = MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569;
  # VUSE <.MEM_29>
  # PT = nonlocal escaped 
  _42 = MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219._M_implD.19670._M_finishD.19675._M_firstD.19570;
  if (_41 != _42)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 8591, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  _43 = _41 + 18446744073709551608;
  # .MEM_73 = VDEF <.MEM_29>
  MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569 = _43;
  # DEBUG D#66ptD.0 => MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569
  # DEBUG D#65ptD.0 => &MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219._M_implD.19670
  # DEBUG D#26ptD.0 => D#65ptD.0
  # DEBUG D#27ptD.0 => D#66ptD.0
  # DEBUG __aD.22707 => D#26ptD.0
  # DEBUG __pD.22706 => D#27ptD.0
  # VUSE <.MEM_73>
  pretmp_34 = cD.20320;
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 968, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       10 [10.1%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.24398 => &_ZN6Credit5_freeED.19258.cD.20262
  # DEBUG D#64ptD.0 => &MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219
  # DEBUG thisD.24400 => D#64ptD.0
  # DEBUG __pD.24399 => _41
  # DEBUG __sizeD.22687 => 8
  # DEBUG D#60ptD.0 => &D#64ptD.0->_M_implD.19670
  # DEBUG D#58ptD.0 => D#60ptD.0
  # DEBUG __pD.24404 => _41
  # DEBUG __aD.24402 => D#58ptD.0
  # DEBUG __nD.24403 => D#59ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#54ptD.0 => D#56ptD.0
  # DEBUG D#55ptD.0 => D#57ptD.0
  # DEBUG __pD.24407 => _41
  # DEBUG thisD.24405 => D#54ptD.0
  # DEBUG D.24406 => D#55ptD.0
  # .MEM_68 = VDEF <.MEM_29>
  # USE = nonlocal null { D.19257 D.20320 D.24412 } (nonlocal, escaped)
  # CLB = nonlocal null { D.19257 D.20320 D.24412 } (nonlocal, escaped)
  _ZdlPvD.2766 (_41);
  # VUSE <.MEM_68>
  # PT = nonlocal escaped 
  _44 = MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219._M_implD.19670._M_finishD.19675._M_nodeD.19572;
  # PT = nonlocal escaped 
  _45 = _44 + 18446744073709551608;
  # DEBUG D#63ptD.0 => &MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219._M_implD.19670._M_finishD.19675
  # DEBUG thisD.24409 => D#63ptD.0
  # DEBUG __new_nodeD.24408 => _45
  # .MEM_69 = VDEF <.MEM_68>
  MEM[(struct _Deque_iteratorD.19537 *)&_ZN6Credit5_freeED.19258 + 48B]._M_nodeD.19572 = _45;
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  _46 = MEM[(struct CreditD.18194 * * *)_44 + -8B];
  # .MEM_70 = VDEF <.MEM_69>
  MEM[(struct _Deque_iteratorD.19537 *)&_ZN6Credit5_freeED.19258 + 48B]._M_firstD.19570 = _46;
  # DEBUG __sizeD.22490 => 8
  # PT = nonlocal escaped 
  _47 = _46 + 512;
  # .MEM_71 = VDEF <.MEM_70>
  MEM[(struct _Deque_iteratorD.19537 *)&_ZN6Credit5_freeED.19258 + 48B]._M_lastD.19571 = _47;
  # PT = nonlocal escaped 
  _48 = &MEM[(voidD.45 *)_46 + 504B];
  # .MEM_72 = VDEF <.MEM_71>
  MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569 = _48;
  # DEBUG D#62ptD.0 => MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219._M_implD.19670._M_finishD.19675._M_curD.19569
  # DEBUG D#61ptD.0 => &MEM[(struct dequeD.19255 *)&_ZN6Credit5_freeED.19258].D.20219
  # DEBUG thisD.22692 => D#61ptD.0
  # DEBUG D#27ptD.0 => D#62ptD.0
  # DEBUG __aD.22691 => D#26ptD.0
  # DEBUG __pD.22690 => D#27ptD.0
  # DEBUG D#25ptD.0 => D#27ptD.0
  # DEBUG D#24ptD.0 => D#26ptD.0
  # DEBUG D#22ptD.0 => D#24ptD.0
  # DEBUG D#23ptD.0 => D#25ptD.0
  # DEBUG thisD.22481 => D#22ptD.0
  # DEBUG __pD.22480 => D#23ptD.0
  # VUSE <.MEM_72>
  pretmp_60 = cD.20320;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 12, next block 1, flags: (NEW, REACHABLE)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_65(7), .MEM_72(12), .MEM_67(14), .MEM_73(11)>
  # PT = nonlocal escaped { D.24412 } (escaped heap)
  # prephitmp_38 = PHI <pretmp_59(7), pretmp_60(12), prephitmp_58(14), pretmp_34(11)>
  # .MEM_13 = VDEF <.MEM_1>
  cD.20320 ={v} {CLOBBER};
  # VUSE <.MEM_13>
  return prephitmp_38;
;;    succ:       EXIT [100.0%] 

}


